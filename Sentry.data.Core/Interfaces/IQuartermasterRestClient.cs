//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Sentry.data.Core.Interfaces.QuartermasterRestClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>Registers a build to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="definition">Build definition id that generated the build version</param>
        /// <param name="requiresConfigTransformation">Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="scmProjectKey">SCM Project Key</param>
        /// <param name="scmRepoName">SCM Repository Name</param>
        /// <param name="commitId">full SHA1 of the commit (ex: e00cf62997a027bbf785614a93e2e55bb331d268)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsPostAsync(string saidAssetKey, string applicationName, ApplicationType applicationType, string artifactName, ArtifactType artifactType, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, string definition, RequiresConfigTransformation? requiresConfigTransformation, System.DateTimeOffset? deployDueDate, string notes, string scmProjectKey, string scmRepoName, string commitId, string buildNumber, string buildName, string digest, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a build to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="definition">Build definition id that generated the build version</param>
        /// <param name="requiresConfigTransformation">Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="scmProjectKey">SCM Project Key</param>
        /// <param name="scmRepoName">SCM Repository Name</param>
        /// <param name="commitId">full SHA1 of the commit (ex: e00cf62997a027bbf785614a93e2e55bb331d268)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsPostAsync(string saidAssetKey, string applicationName, ApplicationType applicationType, string artifactName, ArtifactType artifactType, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, string definition, RequiresConfigTransformation? requiresConfigTransformation, System.DateTimeOffset? deployDueDate, string notes, string scmProjectKey, string scmRepoName, string commitId, string buildNumber, string buildName, string digest, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Build</summary>
        /// <param name="buildId">Build id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> BuildsDeleteAsync(int buildId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Build</summary>
        /// <param name="buildId">Build id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> BuildsDeleteAsync(int buildId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve the builds registered to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BuildInfo>> BuildsSaidAssetKeyApplicationNameArtifactNameGetAsync(string saidAssetKey, string applicationName, string artifactName, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the builds registered to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BuildInfo>> BuildsSaidAssetKeyApplicationNameArtifactNameGetAsync(string saidAssetKey, string applicationName, string artifactName, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure admin build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsAdminHooksPostAsync(string saidAssetKey, ArtifactName artifactName, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure admin build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsAdminHooksPostAsync(string saidAssetKey, ArtifactName artifactName, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure build artifact to the named environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="oddjobUrl">Oddjob Url to call on deployment</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsCommonPostAsync(string saidAssetKey, string artifactName, string version, BuildLocationInfo buildLocation, int namedEnvironmentId, string oddjobUrl, System.DateTimeOffset? deployDueDate, string notes, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure build artifact to the named environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="oddjobUrl">Oddjob Url to call on deployment</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsCommonPostAsync(string saidAssetKey, string artifactName, string version, BuildLocationInfo buildLocation, int namedEnvironmentId, string oddjobUrl, System.DateTimeOffset? deployDueDate, string notes, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure DSL build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsDSLHooksPostAsync(string saidAssetKey, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure DSL build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsDSLHooksPostAsync(string saidAssetKey, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List database registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInfo>> DatabaseGetAsync(string saidAssetKey, int? namedEnvironmentId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List database registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInfo>> DatabaseGetAsync(string saidAssetKey, int? namedEnvironmentId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create database registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="serverAlias">Server CName for the server/named environment</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="databasePurpose">Purpose of the assignment</param>
        /// <param name="domain">Domain of the database</param>
        /// <param name="originalResource">Location where the database originated from</param>
        /// <param name="databaseKey">Key value for linking the database across multiple named environments</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInfo> DatabasePostAsync(string saidAssetKey, int namedEnvironmentId, string serverAlias, string databaseName, DatabasePurpose databasePurpose, Domain domain, string originalResource, string databaseKey, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create database registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="serverAlias">Server CName for the server/named environment</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="databasePurpose">Purpose of the assignment</param>
        /// <param name="domain">Domain of the database</param>
        /// <param name="originalResource">Location where the database originated from</param>
        /// <param name="databaseKey">Key value for linking the database across multiple named environments</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInfo> DatabasePostAsync(string saidAssetKey, int namedEnvironmentId, string serverAlias, string databaseName, DatabasePurpose databasePurpose, Domain domain, string originalResource, string databaseKey, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete database registration</summary>
        /// <param name="databaseId">Database registration Id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DatabaseDeleteAsync(int databaseId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete database registration</summary>
        /// <param name="databaseId">Database registration Id</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DatabaseDeleteAsync(int databaseId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of databases from DBA Portal</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbGetAsync(string serverName, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of databases from DBA Portal</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbGetAsync(string serverName, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of database servers from DBA Portal</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbServersGetAsync(string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of database servers from DBA Portal</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbServersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Start a deployment</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="requestId">Request id the deployment is for</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsPostAsync(int namedEnvironmentId, int? requestId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a deployment</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="requestId">Request id the deployment is for</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsPostAsync(int namedEnvironmentId, int? requestId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment detail</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="includeLogs">include deployment log messages in responses</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> DeploymentsDeploymentIdGetAsync(int deploymentId, IncludeLogs includeLogs, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment detail</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="includeLogs">include deployment log messages in responses</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> DeploymentsDeploymentIdGetAsync(int deploymentId, IncludeLogs includeLogs, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Complete a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="status">Status of deployment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsDeploymentIdPostAsync(int deploymentId, Status status, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="status">Status of deployment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsDeploymentIdPostAsync(int deploymentId, Status status, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Register Application URI</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an URI is being added to.</param>
        /// <param name="uriType">The Type of the URI</param>
        /// <param name="uri">The URI</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNamePostAsync(int deploymentId, string applicationName, UriType uriType, string uri, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Register Application URI</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an URI is being added to.</param>
        /// <param name="uriType">The Type of the URI</param>
        /// <param name="uri">The URI</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNamePostAsync(int deploymentId, string applicationName, UriType uriType, string uri, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add artifact</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the artifact</param>
        /// <param name="tags">Key/Value meta data</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifact> DeploymentsDeploymentIdApplicationNameArtifactNamePostAsync(int deploymentId, string applicationName, string artifactName, ArtifactType2 artifactType, string version, System.Collections.Generic.IEnumerable<TagReference> tags, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add artifact</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the artifact</param>
        /// <param name="tags">Key/Value meta data</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifact> DeploymentsDeploymentIdApplicationNameArtifactNamePostAsync(int deploymentId, string applicationName, string artifactName, ArtifactType2 artifactType, string version, System.Collections.Generic.IEnumerable<TagReference> tags, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add resource</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="resourceName">Name of the resource to add to the artifact</param>
        /// <param name="uri">URI of the resource</param>
        /// <param name="smartsUri">SMARTS URI of the resource</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNameArtifactNameResourceNamePostAsync(int deploymentId, string applicationName, string artifactName, string resourceName, string uri, string smartsUri, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add resource</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="resourceName">Name of the resource to add to the artifact</param>
        /// <param name="uri">URI of the resource</param>
        /// <param name="smartsUri">SMARTS URI of the resource</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNameArtifactNameResourceNamePostAsync(int deploymentId, string applicationName, string artifactName, string resourceName, string uri, string smartsUri, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add message to a deployment application</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdApplicationNameLogMessagePostAsync(int deploymentId, string applicationName, string message, string category, Level? level, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add message to a deployment application</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdApplicationNameLogMessagePostAsync(int deploymentId, string applicationName, string message, string category, Level? level, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add message to a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdLogMessagePostAsync(int deploymentId, string message, string category, Level2? level, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add message to a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdLogMessagePostAsync(int deploymentId, string message, string category, Level2? level, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Specify a deployment timeout</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="timeout">Specify timeout in minutes for a long running deployment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTimeout> DeploymentsTimeoutPostAsync(int deploymentId, int timeout, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Specify a deployment timeout</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="timeout">Specify timeout in minutes for a long running deployment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTimeout> DeploymentsTimeoutPostAsync(int deploymentId, int timeout, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Trigger a deployment request</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="scheduledRunTime">The time the request is scheduled to run. If scheduledRunTime is not supplied, the request will be run immediately.</param>
        /// <param name="requestId">The request number to run. If requestId is not supplied, the first open request flagged to be triggered by the API will be run.</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTrigger> DeploymentsTriggerPostAsync(int namedEnvironmentId, System.DateTimeOffset? scheduledRunTime, int? requestId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Trigger a deployment request</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="scheduledRunTime">The time the request is scheduled to run. If scheduledRunTime is not supplied, the request will be run immediately.</param>
        /// <param name="requestId">The request number to run. If requestId is not supplied, the first open request flagged to be triggered by the API will be run.</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTrigger> DeploymentsTriggerPostAsync(int namedEnvironmentId, System.DateTimeOffset? scheduledRunTime, int? requestId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Is application alive</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IsAliveGetAsync(string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Is application alive</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IsAliveGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Named Environments</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironment>> NamedEnvironmentsGetAsync(string saidAssetKey, ShowDeleted showDeleted, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Named Environments</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironment>> NamedEnvironmentsGetAsync(string saidAssetKey, ShowDeleted showDeleted, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="environmentType">Type of environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironment> NamedEnvironmentsPostAsync(string saidAssetKey, string name, EnvironmentType environmentType, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="environmentType">Type of environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironment> NamedEnvironmentsPostAsync(string saidAssetKey, string name, EnvironmentType environmentType, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Named Environment</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> NamedEnvironmentsDeleteAsync(int namedEnvironmentId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Named Environment</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> NamedEnvironmentsDeleteAsync(int namedEnvironmentId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment History</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="fromDate">Start date range</param>
        /// <param name="toDate">End date range</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentHistory>> NamedEnvironmentsNamedEnvironmentIdDeploymentHistoryGetAsync(int namedEnvironmentId, string fromDate, string toDate, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment History</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="fromDate">Start date range</param>
        /// <param name="toDate">End date range</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentHistory>> NamedEnvironmentsNamedEnvironmentIdDeploymentHistoryGetAsync(int namedEnvironmentId, string fromDate, string toDate, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment detail of latest item</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="returnPending">Return a pending deployment that has started but has not yet completed (in-flight).</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> NamedEnvironmentsNamedEnvironmentIdLatestDeploymentGetAsync(int namedEnvironmentId, ReturnPending returnPending, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment detail of latest item</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="returnPending">Return a pending deployment that has started but has not yet completed (in-flight).</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> NamedEnvironmentsNamedEnvironmentIdLatestDeploymentGetAsync(int namedEnvironmentId, ReturnPending returnPending, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of Named Environments that can promote to the specified Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathDetails> PromotionPathNamedEnvironmentsGetAsync(string saidAssetKey, string name, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of Named Environments that can promote to the specified Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathDetails> PromotionPathNamedEnvironmentsGetAsync(string saidAssetKey, string name, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Named Environment Hierarchy assignment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="isDefault">Sets the assignment as the default</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathNamedEnvironment> PromotionPathNamedEnvironmentsPostAsync(string saidAssetKey, string source, string destination, IsDefault isDefault, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Named Environment Hierarchy assignment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="isDefault">Sets the assignment as the default</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathNamedEnvironment> PromotionPathNamedEnvironmentsPostAsync(string saidAssetKey, string source, string destination, IsDefault isDefault, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Named Environment promotion path hierarchy</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PromotionPathNamedEnvironmentsDeleteAsync(string saidAssetKey, string source, string destination, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Named Environment promotion path hierarchy</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PromotionPathNamedEnvironmentsDeleteAsync(string saidAssetKey, string source, string destination, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Q Server status details</summary>
        /// <param name="saidAssetKey">Key of the SAID Asset</param>
        /// <param name="namedEnvironment">Name of the Named Environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QServerDetailsInfo> QServerDetailsGetAsync(string saidAssetKey, string namedEnvironment, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Q Server status details</summary>
        /// <param name="saidAssetKey">Key of the SAID Asset</param>
        /// <param name="namedEnvironment">Name of the Named Environment</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QServerDetailsInfo> QServerDetailsGetAsync(string saidAssetKey, string namedEnvironment, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationGetAsync(string location, string saidAssetKey, string environmentCode, ApplicationType2 applicationType, int namedEnvironmentId, string lookupKey, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationGetAsync(string location, string saidAssetKey, string environmentCode, ApplicationType2 applicationType, int namedEnvironmentId, string lookupKey, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="numberOfServers">Number of servers to register (Default is 1, Max of 256)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationPostAsync(string location, string saidAssetKey, string environmentCode, ApplicationType3 applicationType, int namedEnvironmentId, string lookupKey, int numberOfServers, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="numberOfServers">Number of servers to register (Default is 1, Max of 256)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationPostAsync(string location, string saidAssetKey, string environmentCode, ApplicationType3 applicationType, int namedEnvironmentId, string lookupKey, int numberOfServers, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete server Registration</summary>
        /// <param name="serverName">Server name</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> RegistrationDeleteAsync(string serverName, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete server Registration</summary>
        /// <param name="serverName">Server name</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> RegistrationDeleteAsync(string serverName, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the active reserved server names for a system asset</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationSystemGetAsync(string saidAssetKey, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the active reserved server names for a system asset</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationSystemGetAsync(string saidAssetKey, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registered server details</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGetAsync(string serverName, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registered server details</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGetAsync(string serverName, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List all server registrations</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet2Async(string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List all server registrations</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet2Async(string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Request Detail</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestDetail>> RequestGetAsync(int requestId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request Detail</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestDetail>> RequestGetAsync(int requestId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployments processed for the request</summary>
        /// <param name="requestId">Id of the request</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Request> RequestRequestIdDeploymentsGetAsync(int requestId, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployments processed for the request</summary>
        /// <param name="requestId">Id of the request</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Request> RequestRequestIdDeploymentsGetAsync(int requestId, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Submitted requests that are API triggered</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Named environment name</param>
        /// <param name="proposedRunTime">Filter requests that match a run time within their deployment window</param>
        /// <param name="includeAll">Return all requests even if they are outside the time window</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentRequest>> RequestsGetAsync(string saidAssetKey, string namedEnvironment, System.DateTimeOffset? proposedRunTime, IncludeAll? includeAll, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Submitted requests that are API triggered</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Named environment name</param>
        /// <param name="proposedRunTime">Filter requests that match a run time within their deployment window</param>
        /// <param name="includeAll">Return all requests even if they are outside the time window</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentRequest>> RequestsGetAsync(string saidAssetKey, string namedEnvironment, System.DateTimeOffset? proposedRunTime, IncludeAll? includeAll, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Server status details</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<NamedEnvironmentDetails> ServerDetailsGetAsync(string saidAssetKey, string namedEnvironment, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Server status details</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<NamedEnvironmentDetails> ServerDetailsGetAsync(string saidAssetKey, string namedEnvironment, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Server information for the server inventory page</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerInventoryDetails> QServerDetailsGet2Async(string saidAssetKey, string api_version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Server information for the server inventory page</summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerInventoryDetails> QServerDetailsGet2Async(string saidAssetKey, string api_version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the possible values for access types to use in the UI</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListAccessTypesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the possible values for access types to use in the UI</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListAccessTypesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimNamedEnvironmentAccessEntity> AddAssetAccessAsync(AssetAccessRequest accessRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimNamedEnvironmentAccessEntity> AddAssetAccessAsync(AssetAccessRequest accessRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteAssetAccessAsync(AssetAccessRequest accessRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteAssetAccessAsync(AssetAccessRequest accessRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimNamedEnvironmentAccessEntity>> GetAssetAccessAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimNamedEnvironmentAccessEntity>> GetAssetAccessAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add Artifact Type Version Validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> AddArtifactValidationAsync(string saidAssetKey, string version, RequestArtifactTypeVersionValidation artifactTypeVersionValidation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add Artifact Type Version Validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> AddArtifactValidationAsync(string saidAssetKey, string version, RequestArtifactTypeVersionValidation artifactTypeVersionValidation, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the artifact content for the specified artifactName (Not Resources Artifact)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="applicationName">Name of the application the artifact is assigned to</param>
        /// <param name="artifactName">Name of the artifact to retrieve</param>
        /// <param name="returnNewest">Return the newest registered item instead of what was last deployed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ArtifactContentGetAsync(string assetKeyCode, string namedEnvironment, string applicationName, string artifactName, ReturnNewest returnNewest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the artifact content for the specified artifactName (Not Resources Artifact)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="applicationName">Name of the application the artifact is assigned to</param>
        /// <param name="artifactName">Name of the artifact to retrieve</param>
        /// <param name="returnNewest">Return the newest registered item instead of what was last deployed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ArtifactContentGetAsync(string assetKeyCode, string namedEnvironment, string applicationName, string artifactName, ReturnNewest returnNewest, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ArtifactTypeVersionTaskEntity>> GetIncompleteBuildRetentionTasksAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ArtifactTypeVersionTaskEntity>> GetIncompleteBuildRetentionTasksAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ArtifactTypeVersionTaskEntity>> GetIncompleteTriggerTasksAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ArtifactTypeVersionTaskEntity>> GetIncompleteTriggerTasksAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Mark an artifact as deleted and put it in a read-only state</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeEntity> DeleteArtifactByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mark an artifact as deleted and put it in a read-only state</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeEntity> DeleteArtifactByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an Artifact Validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> UpdateArtifactValidationAsync(RequestArtifactTypeVersionValidationEdit validation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an Artifact Validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> UpdateArtifactValidationAsync(RequestArtifactTypeVersionValidationEdit validation, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a Quartermaster Asset that MUST already exist in SAID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> CreateAssetAsync(string keyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a Quartermaster Asset that MUST already exist in SAID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> CreateAssetAsync(string keyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Re-enable an asset that was marked as deleted</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> EnableAssetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Re-enable an asset that was marked as deleted</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> EnableAssetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Mark an asset as deleted and put it in a read-only state</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> DeleteAssetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mark an asset as deleted and put it in a read-only state</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetEntity> DeleteAssetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get all assets</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetEntity>> GetAllAssetsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all assets</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetEntity>> GetAllAssetsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiAsset>>> GetAssetsAsync(string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiAsset>>> GetAssetsAsync(string userId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiAsset> GetAssetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiAsset> GetAssetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiAsset> GetAssetByKeyCodeAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiAsset> GetAssetByKeyCodeAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a build to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="definition">Build definition id that generated the build version</param>
        /// <param name="requiresConfigTransformation">Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="scmProjectKey">SCM Project Key</param>
        /// <param name="scmRepoName">SCM Repository Name</param>
        /// <param name="commitId">full SHA1 of the commit (ex: e00cf62997a027bbf785614a93e2e55bb331d268)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsPost2Async(string saidAssetKey, string applicationName, ApplicationType4 applicationType, string artifactName, ArtifactType3 artifactType, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, string definition, RequiresConfigTransformation2? requiresConfigTransformation, System.DateTimeOffset? deployDueDate, string notes, string scmProjectKey, string scmRepoName, string commitId, string buildNumber, string buildName, string digest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a build to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="definition">Build definition id that generated the build version</param>
        /// <param name="requiresConfigTransformation">Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <param name="scmProjectKey">SCM Project Key</param>
        /// <param name="scmRepoName">SCM Repository Name</param>
        /// <param name="commitId">full SHA1 of the commit (ex: e00cf62997a027bbf785614a93e2e55bb331d268)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsPost2Async(string saidAssetKey, string applicationName, ApplicationType4 applicationType, string artifactName, ArtifactType3 artifactType, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, string definition, RequiresConfigTransformation2? requiresConfigTransformation, System.DateTimeOffset? deployDueDate, string notes, string scmProjectKey, string scmRepoName, string commitId, string buildNumber, string buildName, string digest, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Build</summary>
        /// <param name="buildId">Build id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> BuildsDelete2Async(int buildId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Build</summary>
        /// <param name="buildId">Build id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> BuildsDelete2Async(int buildId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve the builds registered to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BuildInfo>> BuildsSaidAssetKeyApplicationNameArtifactNameGet2Async(string saidAssetKey, string applicationName, string artifactName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the builds registered to the application artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BuildInfo>> BuildsSaidAssetKeyApplicationNameArtifactNameGet2Async(string saidAssetKey, string applicationName, string artifactName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure admin build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsAdminHooksPost2Async(string saidAssetKey, ArtifactName2 artifactName, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure admin build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsAdminHooksPost2Async(string saidAssetKey, ArtifactName2 artifactName, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure build artifact to the named environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="oddjobUrl">Oddjob Url to call on deployment</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsCommonPost2Async(string saidAssetKey, string artifactName, string version, BuildLocationInfo buildLocation, int namedEnvironmentId, string oddjobUrl, System.DateTimeOffset? deployDueDate, string notes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure build artifact to the named environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="artifactName">Name of the artifact</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="oddjobUrl">Oddjob Url to call on deployment</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsCommonPost2Async(string saidAssetKey, string artifactName, string version, BuildLocationInfo buildLocation, int namedEnvironmentId, string oddjobUrl, System.DateTimeOffset? deployDueDate, string notes, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registers a common infrastructure DSL build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsDSLHooksPost2Async(string saidAssetKey, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registers a common infrastructure DSL build hook artifact</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="version">Version of the build</param>
        /// <param name="buildLocation">Location of the build</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="deployDueDate">Expected date that the artifact should be deployed to a Named Environment</param>
        /// <param name="notes">Description of changes for the version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildInfo> BuildsDSLHooksPost2Async(string saidAssetKey, string version, BuildLocationInfo buildLocation, int? namedEnvironmentId, System.DateTimeOffset? deployDueDate, string notes, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfigurationSettingEntity> ConfigurationSettingPostAsync(string assetName, string namedEnvironmentName, SettingType settingType, InfrastructureSetting infrastructureSetting, SettingName settingName, string settingValue, string applicationName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfigurationSettingEntity> ConfigurationSettingPostAsync(string assetName, string namedEnvironmentName, SettingType settingType, InfrastructureSetting infrastructureSetting, SettingName settingName, string settingValue, string applicationName, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> ConfigurationSettingDeleteAsync(int id, ConfigurationType configurationType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> ConfigurationSettingDeleteAsync(int id, ConfigurationType configurationType, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigurationSettingEntity>> ConfigurationSettingGetByNamedEnvironmentAsync(string saidKeyCode, string environmentName, SettingType2 settingType, string applicationName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigurationSettingEntity>> ConfigurationSettingGetByNamedEnvironmentAsync(string saidKeyCode, string environmentName, SettingType2 settingType, string applicationName, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigurationSettingEntity>> ConfigurationSettingGetByNamedEnvironment2Async(string saidKeyCode, string environmentName, Setting setting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigurationSettingEntity>> ConfigurationSettingGetByNamedEnvironment2Async(string saidKeyCode, string environmentName, Setting setting, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all applications current state for the environment</summary>
        /// <param name="assetKeyCode">SAID Key Code</param>
        /// <param name="environmentName">Environment Name</param>
        /// <param name="applicationName">Application Name (Optional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnvironmentState> GetApplicationStateAsync(string assetKeyCode, string environmentName, string applicationName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all applications current state for the environment</summary>
        /// <param name="assetKeyCode">SAID Key Code</param>
        /// <param name="environmentName">Environment Name</param>
        /// <param name="applicationName">Application Name (Optional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnvironmentState> GetApplicationStateAsync(string assetKeyCode, string environmentName, string applicationName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List database registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInfo>> DatabaseGet2Async(string saidAssetKey, int? namedEnvironmentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List database registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInfo>> DatabaseGet2Async(string saidAssetKey, int? namedEnvironmentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create database registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="serverAlias">Server CName for the server/named environment</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="databasePurpose">Purpose of the assignment</param>
        /// <param name="domain">Domain of the database</param>
        /// <param name="originalResource">Location where the database originated from</param>
        /// <param name="databaseKey">Key value for linking the database across multiple named environments</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInfo> DatabasePost2Async(string saidAssetKey, int namedEnvironmentId, string serverAlias, string databaseName, DatabasePurpose2 databasePurpose, Domain2 domain, string originalResource, string databaseKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create database registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="serverAlias">Server CName for the server/named environment</param>
        /// <param name="databaseName">Database name</param>
        /// <param name="databasePurpose">Purpose of the assignment</param>
        /// <param name="domain">Domain of the database</param>
        /// <param name="originalResource">Location where the database originated from</param>
        /// <param name="databaseKey">Key value for linking the database across multiple named environments</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInfo> DatabasePost2Async(string saidAssetKey, int namedEnvironmentId, string serverAlias, string databaseName, DatabasePurpose2 databasePurpose, Domain2 domain, string originalResource, string databaseKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete database registration</summary>
        /// <param name="databaseId">Database registration Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DatabaseDelete2Async(int databaseId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete database registration</summary>
        /// <param name="databaseId">Database registration Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DatabaseDelete2Async(int databaseId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of databases from DBA Portal</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbGet2Async(string serverName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of databases from DBA Portal</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbGet2Async(string serverName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of database servers from DBA Portal</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbServersGet2Async();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of database servers from DBA Portal</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> DbServersGet2Async(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteArtifactValidationAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a validation</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteArtifactValidationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeploymentsFuzzyAsync(string assetKeyCode, string namedEnvironmentName, string idSearchString);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeploymentsFuzzyAsync(string assetKeyCode, string namedEnvironmentName, string idSearchString, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Deployments for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <param name="numberOfResults">Number of results</param>
        /// <param name="startingIndex">Starting index</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeploymentsAsync(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Deployments for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <param name="numberOfResults">Number of results</param>
        /// <param name="startingIndex">Starting index</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeploymentsAsync(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Records service level details about an application</summary>
        /// <param name="deploymentId">The deployment point in time when these details were recorded</param>
        /// <param name="applicationName">Name of the application the service details are for</param>
        /// <param name="platform">Platform of the application</param>
        /// <param name="serviceName">Service Name of the application (Optional)</param>
        /// <param name="serviceType">Service Type of the application (Optional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityNotFoundException> SetApplicationDetailAsync(int deploymentId, string applicationName, Platform platform, string serviceName, ServiceType? serviceType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Records service level details about an application</summary>
        /// <param name="deploymentId">The deployment point in time when these details were recorded</param>
        /// <param name="applicationName">Name of the application the service details are for</param>
        /// <param name="platform">Platform of the application</param>
        /// <param name="serviceName">Service Name of the application (Optional)</param>
        /// <param name="serviceType">Service Type of the application (Optional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityNotFoundException> SetApplicationDetailAsync(int deploymentId, string applicationName, Platform platform, string serviceName, ServiceType? serviceType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a slim deployment information for a deployment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiDeployment> GetSlimDeploymentAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a slim deployment information for a deployment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiDeployment> GetSlimDeploymentAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Start a deployment</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="requestId">Request id the deployment is for</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsPost2Async(int namedEnvironmentId, int? requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a deployment</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="requestId">Request id the deployment is for</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsPost2Async(int namedEnvironmentId, int? requestId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment detail</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="includeLogs">include deployment log messages in responses</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> DeploymentsDeploymentIdGet2Async(int deploymentId, IncludeLogs2 includeLogs);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment detail</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="includeLogs">include deployment log messages in responses</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> DeploymentsDeploymentIdGet2Async(int deploymentId, IncludeLogs2 includeLogs, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Complete a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="status">Status of deployment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsDeploymentIdPost2Async(int deploymentId, Status2 status);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="status">Status of deployment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deployment> DeploymentsDeploymentIdPost2Async(int deploymentId, Status2 status, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Register Application URI</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an URI is being added to.</param>
        /// <param name="uriType">The Type of the URI</param>
        /// <param name="uri">The URI</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNamePost2Async(int deploymentId, string applicationName, UriType2 uriType, string uri);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Register Application URI</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an URI is being added to.</param>
        /// <param name="uriType">The Type of the URI</param>
        /// <param name="uri">The URI</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNamePost2Async(int deploymentId, string applicationName, UriType2 uriType, string uri, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add artifact</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the artifact</param>
        /// <param name="tags">Key/Value meta data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifact> DeploymentsDeploymentIdApplicationNameArtifactNamePost2Async(int deploymentId, string applicationName, string artifactName, ArtifactType4 artifactType, string version, System.Collections.Generic.IEnumerable<TagReference> tags);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add artifact</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="artifactType">Type of artifact</param>
        /// <param name="version">Version of the artifact</param>
        /// <param name="tags">Key/Value meta data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifact> DeploymentsDeploymentIdApplicationNameArtifactNamePost2Async(int deploymentId, string applicationName, string artifactName, ArtifactType4 artifactType, string version, System.Collections.Generic.IEnumerable<TagReference> tags, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add resource</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="resourceName">Name of the resource to add to the artifact</param>
        /// <param name="uri">URI of the resource</param>
        /// <param name="smartsUri">SMARTS URI of the resource</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNameArtifactNameResourceNamePost2Async(int deploymentId, string applicationName, string artifactName, string resourceName, string uri, string smartsUri);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add resource</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Name of application that an artifact is being added to.</param>
        /// <param name="artifactName">Name of the artifact to add to the application</param>
        /// <param name="resourceName">Name of the resource to add to the artifact</param>
        /// <param name="uri">URI of the resource</param>
        /// <param name="smartsUri">SMARTS URI of the resource</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentApplicationArtifactResource> DeploymentsDeploymentIdApplicationNameArtifactNameResourceNamePost2Async(int deploymentId, string applicationName, string artifactName, string resourceName, string uri, string smartsUri, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add message to a deployment application</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdApplicationNameLogMessagePost2Async(int deploymentId, string applicationName, string message, string category, Level3? level);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add message to a deployment application</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="applicationName">Deployment application name</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdApplicationNameLogMessagePost2Async(int deploymentId, string applicationName, string message, string category, Level3? level, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add message to a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdLogMessagePost2Async(int deploymentId, string message, string category, Level4? level);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add message to a deployment</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="message">Description of the message</param>
        /// <param name="category">Category Name</param>
        /// <param name="level">Category Level</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogMessage> DeploymentsDeploymentIdLogMessagePost2Async(int deploymentId, string message, string category, Level4? level, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Specify a deployment timeout</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="timeout">Specify timeout in minutes for a long running deployment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTimeout> DeploymentsTimeoutPost2Async(int deploymentId, int timeout);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Specify a deployment timeout</summary>
        /// <param name="deploymentId">Deployment id</param>
        /// <param name="timeout">Specify timeout in minutes for a long running deployment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTimeout> DeploymentsTimeoutPost2Async(int deploymentId, int timeout, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Trigger a deployment request</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="scheduledRunTime">The time the request is scheduled to run. If scheduledRunTime is not supplied, the request will be run immediately.</param>
        /// <param name="requestId">The request number to run. If requestId is not supplied, the first open request flagged to be triggered by the API will be run.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTrigger> DeploymentsTriggerPost2Async(int namedEnvironmentId, System.DateTimeOffset? scheduledRunTime, int? requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Trigger a deployment request</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="scheduledRunTime">The time the request is scheduled to run. If scheduledRunTime is not supplied, the request will be run immediately.</param>
        /// <param name="requestId">The request number to run. If requestId is not supplied, the first open request flagged to be triggered by the API will be run.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentTrigger> DeploymentsTriggerPost2Async(int namedEnvironmentId, System.DateTimeOffset? scheduledRunTime, int? requestId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetAsync(FavoriteAssetEntity favoriteAsset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetAsync(FavoriteAssetEntity favoriteAsset, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetForCurrentUserAsync(FavoriteAssetEntity favoriteAsset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetForCurrentUserAsync(FavoriteAssetEntity favoriteAsset, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetsForCurrentUserAsync(System.Collections.Generic.IEnumerable<AssetEntity> assets);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> CreateFavoriteAssetsForCurrentUserAsync(System.Collections.Generic.IEnumerable<AssetEntity> assets, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DeleteFavoriteAssetAsync(FavoriteAssetEntity favoriteAssetEntity);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DeleteFavoriteAssetAsync(FavoriteAssetEntity favoriteAssetEntity, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DeleteFavoriteAssetForCurrentUserAsync(FavoriteAssetEntity favoriteAssetEntity);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> DeleteFavoriteAssetForCurrentUserAsync(FavoriteAssetEntity favoriteAssetEntity, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FavoriteAssetEntity>> GetFavoriteAssetsAsync(string associateId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FavoriteAssetEntity>> GetFavoriteAssetsAsync(string associateId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FavoriteAssetEntity>> GetFavoriteAssetsForCurrentUserAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FavoriteAssetEntity>> GetFavoriteAssetsForCurrentUserAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsAssetFavoritedAsync(FavoriteAssetEntity favoriteAssetEntity);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsAssetFavoritedAsync(FavoriteAssetEntity favoriteAssetEntity, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsAssetFavoritedForCurrentUserAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsAssetFavoritedForCurrentUserAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SystemPreferenceEntity>> GetFeatureFlagsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SystemPreferenceEntity>> GetFeatureFlagsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemPreferenceEntity> GetFeatureFlagValueAsync(string key);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemPreferenceEntity> GetFeatureFlagValueAsync(string key, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiSystemPreference> AddFeatureFlagAsync(SystemPreferenceEntity ff);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiSystemPreference> AddFeatureFlagAsync(SystemPreferenceEntity ff, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteFeatureFlagAsync(string flagKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteFeatureFlagAsync(string flagKey, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemPreferenceEntity> UpdateFeatureFlagValueAsync(SystemPreferenceEntity ff);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemPreferenceEntity> UpdateFeatureFlagValueAsync(SystemPreferenceEntity ff, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Artifact Type Version Validation By Id</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> GetArtifactValidationAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Artifact Type Version Validation By Id</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> GetArtifactValidationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get all Artifact Type Version Validations</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> GetArtifactValidation2Async(string saidAssetKey, string version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all Artifact Type Version Validations</summary>
        /// <returns>Artifact</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ArtifactTypeVersionValidationEntity> GetArtifactValidation2Async(string saidAssetKey, string version, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetConfigurationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetConfigurationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestConfigurationSettingEntity>> GetInfrastructureFileAsync(int requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestConfigurationSettingEntity>> GetInfrastructureFileAsync(int requestId, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetInfrastructureFile2Async(int requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetInfrastructureFile2Async(int requestId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves user information.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApplicationUser> GetUserInfoAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves user information.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApplicationUser> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates the status of grant comittal(s) associated with a SQL request.</summary>
        /// <param name="sqlRequestId">SQL DBA Portal Request ID</param>
        /// <param name="status">SqlRequestStatus</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> GrantCommitStatusPutAsync(int sqlRequestId, Status3 status);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the status of grant comittal(s) associated with a SQL request.</summary>
        /// <param name="sqlRequestId">SQL DBA Portal Request ID</param>
        /// <param name="status">SqlRequestStatus</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> GrantCommitStatusPutAsync(int sqlRequestId, Status3 status, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all grants assigned to an asset for the specifed logical database/identity key</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GrantMatrix>> GrantsAssetKeyCodeGetAsync(string assetKeyCode, ShowDeleted2 showDeleted, string logicalName, string identityKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all grants assigned to an asset for the specifed logical database/identity key</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GrantMatrix>> GrantsAssetKeyCodeGetAsync(string assetKeyCode, ShowDeleted2 showDeleted, string logicalName, string identityKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete all grants assigned to an asset for the specifed logical database/identity key</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> GrantsAssetKeyCodeDeleteAsync(string assetKeyCode, string logicalName, string identityKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all grants assigned to an asset for the specifed logical database/identity key</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> GrantsAssetKeyCodeDeleteAsync(string assetKeyCode, string logicalName, string identityKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update grants for the LogicalDb/Identity Key on an asset (wipe/reset grants)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <param name="grants">List of grants to assign</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GrantMatrix> GrantsAssetKeyCodeLogicalNameIdentityKeyPutAsync(string assetKeyCode, string logicalName, string identityKey, System.Collections.Generic.IEnumerable<GrantRequest> grants);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update grants for the LogicalDb/Identity Key on an asset (wipe/reset grants)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <param name="grants">List of grants to assign</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GrantMatrix> GrantsAssetKeyCodeLogicalNameIdentityKeyPutAsync(string assetKeyCode, string logicalName, string identityKey, System.Collections.Generic.IEnumerable<GrantRequest> grants, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Assign grants to the LogicalDb/Identity Key on an asset (append grants)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <param name="grants">List of grants to assign</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GrantMatrix> GrantsAssetKeyCodeLogicalNameIdentityKeyPostAsync(string assetKeyCode, string logicalName, string identityKey, System.Collections.Generic.IEnumerable<GrantRequest> grants);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign grants to the LogicalDb/Identity Key on an asset (append grants)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="identityKey">Identity key</param>
        /// <param name="grants">List of grants to assign</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GrantMatrix> GrantsAssetKeyCodeLogicalNameIdentityKeyPostAsync(string assetKeyCode, string logicalName, string identityKey, System.Collections.Generic.IEnumerable<GrantRequest> grants, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasAccessAsync(string saidAssetKey, AccessCode accessCode, string environmentName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasAccessAsync(string saidAssetKey, AccessCode accessCode, string environmentName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Determine if a given user has access to a quartermaster asset</summary>
        /// <param name="saidAssetKey">SAID Asset Key Code</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasAssetAccessAsync(string saidAssetKey, string associateId, AccessCode2 accessCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Determine if a given user has access to a quartermaster asset</summary>
        /// <param name="saidAssetKey">SAID Asset Key Code</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasAssetAccessAsync(string saidAssetKey, string associateId, AccessCode2 accessCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Does user have access to environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of environment</param>
        /// <param name="associateId">User's associate ID</param>
        /// <param name="accessCode">Access Type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasEnvironmentAccessAsync(string saidAssetKey, string namedEnvironment, string associateId, AccessCode3 accessCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Does user have access to environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of environment</param>
        /// <param name="associateId">User's associate ID</param>
        /// <param name="accessCode">Access Type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasEnvironmentAccess> HasEnvironmentAccessAsync(string saidAssetKey, string namedEnvironment, string associateId, AccessCode3 accessCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Does user have access to environment</summary>
        /// <param name="environments">List of environments</param>
        /// <param name="associateId">User's associate ID</param>
        /// <param name="accessCode">Access Type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HasEnvironmentAccess>> HasEnvironmentAccessAllAsync(System.Collections.Generic.IEnumerable<EnvironmentAccessEntity> environments, string associateId, AccessCode4 accessCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Does user have access to environment</summary>
        /// <param name="environments">List of environments</param>
        /// <param name="associateId">User's associate ID</param>
        /// <param name="accessCode">Access Type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HasEnvironmentAccess>> HasEnvironmentAccessAllAsync(System.Collections.Generic.IEnumerable<EnvironmentAccessEntity> environments, string associateId, AccessCode4 accessCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Checks to see if a person has a specific Quartermaster Obsidian permission.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasPermissionAccess> HasPermissionAsync(string permission);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Checks to see if a person has a specific Quartermaster Obsidian permission.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HasPermissionAccess> HasPermissionAsync(string permission, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete identity key</summary>
        /// <param name="identityKeyId">IdentityKey Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IdentityKeyDeleteAsync(int identityKeyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete identity key</summary>
        /// <param name="identityKeyId">IdentityKey Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IdentityKeyDeleteAsync(int identityKeyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'Active Directory' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeyADGetAsync(string saidAssetKey, ShowDeleted3 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'Active Directory' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeyADGetAsync(string saidAssetKey, ShowDeleted3 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'Active Directory' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="domain">Domain</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="keyType">Key type</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeyADPostAsync(string saidAssetKey, Domain3 domain, string keyName, KeyType keyType, string description);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'Active Directory' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="domain">Domain</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="keyType">Key type</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeyADPostAsync(string saidAssetKey, Domain3 domain, string keyName, KeyType keyType, string description, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'User Entered Secret' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeySecretGetAsync(string saidAssetKey, ShowDeleted4 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'User Entered Secret' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeySecretGetAsync(string saidAssetKey, ShowDeleted4 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'User Entered Secret' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeySecretPostAsync(string saidAssetKey, string keyName, string description);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'User Entered Secret' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeySecretPostAsync(string saidAssetKey, string keyName, string description, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'User Entered Value' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeyValueGetAsync(string saidAssetKey, ShowDeleted5 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'User Entered Value' identity keys</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityKey>> IdentityKeyValueGetAsync(string saidAssetKey, ShowDeleted5 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'User Entered Value' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeyValuePostAsync(string saidAssetKey, string keyName, string description);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'User Entered Value' identity key</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="description">Description of the key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityKey> IdentityKeyValuePostAsync(string saidAssetKey, string keyName, string description, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete identity registration</summary>
        /// <param name="instanceId">Instance id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IdentityRegistrationDeleteAsync(int instanceId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete identity registration</summary>
        /// <param name="instanceId">Instance id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IdentityRegistrationDeleteAsync(int instanceId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'Active Directory' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistrationAD>> IdentityRegistrationADGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted6 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'Active Directory' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistrationAD>> IdentityRegistrationADGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted6 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'Active Directory' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="providerVersion">Identity key provider version</param>
        /// <param name="upn">Identity registration value</param>
        /// <param name="version">Version of the user instance</param>
        /// <param name="user">User name</param>
        /// <param name="netBios">NetBios name</param>
        /// <param name="dlln">Username with a netBios prefix</param>
        /// <param name="localGroupName">Local Group Name</param>
        /// <param name="globalGroupName">Global Group Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistrationAD> IdentityRegistrationADPostAsync(string saidAssetKey, string namedEnvironment, string keyName, ProviderVersion providerVersion, string upn, string version, string user, string netBios, string dlln, string localGroupName, string globalGroupName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'Active Directory' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="providerVersion">Identity key provider version</param>
        /// <param name="upn">Identity registration value</param>
        /// <param name="version">Version of the user instance</param>
        /// <param name="user">User name</param>
        /// <param name="netBios">NetBios name</param>
        /// <param name="dlln">Username with a netBios prefix</param>
        /// <param name="localGroupName">Local Group Name</param>
        /// <param name="globalGroupName">Global Group Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistrationAD> IdentityRegistrationADPostAsync(string saidAssetKey, string namedEnvironment, string keyName, ProviderVersion providerVersion, string upn, string version, string user, string netBios, string dlln, string localGroupName, string globalGroupName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'User Entered Secret' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistration>> IdentityRegistrationSecretGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted7 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'User Entered Secret' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistration>> IdentityRegistrationSecretGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted7 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'User Entered Secret' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="value">Identity key value</param>
        /// <param name="properties">Key properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistration> IdentityRegistrationSecretPostAsync(string saidAssetKey, string namedEnvironment, string keyName, string value, UserEnteredSecret_Props_v1 properties);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'User Entered Secret' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="value">Identity key value</param>
        /// <param name="properties">Key properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistration> IdentityRegistrationSecretPostAsync(string saidAssetKey, string namedEnvironment, string keyName, string value, UserEnteredSecret_Props_v1 properties, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List 'User Entered Value' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistration>> IdentityRegistrationValueGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted8 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List 'User Entered Value' identity registrations</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="showDeleted">Return identities that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityRegistration>> IdentityRegistrationValueGetAsync(string saidAssetKey, string namedEnvironment, ShowDeleted8 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add new 'User Entered Value' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="value">Identity key value</param>
        /// <param name="properties">Key properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistration> IdentityRegistrationValuePostAsync(string saidAssetKey, string namedEnvironment, string keyName, string value, UserEnteredValue_Props_v1 properties);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add new 'User Entered Value' identity registration</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Name of named environment</param>
        /// <param name="keyName">Identity key name</param>
        /// <param name="value">Identity key value</param>
        /// <param name="properties">Key properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityRegistration> IdentityRegistrationValuePostAsync(string saidAssetKey, string namedEnvironment, string keyName, string value, UserEnteredValue_Props_v1 properties, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Is application alive</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IsAliveGet2Async();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Is application alive</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> IsAliveGet2Async(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the latest completed deployment for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeployments2Async(string assetKeyCode, string namedEnvironmentName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the latest completed deployment for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiDeployment>>> GetDeployments2Async(string assetKeyCode, string namedEnvironmentName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all LogicalDb records</summary>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LogicalDb>> LogicalDbGetAsync(ShowDeleted9 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all LogicalDb records</summary>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LogicalDb>> LogicalDbGetAsync(ShowDeleted9 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="ownership">Ownership of the LogicalDb record (Enum: Any, Owned, Used)</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbAssetKeyCodeGetAsync(string assetKeyCode, Ownership ownership, ShowDeleted10 showDeleted, string logicalName, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="ownership">Ownership of the LogicalDb record (Enum: Any, Owned, Used)</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbAssetKeyCodeGetAsync(string assetKeyCode, Ownership ownership, ShowDeleted10 showDeleted, string logicalName, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes all LogicalDb records on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbAssetKeyCodeDeleteAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes all LogicalDb records on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbAssetKeyCodeDeleteAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the obfuscation status for a given named environment database.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentDbEntity>> PutNamedEnvironmentDbStatusAsync(string assetKeyCode, string environmentName, string logicalDbName, ObfuscationStatus obfuscationStatus);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the obfuscation status for a given named environment database.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentDbEntity>> PutNamedEnvironmentDbStatusAsync(string assetKeyCode, string environmentName, string logicalDbName, ObfuscationStatus obfuscationStatus, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes the LogicalDb records by logical name on an asset by name</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbDeleteAssetKeyCodeLogicalNameDeleteAsync(string assetKeyCode, string logicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the LogicalDb records by logical name on an asset by name</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbDeleteAssetKeyCodeLogicalNameDeleteAsync(string assetKeyCode, string logicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete all LogicalDb records by logical name for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbAssetKeyCodeLogicalNameNamedEnvironmentDeleteAsync(string assetKeyCode, string logicalName, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all LogicalDb records by logical name for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbAssetKeyCodeLogicalNameNamedEnvironmentDeleteAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all exclusion LogicalDb records for a named environment on an asset by logicalName</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetLogicalDbExclusion>> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentGetAsync(string assetKeyCode, string logicalName, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all exclusion LogicalDb records for a named environment on an asset by logicalName</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetLogicalDbExclusion>> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentGetAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create an exclusion LogicalDb record for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetLogicalDbExclusion> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an exclusion LogicalDb record for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetLogicalDbExclusion> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete an exclusion LogicalDb record for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentDeleteAsync(string assetKeyCode, string logicalName, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an exclusion LogicalDb record for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> LogicalDbExclusionAssetKeyCodeLogicalNameNamedEnvironmentDeleteAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all owned LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeGetAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all owned LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeGetAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an owned LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodePostPUTAsync(string assetKeyCode, string logicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an owned LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodePostPUTAsync(string assetKeyCode, string logicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create an owned LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodePostPOSTAsync(string assetKeyCode, string logicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an owned LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodePostPOSTAsync(string assetKeyCode, string logicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update all owned LogicalDb records for a named environment on an asset (wipe/reset type codes)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="typeCodes">List of type code assignments for the Cname</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeLogicalNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Collections.Generic.IEnumerable<TypeCode> typeCodes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update all owned LogicalDb records for a named environment on an asset (wipe/reset type codes)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="typeCodes">List of type code assignments for the Cname</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeLogicalNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Collections.Generic.IEnumerable<TypeCode> typeCodes, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Assign databases to a logicalDb instance for a named environment on an asset (append type codes)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="typeCodes">List of type code assignments for the Cname</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Collections.Generic.IEnumerable<TypeCode> typeCodes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign databases to a logicalDb instance for a named environment on an asset (append type codes)</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="typeCodes">List of type code assignments for the Cname</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbOwnedAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment, System.Collections.Generic.IEnumerable<TypeCode> typeCodes, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all used LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeGetAsync(string assetKeyCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all used LogicalDb records for an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeGetAsync(string assetKeyCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update a used LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">LogicalDb name to use on this asset assignment</param>
        /// <param name="consumedAssetKeyCode">Asset keycode of the system being consumed</param>
        /// <param name="consumedlogicalName">LogicalDb name on the system being consumed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodePostPUTAsync(string assetKeyCode, string logicalName, string consumedAssetKeyCode, string consumedlogicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a used LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">LogicalDb name to use on this asset assignment</param>
        /// <param name="consumedAssetKeyCode">Asset keycode of the system being consumed</param>
        /// <param name="consumedlogicalName">LogicalDb name on the system being consumed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodePostPUTAsync(string assetKeyCode, string logicalName, string consumedAssetKeyCode, string consumedlogicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a used LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="consumedAssetKeyCode">Asset keycode of the system being consumed</param>
        /// <param name="consumedlogicalName">LogicalDb name on the system being consumed</param>
        /// <param name="alternateLogicalName">Alternate LogicalDb name to use on this asset assignment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodePostPOSTAsync(string assetKeyCode, string consumedAssetKeyCode, string consumedlogicalName, string alternateLogicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a used LogicalDb record on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="consumedAssetKeyCode">Asset keycode of the system being consumed</param>
        /// <param name="consumedlogicalName">LogicalDb name on the system being consumed</param>
        /// <param name="alternateLogicalName">Alternate LogicalDb name to use on this asset assignment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodePostPOSTAsync(string assetKeyCode, string consumedAssetKeyCode, string consumedlogicalName, string alternateLogicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update all LogicalDb records for all specified named environments on an asset</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalMultipleNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, System.Collections.Generic.IEnumerable<EnvDbMapping> envDbMappings);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update all LogicalDb records for all specified named environments on an asset</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalMultipleNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, System.Collections.Generic.IEnumerable<EnvDbMapping> envDbMappings, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update all used LogicalDb records for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="ownerassetKeyCode">Owning asset keycode</param>
        /// <param name="ownerNamedEnvironment">Owning named environment name</param>
        /// <param name="ownerLogicalName">Owning assets logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, string namedEnvironment, string ownerassetKeyCode, string ownerNamedEnvironment, string ownerLogicalName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update all used LogicalDb records for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="ownerassetKeyCode">Owning asset keycode</param>
        /// <param name="ownerNamedEnvironment">Owning named environment name</param>
        /// <param name="ownerLogicalName">Owning assets logical database name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalNameNamedEnvironmentPutAsync(string assetKeyCode, string logicalName, string namedEnvironment, string ownerassetKeyCode, string ownerNamedEnvironment, string ownerLogicalName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Assign databases to used logicalDb instance for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="ownerassetKeyCode">Owning asset keycode</param>
        /// <param name="ownerNamedEnvironment">Owning named environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment, string ownerassetKeyCode, string ownerNamedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign databases to used logicalDb instance for a named environment on an asset</summary>
        /// <param name="assetKeyCode">Asset keycode</param>
        /// <param name="logicalName">Logical database name</param>
        /// <param name="namedEnvironment">Named Environment name</param>
        /// <param name="ownerassetKeyCode">Owning asset keycode</param>
        /// <param name="ownerNamedEnvironment">Owning named environment name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> LogicalDbUsedAssetKeyCodeLogicalNameNamedEnvironmentPostAsync(string assetKeyCode, string logicalName, string namedEnvironment, string ownerassetKeyCode, string ownerNamedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Named Environments</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironment>> NamedEnvironmentsGet2Async(string saidAssetKey, ShowDeleted11 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Named Environments</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironment>> NamedEnvironmentsGet2Async(string saidAssetKey, ShowDeleted11 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="environmentType">Type of environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironment> NamedEnvironmentsPost2Async(string saidAssetKey, string name, EnvironmentType2 environmentType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <param name="environmentType">Type of environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironment> NamedEnvironmentsPost2Async(string saidAssetKey, string name, EnvironmentType2 environmentType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Named Environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> NamedEnvironmentsDelete2Async(int namedEnvironmentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Named Environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> NamedEnvironmentsDelete2Async(int namedEnvironmentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment History</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="fromDate">Start date range</param>
        /// <param name="toDate">End date range</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentHistory>> NamedEnvironmentsNamedEnvironmentIdDeploymentHistoryGet2Async(int namedEnvironmentId, string fromDate, string toDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment History</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="fromDate">Start date range</param>
        /// <param name="toDate">End date range</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentHistory>> NamedEnvironmentsNamedEnvironmentIdDeploymentHistoryGet2Async(int namedEnvironmentId, string fromDate, string toDate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployment detail of latest item</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="returnPending">Return a pending deployment that has started but has not yet completed (in-flight).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> NamedEnvironmentsNamedEnvironmentIdLatestDeploymentGet2Async(int namedEnvironmentId, ReturnPending2 returnPending);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployment detail of latest item</summary>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="returnPending">Return a pending deployment that has started but has not yet completed (in-flight).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentDetail> NamedEnvironmentsNamedEnvironmentIdLatestDeploymentGet2Async(int namedEnvironmentId, ReturnPending2 returnPending, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all assets/named environments that point to the server</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbServerNameGetAsync(string serverName, ShowDeleted12 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all assets/named environments that point to the server</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbServerNameGetAsync(string serverName, ShowDeleted12 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all assets/named environments that point to the database</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbServerNameDatabaseNameGetAsync(string serverName, string databaseName, ShowDeleted13 showDeleted);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all assets/named environments that point to the database</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="showDeleted">Return items that have been flagged as deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbServerNameDatabaseNameGetAsync(string serverName, string databaseName, ShowDeleted13 showDeleted, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update ownership of database instance</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="domain">Domain of the database (Enum: Sentry or SentryExtranet)</param>
        /// <param name="ownerAssetKeyCode">Owning asset keycode</param>
        /// <param name="ownerLogicalDb">Owning LogicalDb instance name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInstance> PhysicalDbServerNameDatabaseNamePutAsync(string serverName, string databaseName, Domain4 domain, string ownerAssetKeyCode, string ownerLogicalDb);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update ownership of database instance</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="domain">Domain of the database (Enum: Sentry or SentryExtranet)</param>
        /// <param name="ownerAssetKeyCode">Owning asset keycode</param>
        /// <param name="ownerLogicalDb">Owning LogicalDb instance name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInstance> PhysicalDbServerNameDatabaseNamePutAsync(string serverName, string databaseName, Domain4 domain, string ownerAssetKeyCode, string ownerLogicalDb, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Register an instance of a database</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="domain">Domain of the database (Enum: Sentry or SentryExtranet)</param>
        /// <param name="ownerAssetKeyCode">Owning asset keycode</param>
        /// <param name="ownerLogicalDb">Owning LogicalDb instance name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInstance> PhysicalDbServerNameDatabaseNamePostAsync(string serverName, string databaseName, Domain5 domain, string ownerAssetKeyCode, string ownerLogicalDb);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Register an instance of a database</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="domain">Domain of the database (Enum: Sentry or SentryExtranet)</param>
        /// <param name="ownerAssetKeyCode">Owning asset keycode</param>
        /// <param name="ownerLogicalDb">Owning LogicalDb instance name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseInstance> PhysicalDbServerNameDatabaseNamePostAsync(string serverName, string databaseName, Domain5 domain, string ownerAssetKeyCode, string ownerLogicalDb, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete database instance record</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PhysicalDbServerNameDatabaseNameDeleteAsync(string serverName, string databaseName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete database instance record</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PhysicalDbServerNameDatabaseNameDeleteAsync(string serverName, string databaseName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all databases that relate to the specific database determined by if they point to the same LogicalDb assignment.</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbRelationshipServerNameDatabaseNameGetAsync(string serverName, string databaseName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all databases that relate to the specific database determined by if they point to the same LogicalDb assignment.</summary>
        /// <param name="serverName">Name of the server</param>
        /// <param name="databaseName">Name of the database</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseInstance>> PhysicalDbRelationshipServerNameDatabaseNameGetAsync(string serverName, string databaseName, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PostConfigurationAsync(object json);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> PostConfigurationAsync(object json, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Post a question</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostQuestionAsync(QuestionInfo questionInfo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Post a question</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PostQuestionAsync(QuestionInfo questionInfo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List of Named Environments that can promote to the specified Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathDetails> PromotionPathNamedEnvironmentsGet2Async(string saidAssetKey, string name);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of Named Environments that can promote to the specified Named Environment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="name">Name of named environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathDetails> PromotionPathNamedEnvironmentsGet2Async(string saidAssetKey, string name, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Named Environment Hierarchy assignment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="isDefault">Sets the assignment as the default</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathNamedEnvironment> PromotionPathNamedEnvironmentsPost2Async(string saidAssetKey, string source, string destination, IsDefault2 isDefault);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Named Environment Hierarchy assignment</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <param name="isDefault">Sets the assignment as the default</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionPathNamedEnvironment> PromotionPathNamedEnvironmentsPost2Async(string saidAssetKey, string source, string destination, IsDefault2 isDefault, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete Named Environment promotion path hierarchy</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PromotionPathNamedEnvironmentsDelete2Async(string saidAssetKey, string source, string destination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Named Environment promotion path hierarchy</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="source">Name of source named environment</param>
        /// <param name="destination">Name of destination named environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> PromotionPathNamedEnvironmentsDelete2Async(string saidAssetKey, string source, string destination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Q Server status details</summary>
        /// <param name="saidAssetKey">Key of the SAID Asset</param>
        /// <param name="namedEnvironment">Name of the Named Environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QServerDetailsInfo> QServerDetailsGet3Async(string saidAssetKey, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Q Server status details</summary>
        /// <param name="saidAssetKey">Key of the SAID Asset</param>
        /// <param name="namedEnvironment">Name of the Named Environment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QServerDetailsInfo> QServerDetailsGet3Async(string saidAssetKey, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationGet2Async(string location, string saidAssetKey, string environmentCode, ApplicationType5 applicationType, int namedEnvironmentId, string lookupKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationGet2Async(string location, string saidAssetKey, string environmentCode, ApplicationType5 applicationType, int namedEnvironmentId, string lookupKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="numberOfServers">Number of servers to register (Default is 1, Max of 256)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationPost2Async(string location, string saidAssetKey, string environmentCode, ApplicationType6 applicationType, int namedEnvironmentId, string lookupKey, int numberOfServers);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create server Registrations</summary>
        /// <param name="location">Location of the server</param>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="environmentCode">Code representing the environment level (P=Prod, N=NonProd, etc)</param>
        /// <param name="applicationType">Type of application</param>
        /// <param name="namedEnvironmentId">Named environment id</param>
        /// <param name="lookupKey">Key used to define the infrastructure item (ie. infrastructureName)</param>
        /// <param name="numberOfServers">Number of servers to register (Default is 1, Max of 256)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationPost2Async(string location, string saidAssetKey, string environmentCode, ApplicationType6 applicationType, int namedEnvironmentId, string lookupKey, int numberOfServers, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete server Registration</summary>
        /// <param name="serverName">Server name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> RegistrationDelete2Async(string serverName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete server Registration</summary>
        /// <param name="serverName">Server name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive> RegistrationDelete2Async(string serverName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the active reserved server names for a system asset</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationSystemGet2Async(string saidAssetKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the active reserved server names for a system asset</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> RegistrationSystemGet2Async(string saidAssetKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Registered server details</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet3Async(string serverName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Registered server details</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet3Async(string serverName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>List all server registrations</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet4Async();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List all server registrations</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerInfo>> ServerDetailGet4Async(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Requests for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiRequest>>> GetRequestsAsync(string assetKeyCode, string namedEnvironmentName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Requests for a Named Environment</summary>
        /// <param name="assetKeyCode">Said Asset Key Code</param>
        /// <param name="namedEnvironmentName">Named Environment Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiRequest>>> GetRequestsAsync(string assetKeyCode, string namedEnvironmentName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Request Paginated</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiRequest>>> GetRequests2Async(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Request Paginated</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<SlimApiRequest>>> GetRequests2Async(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Request Paginated (filtered by status)</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetRequests3Async(string assetKeyCode, string namedEnvironmentName, RequestStatus requestStatus, int numberOfResults, int startingIndex);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Request Paginated (filtered by status)</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetRequests3Async(string assetKeyCode, string namedEnvironmentName, RequestStatus requestStatus, int numberOfResults, int startingIndex, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deployments processed for the request</summary>
        /// <param name="requestId">Id of the request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Request> RequestRequestIdDeploymentsGet2Async(int requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deployments processed for the request</summary>
        /// <param name="requestId">Id of the request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Request> RequestRequestIdDeploymentsGet2Async(int requestId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a slim deployment information for a deployment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiRequest> GetSlimRequestAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a slim deployment information for a deployment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SlimApiRequest> GetSlimRequestAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create Jira tickets. Any fields supplied that do not exist on the specified issue type will be ignored
        /// <br/>(Optionally) Create automation items if supplied messageInfo</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RequestAssistanceAsync(RequestAssistanceInfo info);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Jira tickets. Any fields supplied that do not exist on the specified issue type will be ignored
        /// <br/>(Optionally) Create automation items if supplied messageInfo</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RequestAssistanceAsync(RequestAssistanceInfo info, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Submitted requests that are API triggered</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Named environment name</param>
        /// <param name="proposedRunTime">Filter requests that match a run time within their deployment window</param>
        /// <param name="includeAll">Return all requests even if they are outside the time window</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentRequest>> RequestsGet2Async(string saidAssetKey, string namedEnvironment, System.DateTimeOffset? proposedRunTime, IncludeAll2? includeAll);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Submitted requests that are API triggered</summary>
        /// <param name="saidAssetKey">SAID asset key</param>
        /// <param name="namedEnvironment">Named environment name</param>
        /// <param name="proposedRunTime">Filter requests that match a run time within their deployment window</param>
        /// <param name="includeAll">Return all requests even if they are outside the time window</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentRequest>> RequestsGet2Async(string saidAssetKey, string namedEnvironment, System.DateTimeOffset? proposedRunTime, IncludeAll2? includeAll, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of slim deployment information for deployments based on a list of ids</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetSlimRequestsAsync(SlimRequestContainer request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of slim deployment information for deployments based on a list of ids</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetSlimRequestsAsync(SlimRequestContainer request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get scheduled Request Paginated</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetRequests4Async(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get scheduled Request Paginated</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SlimApiRequest>> GetRequests4Async(string assetKeyCode, string namedEnvironmentName, int numberOfResults, int startingIndex, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Server status details</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<NamedEnvironmentDetails> ServerDetailsGet2Async(string saidAssetKey, string namedEnvironment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Server status details</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<NamedEnvironmentDetails> ServerDetailsGet2Async(string saidAssetKey, string namedEnvironment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Server information for the server inventory page</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerInventoryDetails> QServerDetailsGet4Async(string saidAssetKey);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Server information for the server inventory page</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerInventoryDetails> QServerDetailsGet4Async(string saidAssetKey, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the state of an environment at after a specific deployment</summary>
        /// <param name="deploymentId">Deployment that recorded the state</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnvironmentState> GetApplicationState2Async(int deploymentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the state of an environment at after a specific deployment</summary>
        /// <param name="deploymentId">Deployment that recorded the state</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnvironmentState> GetApplicationState2Async(int deploymentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Template Artifacts information based on the ID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironmentTemplateReduced> GetTemplateArtifactByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Template Artifacts information based on the ID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironmentTemplateReduced> GetTemplateArtifactByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of template commits for a NE</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentTemplateCommitReduced>> GetTemplateArtifactCommitsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of template commits for a NE</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentTemplateCommitReduced>> GetTemplateArtifactCommitsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Template Artifacts information based on asset keycode, environment, and if you want the most recent or the full list</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentTemplateReduced>> GetTemplateArtifactsForAssetEnvironmentAsync(string saidKeyCode, string environmentName, bool mostRecent);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Template Artifacts information based on asset keycode, environment, and if you want the most recent or the full list</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedEnvironmentTemplateReduced>> GetTemplateArtifactsForAssetEnvironmentAsync(string saidKeyCode, string environmentName, bool mostRecent, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Submit a change to the Resource Json artifact</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CommitNewResourceTemplateArtifactAsync(string saidKeyCode, string environmentName, object abstractOutputDataJson, string comment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Submit a change to the Resource Json artifact</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CommitNewResourceTemplateArtifactAsync(string saidKeyCode, string environmentName, object abstractOutputDataJson, string comment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a template commit</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironmentTemplateCommitReduced> GetTemplateArtifactCommitAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a template commit</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NamedEnvironmentTemplateCommitReduced> GetTemplateArtifactCommitAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the Template Version Schema based on the schema ID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetTemplateVersionSchemaByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the Template Version Schema based on the schema ID</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetTemplateVersionSchemaByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an owned database instance to reference a different server.</summary>
        /// <param name="cnameTypeId">The ID of the CNAME Type</param>
        /// <param name="fqdn">The FQDN of the server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseBase> UpdateServerForDatabaseInstancePutAsync(int cnameTypeId, string fqdn);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an owned database instance to reference a different server.</summary>
        /// <param name="cnameTypeId">The ID of the CNAME Type</param>
        /// <param name="fqdn">The FQDN of the server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DatabaseBase> UpdateServerForDatabaseInstancePutAsync(int cnameTypeId, string fqdn, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Ping database server aliases and validate the hosting servers match Q's records for all database instances in a named environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseHostValidationResult>> ValidateDatabaseHostsGetAsync(string assetKeyCode, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Ping database server aliases and validate the hosting servers match Q's records for all database instances in a named environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatabaseHostValidationResult>> ValidateDatabaseHostsGetAsync(string assetKeyCode, string environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Request Detail</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestDetail>> RequestGet2Async(int requestId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request Detail</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestDetail>> RequestGet2Async(int requestId, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IApplicationClient
    {
        /// <summary>Get a list of non-deleted applications registered to an Asset</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationEntity>> GetApplicationsAsync(string asset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of non-deleted applications registered to an Asset</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationEntity>> GetApplicationsAsync(string asset, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IAuditClient
    {
        /// <summary>Get audit events</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAsync(EventType? eventType, string asset, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get audit events</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAsync(EventType? eventType, string asset, string environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Paginated list of audit events</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetPaginatedAsync(int numOfResults, int startIndex, EventType2? eventType, string asset, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Paginated list of audit events</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetPaginatedAsync(int numOfResults, int startIndex, EventType2? eventType, string asset, string environment, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ILogicalDbClient
    {
        /// <summary>Create an owned database record for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> AddLogicalDbOwnedAsync(AddOwnedDatabaseRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an owned database record for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LogicalDb> AddLogicalDbOwnedAsync(AddOwnedDatabaseRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a used logical database and assign to environments</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskOfLogicalDb>> AddLogicalDbUsedAsync(AddUsedDatabaseRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a used logical database and assign to environments</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskOfLogicalDb>> AddLogicalDbUsedAsync(AddUsedDatabaseRequest request, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IPowerManagementClient
    {
        /// <summary>Get a list of Power Management schedules for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PowerManagementSchedule>> GetAsync(string asset, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of Power Management schedules for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PowerManagementSchedule>> GetAsync(string asset, string environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a Power Management Schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> PostAsync(PowerManagementRequest r);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a Power Management Schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> PostAsync(PowerManagementRequest r, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update a Power Management schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> PutAsync(PowerManagementRequest r, string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a Power Management schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> PutAsync(PowerManagementRequest r, string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a Power Management schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteAsync(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a Power Management schedule</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteAsync(string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of currently active Power Management schedules for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetActiveAsync(string asset, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of currently active Power Management schedules for an environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetActiveAsync(string asset, string environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Power on an environment for provided number of hours</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> CreateAdHocAsync(string asset, string environment, int duration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Power on an environment for provided number of hours</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PowerManagementSchedule> CreateAdHocAsync(string asset, string environment, int duration, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of environments and their Power Management status as well as a list of servers that are offline</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalStatusResponse> GlobalStatusAsync(Status4? status);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of environments and their Power Management status as well as a list of servers that are offline</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalStatusResponse> GlobalStatusAsync(Status4? status, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Check if environment is up or down based on schedules registered</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> StatusAsync(string asset, string environment);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Check if environment is up or down based on schedules registered</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> StatusAsync(string asset, string environment, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get all of the types for power management schedules and their display names</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TypesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all of the types for power management schedules and their display names</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TypesAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IServiceActionClient
    {
        /// <summary>Perform an action on a provided service on a provided host</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceActionResponse> PostAsync(ServiceActionRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Perform an action on a provided service on a provided host</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceActionResponse> PostAsync(ServiceActionRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the status of a service on a list of provided hosts</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStatusAsync(System.Collections.Generic.IEnumerable<string> hosts, string service);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the status of a service on a list of provided hosts</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetStatusAsync(System.Collections.Generic.IEnumerable<string> hosts, string service, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactTypeVersionValidationEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactTypeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArtifactTypeVersionEntity ArtifactTypeVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArtifactTypeVersionValidationEntitySource? Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactTypeVersionEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifacttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArtifactTypeEntity Artifacttype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Definition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildlocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buildlocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repositoryBuildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryBuildLocation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactTypeEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestArtifactTypeVersionValidationEdit 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestArtifactTypeVersionValidationEditSource? Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestArtifactTypeVersionValidation 
    {
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestArtifactTypeVersionValidationSource? Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactTypeVersionTaskEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactTypeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArtifactTypeVersionEntity ArtifactTypeVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("task", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArtifactTypeVersionTaskEntityTask? Task { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessServer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArtifactTypeVersionTaskEntityStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimNamedEnvironmentAccessEntity 
    {
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SlimNamedEnvironmentAccessEntityAccess? Access { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssetAccessRequest 
    {
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetAccessRequestAccessCode? AccessCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsufficientPermissionsException 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InnerException { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("helpLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HResult { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DuplicateEntityException 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InnerException { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("helpLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HResult { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ADGroupNotFoundException 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InnerException { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("helpLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HResult { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssetEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeletedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimApiAsset 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerInventoryDetails 
    {
        [Newtonsoft.Json.JsonProperty("qServerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QServerDetailsInfo> QServerDetails { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QServerDetailsInfo 
    {
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeycode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReducedAppServerDetails> Applications { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReducedAppServerDetails 
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("servers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Servers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RootConfigurationSettingFile 
    {
        [Newtonsoft.Json.JsonProperty("schemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SchemaVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidAssetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidAssetKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentDeploymentConfigOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnvironmentDeploymentConfigOption> EnvironmentDeploymentConfigOptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationDeploymentConfigOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationDeploymentConfigOption> ApplicationDeploymentConfigOptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvironmentDeploymentConfigOption 
    {
        [Newtonsoft.Json.JsonProperty("deploymentOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentOptions DeploymentOptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationDeploymentConfigOption 
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentOptions DeploymentOptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentOptions 
    {
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Configuration Configuration { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Configuration 
    {
        [Newtonsoft.Json.JsonProperty("deploymentConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parallelDeploy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParallelDeploy { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestConfigurationSettingEntity 
    {
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestEntity Request { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestConfigurationSettingEntitySettingType? SettingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("infrastructureSetting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestConfigurationSettingEntityInfrastructureSetting? InfrastructureSetting { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentModificationInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestConfigurationSettingEntityDeploymentModificationInd? DeploymentModificationInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestConfigurationSettingEntitySettingName? SettingName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationEntity Application { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedEnvironmentEntity NamedEnvironment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MrsGroupEntity MrsGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestEntityDeploymentStatus? DeploymentStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancelledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changelog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Changelog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("apiTriggered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApiTriggered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestLogEntity> Logs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetEntity Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeletedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MrsGroupEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Work { get; set; }
    
        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Release { get; set; }
    
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Group { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestLogEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConfigurationSettingEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigurationSettingEntitySettingType? SettingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("infrastructureSetting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigurationSettingEntityInfrastructureSetting? InfrastructureSetting { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentModificationInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigurationSettingEntityDeploymentModificationInd? DeploymentModificationInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigurationSettingEntitySettingName? SettingName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationEntity Application { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedEnvironmentEntity NamedEnvironment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IsAlive 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimApiDeployment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SlimApiDeploymentStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlimApiRequest Request { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimApiRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SlimApiRequestDeploymentStatus? DeploymentStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SlimApiRequestRequestType? RequestType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancelledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("apiTriggered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApiTriggered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deployments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SlimApiDeployment> Deployments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedEnvironmentEntity NamedEnvironment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platformType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationStatePlatformType? PlatformType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationStateServiceType? ServiceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArtifactState> Artifacts { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArtifactVersionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo BuildLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repositoryBuildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo RepositoryBuildLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResourceState> Resources { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildLocationInfo 
    {
        [Newtonsoft.Json.JsonProperty("infoType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildLocationInfoInfoType? InfoType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("s3bucket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S3bucket { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResourceState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EntityNotFoundException 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InnerException { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("helpLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HResult { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FavoriteAssetEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("associateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemPreferenceEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimApiSystemPreference 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GrantMatrix 
    {
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("grantAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GrantAssignment> GrantAssignments { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GrantAssignment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignedLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignedLogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("grantPermission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GrantAssignmentGrantPermission? GrantPermission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GrantCommitNamedEnvironment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("configurationMatrix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationMatrix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GrantCommitNamedEnvironmentRequestStatus? RequestStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GrantCommitNamedEnvironmentStatus? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseInstance 
    {
        [Newtonsoft.Json.JsonProperty("assignedLogicalDbs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DatabaseAssignedLogicalDb> AssignedLogicalDbs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DatabaseInstanceDomain? Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseAssignedLogicalDb 
    {
        [Newtonsoft.Json.JsonProperty("parentLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentLogicalDb ParentLogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownedInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssignedDatabaseInstance> OwnedInstances { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usedInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssignedDatabaseInstance> UsedInstances { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParentLogicalDb 
    {
        [Newtonsoft.Json.JsonProperty("parentAssetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentAssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentAssetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentAssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssignedDatabaseInstance 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logicalDbName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalDbName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cnameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssignedDatabaseInstanceCnameType? CnameType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GrantRequest 
    {
        [Newtonsoft.Json.JsonProperty("grantPermission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GrantRequestGrantPermission? GrantPermission { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentityKey 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidAssetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidAssetKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityKeyKeyProvider? KeyProvider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityKeyDomain? Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityKeyKeyType? KeyType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentityRegistrationAD 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentityKey Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityRegistrationADEnvironmentType? EnvironmentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyProviderVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityRegistrationADKeyProviderVersion? KeyProviderVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("upn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("netBios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetBios { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dlln", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dlln { get; set; }
    
        [Newtonsoft.Json.JsonProperty("localGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalGroupName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("globalGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalGroupName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationCreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationCreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationDeletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationDeletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityRegistrationADRegistrationStatus? RegistrationStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentityRegistration 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentityKey Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Properties { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationCreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationCreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationDeletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationDeletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityRegistrationRegistrationStatus? RegistrationStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserEnteredValue_Props_v1 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentityValue Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentityValue 
    {
        [Newtonsoft.Json.JsonProperty("secureEnvelope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentitySecureEnvelope SecureEnvelope { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentitySecureEnvelope 
    {
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentitySecureEnvelopeConfiguration Configuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protectedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtectedValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentitySecureEnvelopeConfiguration 
    {
        [Newtonsoft.Json.JsonProperty("thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserEnteredSecret_Props_v1 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentityValue Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogicalDb 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assignedLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssignedLogicalDb> AssignedLogicalDb { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssignedLogicalDb 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssignedLogicalDbOwnership? Ownership { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentLogicalDb ParentLogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentDatabases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamedEnvironmentDatabase> EnvironmentDatabases { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentDatabase 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cnames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Cname> Cnames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("friendlyCnames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FriendlyCname> FriendlyCnames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("obfuscationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObfuscationStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cname 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aliasName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AliasName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cnameTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CnameType> CnameTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FriendlyCname 
    {
        [Newtonsoft.Json.JsonProperty("friendlyCname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyCname1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FriendlyCnameTypeCode? TypeCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CnameType 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CnameTypeTypeCode? TypeCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseBase DatabaseInstance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseBase 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DatabaseBaseDomain? Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseHostValidationResult 
    {
        [Newtonsoft.Json.JsonProperty("aliasName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AliasName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedHost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expectedHostSubdomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedHostSubdomain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hostSubdomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostSubdomain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cnameTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CnameTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pendingCutover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PendingCutover { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOwned { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssetLogicalDbExclusion 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogicalDbBase AssetLogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogicalDbBase 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvDbMapping 
    {
        [Newtonsoft.Json.JsonProperty("consumerNamedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerNamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerAssetKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerAssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerNamedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerNamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerLogicalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerLogicalName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TypeCode 
    {
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeCode1? TypeCode1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentDbEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedEnvironmentEntity NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetLogicalDbEntity LogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followNamedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedEnvironmentEntity FollowNamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followLogicalDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetLogicalDbEntity FollowLogicalDb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("obfuscationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NamedEnvironmentDbEntityObfuscationStatus? ObfuscationStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeletedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssetLogicalDbEntity 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetEntity Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logicalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetLogicalDbEntity Parent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeletedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddUsedDatabaseRequest 
    {
        [Newtonsoft.Json.JsonProperty("logicalName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LogicalName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isAlternateLogicalName", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAlternateLogicalName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("consumedAssetKeyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConsumedAssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("consumedLogicalName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConsumedLogicalName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentDatabases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddUsedDatabaseEnvironmentDatabaseAssignment> EnvironmentDatabases { get; set; } = new System.Collections.ObjectModel.Collection<AddUsedDatabaseEnvironmentDatabaseAssignment>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddUsedDatabaseEnvironmentDatabaseAssignment 
    {
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerNamedEnvironment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerNamedEnvironment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskOfLogicalDb 
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogicalDb Result { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskOfLogicalDbStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isCanceled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCanceled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCompleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskOfLogicalDbCreationOptions? CreationOptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asyncState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AsyncState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isFaulted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFaulted { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddOwnedDatabaseRequest 
    {
        [Newtonsoft.Json.JsonProperty("logicalName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LogicalName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typeCodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TypeCode> TypeCodes { get; set; } = new System.Collections.ObjectModel.Collection<TypeCode>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestDetail 
    {
        [Newtonsoft.Json.JsonProperty("common", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationReference> Common { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationReference> Applications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeycode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NamedEnvironmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsWorkNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MrsWorkNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsReleaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrsReleaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsGroupNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrsGroupNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changelogNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangelogNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windowStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? WindowStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windowEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? WindowEndDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platformType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationReferencePlatformType? PlatformType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationReferenceServiceType? ServiceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArtifactReference> Artifacts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogMessage> Logs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArtifactReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArtifactVersionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResourceReference> Resources { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TagReference> Tags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo BuildLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repositoryBuildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo RepositoryBuildLocation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogMessage 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Createddate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResourceReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TagReference 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Request 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestStatus2? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deployments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Deployment> Deployments { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Deployment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompleteDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Createddate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completeddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Completeddate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("common", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationReference> Common { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationReference> Applications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogMessage> Logs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PromotionPathDetails 
    {
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeycode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmenttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environmenttype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PromotionPathNamedEnvironment> Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PromotionPathNamedEnvironment> Destination { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PromotionPathNamedEnvironment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmenttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environmenttype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Definition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo BuildLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repositoryBuildLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildLocationInfo RepositoryBuildLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Createddate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requiresConfigTransformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiresConfigTransformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddjobUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OddjobUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deployDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeployDueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scmProjectKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScmProjectKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scmRepoName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScmRepoName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Digest { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidAssetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidAssetKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Purpose { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalResource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalResource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("databaseKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseKey { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentDetails 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeycode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationDetails> Applications { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationDetails 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationPlatformDetails Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("servers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServerDetails> Servers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationPlatformDetails 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platformName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerDetails 
    {
        [Newtonsoft.Json.JsonProperty("instanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InstanceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instanceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runtimeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platformVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windowsService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindowsServiceDetails WindowsService { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WindowsServiceDetails 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountRealm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountRealm { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentHistory 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Createddate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completeddate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Completeddate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetKeycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetKeycode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NamedEnvironmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironmentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsWorkNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MrsWorkNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsReleaseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrsReleaseNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mrsGroupNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrsGroupNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changelogNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangelogNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windowStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? WindowStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windowEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? WindowEndDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentTimeout 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentApplicationUri 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeploymentApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uriType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UriType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentApplicationArtifactResource 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentapplicationartifactid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deploymentapplicationartifactid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourcename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resourcename { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentApplicationArtifact 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentapplicationid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Deploymentapplicationid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Applicationname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artifactname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtifactType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artifactVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArtifactVersionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TagReference> Tags { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentTrigger 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidassetkey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Saidassetkey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmenttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environmenttype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalStatusResponse 
    {
        [Newtonsoft.Json.JsonProperty("assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GlobalStatusAsset> Assets { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DownServers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalStatusAsset 
    {
        [Newtonsoft.Json.JsonProperty("keyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GlobalStatusEnvironment> Environments { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalStatusEnvironment 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlobalStatusEnvironmentStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DownServers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PowerManagementSchedule 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedByName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PowerManagementScheduleScheduleType? ScheduleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PowerManagementRequest 
    {
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PowerManagementRequestScheduleType ScheduleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Instance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidAssetKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidAssetKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lookupKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LookupKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationCreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationCreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationDeletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RegistrationDeletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServerInfoRegistrationStatus? RegistrationStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimRequestContainer 
    {
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Ids { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuestionInfo 
    {
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConfluenceQuestionInfo> Questions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConfluenceQuestionInfo 
    {
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("topics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConfluenceQuestionTopic> Topics { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConfluenceQuestionTopic 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestAssistanceInfo 
    {
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraTicketInfo> Tickets { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestAssistanceMessageInfo MessageInfo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JiraTicketInfo 
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }
    
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Components { get; set; }
    
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraCustomField> CustomFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestAssistanceMessageInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tickets { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JiraCustomField 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceActionRequest 
    {
        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Host { get; set; }
    
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceActionRequestOperation Operation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Environment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceActionResponse 
    {
        [Newtonsoft.Json.JsonProperty("ooFlow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OoFlow { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvironmentState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("latestDeployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentState LatestDeployment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationState> Applications { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeploymentState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestState Request { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestState 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestStateDeploymentStatus? DeploymentStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestStateRequestType? RequestType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedByID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittedByID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submittedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancelledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelledDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("apiTriggered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApiTriggered { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentTemplateReduced 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("templateVersion_Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TemplateVersion_Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abstractOutputData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AbstractOutputData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedEnvironmentTemplateCommitReduced 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironmentTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NamedEnvironmentTemplateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commitDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CommitDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedById", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedById { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abstractOutputData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AbstractOutputData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SlimApplicationUser 
    {
        [Newtonsoft.Json.JsonProperty("associateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("canUseApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanUseApp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HasEnvironmentAccess 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saidKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HasPermissionAccess 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvironmentAccessEntity 
    {
        [Newtonsoft.Json.JsonProperty("saidKeyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaidKeyCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namedEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedEnvironment { get; set; }
    
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    /// <summary>Type of artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Platform")]
        Platform = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecureFile")]
        SecureFile = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 5,
    
    }
    
    /// <summary>Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequiresConfigTransformation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Name of the artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PreDeploy")]
        PreDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreCode")]
        PreCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeploy")]
        PostDeploy = 2,
    
    }
    
    /// <summary>Purpose of the assignment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DatabasePurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Owned")]
        Owned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,
    
    }
    
    /// <summary>Domain of the database</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Domain
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DbSentryLocal")]
        DbSentryLocal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DbalSentryLocal")]
        DbalSentryLocal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GtmSentryLocal")]
        GtmSentryLocal = 2,
    
    }
    
    /// <summary>include deployment log messages in responses</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IncludeLogs
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Status of deployment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"inprogress")]
        Inprogress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 3,
    
    }
    
    /// <summary>The Type of the URI</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UriType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smarts")]
        Smarts = 1,
    
    }
    
    /// <summary>Type of artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Platform")]
        Platform = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecureFile")]
        SecureFile = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 5,
    
    }
    
    /// <summary>Category Level</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Level
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Debug")]
        Debug = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    /// <summary>Category Level</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Level2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debug")]
        Debug = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Type of environment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnvironmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NonProd")]
        NonProd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prod")]
        Prod = 1,
    
    }
    
    /// <summary>Return a pending deployment that has started but has not yet completed (in-flight).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnPending
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Sets the assignment as the default</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    /// <summary>Return all requests even if they are outside the time window</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IncludeAll
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return the newest registered item instead of what was last deployed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnNewest
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EventType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAction")]
        ServiceAction = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerManagementAction")]
        PowerManagementAction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Add_ArtifactValidation")]
        Add_ArtifactValidation = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delete_ArtifactValidation")]
        Delete_ArtifactValidation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Update_ArtifactValidation")]
        Update_ArtifactValidation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Add_NamedEnvironment")]
        Add_NamedEnvironment = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EventType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAction")]
        ServiceAction = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerManagementAction")]
        PowerManagementAction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Add_ArtifactValidation")]
        Add_ArtifactValidation = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delete_ArtifactValidation")]
        Delete_ArtifactValidation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Update_ArtifactValidation")]
        Update_ArtifactValidation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Add_NamedEnvironment")]
        Add_NamedEnvironment = 5,
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    /// <summary>Type of artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactType3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Platform")]
        Platform = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecureFile")]
        SecureFile = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 5,
    
    }
    
    /// <summary>Denotes if the config files need to be transformed for environments when being staged for deployment (Typically set to True for .NET applications)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequiresConfigTransformation2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Name of the artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactName2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PreDeploy")]
        PreDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreCode")]
        PreCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeploy")]
        PostDeploy = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SettingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InfrastructureSetting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SettingName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BitbucketTagging")]
        BitbucketTagging = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentMode")]
        DeploymentMode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ParallelDeploy")]
        ParallelDeploy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeerSeverity")]
        SeerSeverity = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeployDynatrace")]
        PostDeployDynatrace = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConfigurationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Request")]
        Request = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SettingType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Setting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BitbucketTagging")]
        BitbucketTagging = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentMode")]
        DeploymentMode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ParallelDeploy")]
        ParallelDeploy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeerSeverity")]
        SeerSeverity = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeployDynatrace")]
        PostDeployDynatrace = 4,
    
    }
    
    /// <summary>Purpose of the assignment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DatabasePurpose2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Owned")]
        Owned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 1,
    
    }
    
    /// <summary>Domain of the database</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Domain2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DbSentryLocal")]
        DbSentryLocal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DbalSentryLocal")]
        DbalSentryLocal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GtmSentryLocal")]
        GtmSentryLocal = 2,
    
    }
    
    /// <summary>Platform of the application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Platform
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tomcat")]
        Tomcat = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iis")]
        Iis = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetsvc")]
        Dotnetsvc = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetbat")]
        Dotnetbat = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javasvc")]
        Javasvc = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javabat")]
        Javabat = 5,
    
    }
    
    /// <summary>Service Type of the application (Optional)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"windowsService")]
        WindowsService = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"systemdService")]
        SystemdService = 1,
    
    }
    
    /// <summary>include deployment log messages in responses</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IncludeLogs2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Status of deployment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"inprogress")]
        Inprogress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 3,
    
    }
    
    /// <summary>The Type of the URI</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UriType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Smarts")]
        Smarts = 1,
    
    }
    
    /// <summary>Type of artifact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactType4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Platform")]
        Platform = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecureFile")]
        SecureFile = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 5,
    
    }
    
    /// <summary>Category Level</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Level3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Debug")]
        Debug = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    /// <summary>Category Level</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Level4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Debug")]
        Debug = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
    }
    
    /// <summary>SqlRequestStatus</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
    }
    
    /// <summary>Return items that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccessCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccessCode2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    /// <summary>Access Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccessCode3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    /// <summary>Access Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccessCode4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Domain</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Domain3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    /// <summary>Key type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum KeyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cross")]
        Cross = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 4,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Identity key provider version</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProviderVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = @"v1")]
        V1 = 0,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return identities that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return items that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Ownership of the LogicalDb record (Enum: Any, Owned, Used)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Ownership
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Owned")]
        Owned = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 2,
    
    }
    
    /// <summary>Return items that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ObfuscationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Obfuscated")]
        Obfuscated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotObfuscated")]
        NotObfuscated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Type of environment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnvironmentType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NonProd")]
        NonProd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prod")]
        Prod = 1,
    
    }
    
    /// <summary>Return a pending deployment that has started but has not yet completed (in-flight).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnPending2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return items that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Return items that have been flagged as deleted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShowDeleted13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Domain of the database (Enum: Sentry or SentryExtranet)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Domain4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    /// <summary>Domain of the database (Enum: Sentry or SentryExtranet)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Domain5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 2,
    
    }
    
    /// <summary>Sets the assignment as the default</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IsDefault2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    /// <summary>Type of application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationType6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerBatch")]
        ContainerBatch = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerService")]
        ContainerService = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContainerWeb")]
        ContainerWeb = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 6,
    
    }
    
    /// <summary>Return all requests even if they are outside the time window</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IncludeAll2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactTypeVersionValidationEntitySource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Artifactory")]
        Artifactory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppFoundations")]
        AppFoundations = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Checkmarx")]
        Checkmarx = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tests")]
        Tests = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestArtifactTypeVersionValidationEditSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Artifactory")]
        Artifactory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppFoundations")]
        AppFoundations = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Checkmarx")]
        Checkmarx = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tests")]
        Tests = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestArtifactTypeVersionValidationSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Artifactory")]
        Artifactory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppFoundations")]
        AppFoundations = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Checkmarx")]
        Checkmarx = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tests")]
        Tests = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactTypeVersionTaskEntityTask
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UploadToRepository")]
        UploadToRepository = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TransferToGlacier")]
        TransferToGlacier = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TriggerGlacierRestore")]
        TriggerGlacierRestore = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RestoreFromGlacier")]
        RestoreFromGlacier = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DestroyBuild")]
        DestroyBuild = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeployRequest")]
        DeployRequest = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hold")]
        Hold = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ArtifactTypeVersionTaskEntityStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SlimNamedEnvironmentAccessEntityAccess
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AssetAccessRequestAccessCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RequestDeploy")]
        RequestDeploy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Configuration")]
        Configuration = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestConfigurationSettingEntitySettingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestConfigurationSettingEntityInfrastructureSetting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestConfigurationSettingEntityDeploymentModificationInd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deployment")]
        Deployment = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestConfigurationSettingEntitySettingName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BitbucketTagging")]
        BitbucketTagging = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentMode")]
        DeploymentMode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ParallelDeploy")]
        ParallelDeploy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeerSeverity")]
        SeerSeverity = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeployDynatrace")]
        PostDeployDynatrace = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestEntityDeploymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConfigurationSettingEntitySettingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Environment")]
        Environment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConfigurationSettingEntityInfrastructureSetting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConfigurationSettingEntityDeploymentModificationInd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deployment")]
        Deployment = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConfigurationSettingEntitySettingName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BitbucketTagging")]
        BitbucketTagging = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentMode")]
        DeploymentMode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ParallelDeploy")]
        ParallelDeploy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeerSeverity")]
        SeerSeverity = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PostDeployDynatrace")]
        PostDeployDynatrace = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SlimApiDeploymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SlimApiRequestDeploymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SlimApiRequestRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emergency")]
        Emergency = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationStatePlatformType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tomcat")]
        Tomcat = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iis")]
        Iis = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetsvc")]
        Dotnetsvc = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetbat")]
        Dotnetbat = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javasvc")]
        Javasvc = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javabat")]
        Javabat = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationStateServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"windowsService")]
        WindowsService = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"systemdService")]
        SystemdService = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BuildLocationInfoInfoType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"directory")]
        Directory = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"file")]
        File = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"s3Object")]
        S3Object = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"s3Prefix")]
        S3Prefix = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"database")]
        Database = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dockerImage")]
        DockerImage = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GrantAssignmentGrantPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataReader")]
        DataReader = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataWriter")]
        DataWriter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StoredProc")]
        StoredProc = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DdlAdmin")]
        DdlAdmin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewDefinition")]
        ViewDefinition = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SelectView")]
        SelectView = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GrantCommitNamedEnvironmentRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GrantCommitNamedEnvironmentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INPROGRESS")]
        INPROGRESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DatabaseInstanceDomain
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AssignedDatabaseInstanceCnameType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbm")]
        Dbm = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbal")]
        Dbal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbgtm")]
        Dbgtm = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GrantRequestGrantPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataReader")]
        DataReader = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataWriter")]
        DataWriter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StoredProc")]
        StoredProc = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DdlAdmin")]
        DdlAdmin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ViewDefinition")]
        ViewDefinition = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SelectView")]
        SelectView = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityKeyKeyProvider
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ActiveDirectory")]
        ActiveDirectory = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserEnteredValue")]
        UserEnteredValue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserEnteredSecret")]
        UserEnteredSecret = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityKeyDomain
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityKeyKeyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cross")]
        Cross = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityRegistrationADEnvironmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NonProd")]
        NonProd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prod")]
        Prod = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityRegistrationADKeyProviderVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = @"v1")]
        V1 = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityRegistrationADRegistrationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InActive")]
        InActive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IdentityRegistrationRegistrationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InActive")]
        InActive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AssignedLogicalDbOwnership
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Owned")]
        Owned = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Used")]
        Used = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FriendlyCnameTypeCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbm")]
        Dbm = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbal")]
        Dbal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbgtm")]
        Dbgtm = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CnameTypeTypeCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbm")]
        Dbm = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbal")]
        Dbal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbgtm")]
        Dbgtm = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DatabaseBaseDomain
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sentry")]
        Sentry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SentryExtranet")]
        SentryExtranet = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TypeCode1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbm")]
        Dbm = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbal")]
        Dbal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dbgtm")]
        Dbgtm = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NamedEnvironmentDbEntityObfuscationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Obfuscated")]
        Obfuscated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotObfuscated")]
        NotObfuscated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskOfLogicalDbStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaitingForActivation")]
        WaitingForActivation = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaitingToRun")]
        WaitingToRun = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaitingForChildrenToComplete")]
        WaitingForChildrenToComplete = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RanToCompletion")]
        RanToCompletion = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
        Canceled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Faulted")]
        Faulted = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskOfLogicalDbCreationOptions
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreferFairness")]
        PreferFairness = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongRunning")]
        LongRunning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AttachedToParent")]
        AttachedToParent = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DenyChildAttach")]
        DenyChildAttach = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HideScheduler")]
        HideScheduler = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RunContinuationsAsynchronously")]
        RunContinuationsAsynchronously = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationReferencePlatformType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tomcat")]
        Tomcat = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iis")]
        Iis = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetsvc")]
        Dotnetsvc = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dotnetbat")]
        Dotnetbat = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javasvc")]
        Javasvc = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"javabat")]
        Javabat = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApplicationReferenceServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"windowsService")]
        WindowsService = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"systemdService")]
        SystemdService = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestStatus2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeploymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"inprogress")]
        Inprogress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GlobalStatusEnvironmentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PowerManagementScheduleScheduleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_5am-8pm_weekdays")]
        Q_on_5am8pm_weekdays = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_7am-5pm_weekdays")]
        Q_on_7am5pm_weekdays = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_5am-8pm_everyday")]
        Q_on_5am8pm_everyday = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_7am-5pm_everyday")]
        Q_on_7am5pm_everyday = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_weekdays")]
        Q_on_weekdays = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_off_24x7")]
        Q_off_24x7 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AdHoc_PowerOn")]
        AdHoc_PowerOn = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PowerManagementRequestScheduleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_5am-8pm_weekdays")]
        Q_on_5am8pm_weekdays = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_7am-5pm_weekdays")]
        Q_on_7am5pm_weekdays = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_5am-8pm_everyday")]
        Q_on_5am8pm_everyday = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_7am-5pm_everyday")]
        Q_on_7am5pm_everyday = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_on_weekdays")]
        Q_on_weekdays = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"q_off_24x7")]
        Q_off_24x7 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AdHoc_PowerOn")]
        AdHoc_PowerOn = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ServerInfoRegistrationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InActive")]
        InActive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ServiceActionRequestOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Start")]
        Start = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stop")]
        Stop = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Restart")]
        Restart = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestStateDeploymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processed")]
        Processed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inprogress")]
        Inprogress = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RequestStateRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Emergency")]
        Emergency = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infrastructure")]
        Infrastructure = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016