using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Sentry.data.Core;
using Sentry.data.Infrastructure;
using Sentry.Common.Logging;
using StructureMap;

namespace Sentry.data.Goldeneye
{
    class SpamFactory
    {
        public class UserEvent
        {
            public string email { get; set; }

            public List<Event> events { get; set; }
        }



        public static async Task<Request> Run(string interval)
        {
            try
            {
                IContainer container;
                IDatasetContext _datasetContext;
                IAssociateInfoProvider _associateInfoProvider;

                using (container = Sentry.data.Infrastructure.Bootstrapper.Container.GetNestedContainer())
                {
                    _datasetContext = container.GetInstance<IDatasetContext>();
                    _associateInfoProvider = container.GetInstance<IAssociateInfoProvider>();
                    IEmailService es = container.GetInstance<IEmailService>();

                    List<Event> events;
                    Console.WriteLine("Running " + interval);

                    switch (interval)
                    {
                        case "Hourly":
                            events = _datasetContext.EventsSince(DateTime.Now.AddHours(-1), true);
                            break;

                        case "Daily":
                            events = _datasetContext.EventsSince(DateTime.Now.AddDays(-1), true);
                            break;

                        case "Weekly":
                            events = _datasetContext.EventsSince(DateTime.Now.AddDays(-7), true);
                            break;

                        case "Instant":
                        default:
                            events = _datasetContext.EventsSince(DateTime.Now.AddYears(-20), false);
                            break;
                    }

                    List<UserEvent> userEvents = new List<UserEvent>();

                    foreach (Event _event in events)
                    {
                        var subsThatMatch = from _sub in _datasetContext.GetAllSubscriptions()
                                            where _sub.Dataset.DatasetId == _event.Dataset &&
                                                    _sub.EventType.Type_ID == _event.EventType.Type_ID &&
                                                    _sub.Interval == _datasetContext.GetInterval(interval)
                                            select _sub;

#if (DEBUG)

                        if (_event.UserWhoStartedEvent != null && (_event.UserWhoStartedEvent == "082698" || _event.UserWhoStartedEvent == "072984"))

#else
                        //Do not send notifications to events generated by a service account.
                        int n;
                        if (_event.UserWhoStartedEvent != null && int.TryParse(_event.UserWhoStartedEvent.Trim(), out n))

#endif
                        {

                            Console.WriteLine("UserWhoStartedEvent : " + _event.UserWhoStartedEvent);
                            
                            var user1 = int.TryParse(_event.UserWhoStartedEvent.Trim(), out n) ? _associateInfoProvider.GetAssociateInfo(_event.UserWhoStartedEvent.Trim()).FullName : _event.UserWhoStartedEvent.Trim();
                            var user = _associateInfoProvider.GetAssociateInfo(_event.UserWhoStartedEvent.Trim());

                            UserEvent ue;
                            if (userEvents.Any(x => x.email == user.WorkEmailAddress))
                            {
                                ue = userEvents.FirstOrDefault(x => x.email == user.WorkEmailAddress);
                                ue.events.Add(_event);
                            }
                            else
                            {
                                ue = new UserEvent();
                                ue.events = new List<Event>();
                                ue.events.Add(_event);
                                ue.email = user.WorkEmailAddress;

                                userEvents.Add(ue);
                            }
                        }

                        foreach (DatasetSubscription ds in subsThatMatch)
                        {
#if (DEBUG)
                         if (ds.SentryOwnerName == "082698" || ds.SentryOwnerName == "072984")
#endif
                            Console.WriteLine("ds.SentryOwnerName : " + ds.SentryOwnerName);
                            var user = _associateInfoProvider.GetAssociateInfo(ds.SentryOwnerName);

                            if (_event.UserWhoStartedEvent != ds.SentryOwnerName)
                            {
                                UserEvent ue;
                                if (userEvents.Any(x => x.email == user.WorkEmailAddress))
                                {
                                    ue = userEvents.FirstOrDefault(x => x.email == user.WorkEmailAddress);
                                    ue.events.Add(_event);
                                }
                                else
                                {
                                    try
                                    {
                                        ue = new UserEvent();
                                        ue.events = new List<Event>();
                                        ue.events.Add(_event);
                                        ue.email = user.WorkEmailAddress;
                                    }
                                    catch (Exception ex)
                                    {
                                        Logger.Error("Error creating UserEvent", ex);
                                        throw;
                                    }                                   

                                    userEvents.Add(ue);
                                }
                            }
#if (DEBUG)
                        }
#endif
                        }
                    }

                    Logger.Debug("Marking events as processed");
                    foreach (Event _event in events)
                    {
                        if (_event.IsProcessed == false)
                        {
                            _event.IsProcessed = true;
                            _event.TimeNotified = DateTime.Now;
                        }
                    }
                    Logger.Debug("Marked events as processed, continuing on...");

                    Logger.Debug("Sending event emails");
                    foreach (UserEvent ue in userEvents)
                    {
                        Logger.Debug($"{ue.email} is being sent {ue.events.Count} events.");
                        es.SendEmail(ue.email, interval," Events", ue.events);
                        Console.WriteLine(ue.email + " is being sent " + ue.events.Count + " events.");
                    }
                    Logger.Debug("Sent event emails, continuing on...");

                    Logger.Debug("Committing event changes to database");
                    _datasetContext.SaveChanges();
                    Logger.Debug("Committed event changes to database, continuing on...");

                }
            }
            catch (Exception ex)
            {
                Logger.Error("", ex);
                Console.Write(ex);
            }

            return new Request();
            
        }
    }
}

