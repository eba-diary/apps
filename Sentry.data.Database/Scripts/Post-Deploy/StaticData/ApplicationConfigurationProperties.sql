BEGIN TRAN

	BEGIN TRY 
		
		MERGE INTO [ApplicationConfigurationProperties] AS TARGET USING 
		( VALUES 
		
			( 'FSTTESTBATCHHANDLER', 'TEST', 'app.key1', 'value11' ),
			( 'FSTTESTBATCHHANDLER', 'TEST', 'app.key2', 'value12' ),

			( 'SNDTESTBATCHHANDLER', 'TEST', 'app.key1', 'value21' ),
			( 'SNDTESTBATCHHANDLER', 'TEST', 'app.key2', 'value22' ),
			( 'SNDTESTBATCHHANDLER', 'TEST', 'source.object.bucket', 'sentry-dlst-test-dataset-ae2' ),
			( 'SNDTESTBATCHHANDLER', 'TEST', 'source.object.key', 'users/data/01/gb_001.csv' ),
			( 'SNDTESTBATCHHANDLER', 'TEST', 'target.file.key', 'users/cla4137/sndbatchhandler/target.txt' ),
				
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.server', 'dblo-test-plur.dbal.sentry.local' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.name', 'INTRADAY_PLUR' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'configuration.dataproducer', 'TEST/DATABASELOADERPLURBATCHHANDLER/TableConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'configuration.dataloader', 'TEST/DATABASELOADERPLURBATCHHANDLER/SchemaConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'folder.queries', 'TEST/DATABASELOADERPLURBATCHHANDLER/dataproducer/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.warehouse', 'DATA_WH' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.role', 'BATCH_PLUR_TEST' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.useProxy', 'true' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.proxyPort', '80' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'snowflake.proxyPort', '8080' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'TEST', 'ld.sdk', 'sdk-ed5ba68e-57e9-425f-b902-41734886628d' ),

			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'data.sentry.check.published', 'SELECT 1 FROM [dbo].[FileDetector] WHERE [FilePath] = ''{FilePath}'' AND [FileCreatedDTM] = ''{FileCreatedDTM}'' AND [FileModifiedDTM] = ''{FileModifiedDTM}'';' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'TEST', 'data.sentry.update.published', 'INSERT INTO [dbo].[FileDetector] ([FilePath], [FileCreatedDTM], [FileModifiedDTM], [CreatedDTM]) VALUES (''{FilePath}'', ''{FileCreatedDTM}'', ''{FileModifiedDTM}'', GETDATE());' ),

			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'sql.read.filereply', 'SELECT ''sentry-dataset-management-np'' AS [SourceBucket], DatasetFileReply.* FROM [DatasetFileReply] WHERE [ReplyStatus] = ''A'';' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'sql.update.filereply', 'UPDATE [DatasetFileReply] SET [ReplyStatus] = {ReplyStatus} WHERE [DatasetFileReply_Id] = {DatasetFileReply_Id};' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'aws.version', 'ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 'target.topic', 'DATA-TEST-GOLDENEYE-000000' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 's3.configuration.bucket', 'sentry-dlst-test-dataset-ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'TEST', 's3.configuration.key', 'conf/dfs_to_s3_batch/dfstos3configuration01.csv' ),

			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'configuration.queries', 'TEST/DSCDISPATCHERBATCH/TableConfiguration.csv' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 'folder.queries', 'TEST/DSCDISPATCHERBATCH/queries/' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 's3.configuration.bucket', 'sentry-dlst-test-dataset-ae2' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'TEST', 's3.configuration.key', 'conf/dsc_dispatcher_batch/configuration.txt' ),
			
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'sql.readDatasetFileRaw', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileRaw.ObjectBucket AS [TargetBucket], DatasetFileRaw.ObjectKey AS [TargetKey], DatasetFileRaw.DatasetFileRawID AS [DatasetFileRawID] FROM DatasetFileRaw LEFT JOIN DatasetFileDrop ON DatasetFileRaw.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileRaw.DatasetID = Dataset.Dataset_ID WHERE DatasetFileRaw.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'sql.updateDatasetFileRaw', 'UPDATE DatasetFileRaw SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileRawID = {DatasetFileRawID};' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'sql.readDatasetFileQuery', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileQuery.ObjectBucket AS [TargetBucket], DatasetFileQuery.ObjectKey AS [TargetKey], DatasetFileQuery.DatasetFileQueryID AS [DatasetFileQueryID] FROM DatasetFileQuery LEFT JOIN DatasetFileDrop ON DatasetFileQuery.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileQuery.DatasetID = Dataset.Dataset_ID WHERE DatasetFileQuery.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'TEST', 'sql.updateDatasetFileQuery', 'UPDATE DatasetFileQuery SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileQueryID = {DatasetFileQueryID};' ),
			
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'source.topic', 'DATA-QUAL-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'target.topic', 'DATA-QUAL-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'data.sentry.rest.api.version', 'V2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'sql.read.partitionoffsetcheck', 'SELECT [EventMetricsId] FROM [dbo].[EventMetrics] WHERE [Partition] = <Partition> AND [Offset] = <Offset>;' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'sql.insert.eventrecord', 'INSERT INTO [dbo].[EventHandlerMetrics] ([Service_Run_GUID],[Process_Run_GUID],[Partition_ID],[Offset_ID],[Event_Handler_Type],[Metrics_Data],[Application_CDE],[Status_CDE],[Created_DTM]) VALUES (<Service_Run_GUID>,<Process_Run_GUID>,<Partition_ID>, <Offset_ID>,''<Event_Handler_Type>'',''<Metrics_Data>'', ''<Application_CDE>'', ''<Status_CDE>'',GETDATE());' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'sql.insert.datasetfileconnectors', 'INSERT INTO [dbo].[DatasetFileConnectors] ([FileNME], [S3FileBucket], [S3FileKey], [S3FileSizeAMT]) VALUES (''<FileNME>'', ''<S3FileBucket>'', ''<S3FileKey>'', ''<S3FileSizeAMT>'');' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'aws.version', 'ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'kafka.topic.configuration.bucket', 'sentry-dlst-test-dataset-ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'kafka.topic.configuration.key', 'conf/kafka_connector_to_s3_batch/kafkatopicconfiguration01.csv' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.warehouse', 'DATA_WH' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.database', 'DATA_TEST' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.useProxy', 'true' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.proxyHost', 'webproxy.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'TEST', 'snowflake.proxyPort', '80' ),

			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 's3.configuration.bucket', 'sentry-dlst-test-dataset-ae2' ),
			( 'S3FILESMERGEBATCHHANDLER', 'TEST', 's3.configuration.key', 'conf/s3_files_merge_batch/configuration.txt' ),
			
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.server', 'DLPP-TEST-SentryDatasets.db.sentry.local' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.name', 'SentryDatasets' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.authentication', 'Windows' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.secure.file.path', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.failover', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.pool.minPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.pool.maxPoolSize', '50' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.pool.initialPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.pool.maxIdelTime', '0' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'support.database.pool.maxStatements', '300' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'data.sentry.rest.base.path', 'https://datatest.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.role', 'DATA__DBADMIN_ROLE' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.useProxy', 'true' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.proxyPort', '80' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'snowflake.proxyPort', '8080' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'ld.sdk', 'sdk-ed5ba68e-57e9-425f-b902-41734886628d' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'ld.proxy.address', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'TEST', 'ld.proxy.port', '8080' ),

			( 'FSTQUALBATCHHANDLER', 'QUAL', 'app.key1', 'value11' ),
			( 'FSTQUALBATCHHANDLER', 'QUAL', 'app.key2', 'value12' ),

			( 'SNDQUALBATCHHANDLER', 'QUAL', 'app.key1', 'value21' ),
			( 'SNDQUALBATCHHANDLER', 'QUAL', 'app.key2', 'value22' ),
			( 'SNDQUALBATCHHANDLER', 'QUAL', 'source.object.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'SNDQUALBATCHHANDLER', 'QUAL', 'source.object.key', 'users/data/01/gb_001.csv' ),
			( 'SNDQUALBATCHHANDLER', 'QUAL', 'target.file.key', 'users/cla4137/sndbatchhandler/target.txt' ),
		
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.server', 'dblo-qual-plur.dbal.sentry.local' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.name', 'QUAL_PLUR' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'configuration.dataproducer', 'QUAL/DATABASELOADERPLURBATCHHANDLER/TableConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'configuration.dataloader', 'QUAL/DATABASELOADERPLURBATCHHANDLER/SchemaConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'folder.queries', 'QUAL/DATABASELOADERPLURBATCHHANDLER/dataproducer/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.warehouse', 'DATA_WH' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.role', 'BATCH_PLUR_QUAL' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.useProxy', 'true' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.proxyPort', '80' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'snowflake.proxyPort', '8080' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUAL', 'ld.sdk', 'sdk-ed5ba68e-57e9-425f-b902-41734886628d' ),

			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'data.sentry.check.published', 'SELECT 1 FROM [dbo].[FileDetector] WHERE [FilePath] = ''{FilePath}'' AND [FileCreatedDTM] = ''{FileCreatedDTM}'' AND [FileModifiedDTM] = ''{FileModifiedDTM}'';' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUAL', 'data.sentry.update.published', 'INSERT INTO [dbo].[FileDetector] ([FilePath], [FileCreatedDTM], [FileModifiedDTM], [CreatedDTM]) VALUES (''{FilePath}'', ''{FileCreatedDTM}'', ''{FileModifiedDTM}'', GETDATE());' ),

			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'sql.read.filereply', 'SELECT ''sentry-dataset-management-np'' AS [SourceBucket], DatasetFileReply.* FROM [DatasetFileReply] WHERE [ReplyStatus] = ''A'';' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'sql.update.filereply', 'UPDATE [DatasetFileReply] SET [ReplyStatus] = {ReplyStatus} WHERE [DatasetFileReply_Id] = {DatasetFileReply_Id};' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'aws.version', 'ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 'target.topic', 'DATA-LOCAL-GOLDENEYE-000000' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 's3.configuration.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'QUAL', 's3.configuration.key', 'control/dfs_to_s3_batch/dfstos3configuration01.csv' ),

			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'configuration.queries', 'QUAL/DSCDISPATCHERBATCH/TableConfiguration.csv' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 'folder.queries', 'QUAL/DSCDISPATCHERBATCH/queries/' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 's3.configuration.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUAL', 's3.configuration.key', 'conf/dsc_dispatcher_batch/configuration.txt' ),
			
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'sql.readDatasetFileRaw', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileRaw.ObjectBucket AS [TargetBucket], DatasetFileRaw.ObjectKey AS [TargetKey], DatasetFileRaw.DatasetFileRawID AS [DatasetFileRawID] FROM DatasetFileRaw LEFT JOIN DatasetFileDrop ON DatasetFileRaw.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileRaw.DatasetID = Dataset.Dataset_ID WHERE DatasetFileRaw.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''Prod'';' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'sql.updateDatasetFileRaw', 'UPDATE DatasetFileRaw SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileRawID = {DatasetFileRawID};' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'sql.readDatasetFileQuery', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileQuery.ObjectBucket AS [TargetBucket], DatasetFileQuery.ObjectKey AS [TargetKey], DatasetFileQuery.DatasetFileQueryID AS [DatasetFileQueryID] FROM DatasetFileQuery LEFT JOIN DatasetFileDrop ON DatasetFileQuery.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileQuery.DatasetID = Dataset.Dataset_ID WHERE DatasetFileQuery.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''Prod'';' ),
			( 'FILECOPYBATCHHANDLER', 'QUAL', 'sql.updateDatasetFileQuery', 'UPDATE DatasetFileQuery SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileQueryID = {DatasetFileQueryID};' ),
			
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'source.topic', 'DATA-QUAL-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'target.topic', 'DATA-QUAL-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'data.sentry.rest.api.version', 'V2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'sql.read.partitionoffsetcheck', 'SELECT [EventMetricsId] FROM [dbo].[EventMetrics] WHERE [Partition] = <Partition> AND [Offset] = <Offset>;' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'sql.insert.eventrecord', 'INSERT INTO [dbo].[EventHandlerMetrics] ([Service_Run_GUID],[Process_Run_GUID],[Partition_ID],[Offset_ID],[Event_Handler_Type],[Metrics_Data],[Application_CDE],[Status_CDE],[Created_DTM]) VALUES (<Service_Run_GUID>,<Process_Run_GUID>,<Partition_ID>, <Offset_ID>,''<Event_Handler_Type>'',''<Metrics_Data>'', ''<Application_CDE>'', ''<Status_CDE>'',GETDATE());' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'sql.insert.datasetfileconnectors', 'INSERT INTO [dbo].[DatasetFileConnectors] ([FileNME], [S3FileBucket], [S3FileKey], [S3FileSizeAMT]) VALUES (''<FileNME>'', ''<S3FileBucket>'', ''<S3FileKey>'', ''<S3FileSizeAMT>'');' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'aws.version', 'ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'kafka.topic.configuration.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'kafka.topic.configuration.key', 'conf/kafka_connector_to_s3_batch/kafkatopicconfiguration01.csv' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.warehouse', 'DATA_WH' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.database', 'DATA_QUAL' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.useProxy', 'true' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.proxyHost', 'webproxy.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUAL', 'snowflake.proxyPort', '80' ),
			
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 's3.configuration.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUAL', 's3.configuration.key', 'conf/s3_files_merge_batch/configuration.txt' ),

			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.server', 'DLPP-QUAL-SentryDatasets.dbal.sentry.local' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.name', 'SentryDatasets' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.authentication', 'Windows' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.secure.file.path', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.failover', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.pool.minPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.pool.maxPoolSize', '50' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.pool.initialPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.pool.maxIdelTime', '0' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'support.database.pool.maxStatements', '300' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.role', 'DATA__DBADMIN_ROLE' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.useProxy', 'true' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.proxyPort', '80' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'snowflake.proxyPort', '8080' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'ld.sdk', 'sdk-6dea26fc-9169-4c86-a89f-78b93691a711' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'ld.proxy.address', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUAL', 'ld.proxy.port', '8080' ),
			
			( 'FSTQUALBATCHHANDLER', 'QUALNP', 'app.key1', 'value11' ),
			( 'FSTQUALBATCHHANDLER', 'QUALNP', 'app.key2', 'value12' ),

			( 'SNDQUALBATCHHANDLER', 'QUALNP', 'app.key1', 'value21' ),
			( 'SNDQUALBATCHHANDLER', 'QUALNP', 'app.key2', 'value22' ),
			( 'SNDQUALBATCHHANDLER', 'QUALNP', 'source.object.bucket', 'sentry-dlst-qualnp-dataset-ae2' ),
			( 'SNDQUALBATCHHANDLER', 'QUALNP', 'source.object.key', 'users/data/01/gb_001.csv' ),
			( 'SNDQUALBATCHHANDLER', 'QUALNP', 'target.file.key', 'users/cla4137/sndbatchhandler/target.txt' ),
		
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.server', 'dlpp-qualnp-plur.dbal.sentry.local' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.name', 'QUAL_PLUR' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'configuration.dataproducer', 'QUALNP/DATABASELOADERPLURBATCHHANDLER/TableConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'configuration.dataloader', 'QUALNP/DATABASELOADERPLURBATCHHANDLER/SchemaConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'folder.queries', 'QUALNP/DATABASELOADERPLURBATCHHANDLER/dataproducer/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.warehouse', 'DATA_WH' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.role', 'BATCH_PLUR_QUAL' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.useProxy', 'true' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.proxyPort', '80' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'snowflake.proxyPort', '8080' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'QUALNP', 'ld.sdk', 'sdk-ed5ba68e-57e9-425f-b902-41734886628d' ),

			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'data.sentry.check.published', 'SELECT 1 FROM [dbo].[FileDetector] WHERE [FilePath] = ''{FilePath}'' AND [FileCreatedDTM] = ''{FileCreatedDTM}'' AND [FileModifiedDTM] = ''{FileModifiedDTM}'';' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'QUALNP', 'data.sentry.update.published', 'INSERT INTO [dbo].[FileDetector] ([FilePath], [FileCreatedDTM], [FileModifiedDTM], [CreatedDTM]) VALUES (''{FilePath}'', ''{FileCreatedDTM}'', ''{FileModifiedDTM}'', GETDATE());' ),

			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'sql.read.filereply', 'SELECT ''sentry-dataset-management-np'' AS [SourceBucket], DatasetFileReply.* FROM [DatasetFileReply] WHERE [ReplyStatus] = ''A'';' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'sql.update.filereply', 'UPDATE [DatasetFileReply] SET [ReplyStatus] = {ReplyStatus} WHERE [DatasetFileReply_Id] = {DatasetFileReply_Id};' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'aws.version', 'ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 'target.topic', 'DATA-LOCAL-GOLDENEYE-000000' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 's3.configuration.bucket', 'sentry-dlst-qualnp-dataset-ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'QUALNP', 's3.configuration.key', 'control/dfs_to_s3_batch/dfstos3configuration01.csv' ),

			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqualnp.sentry.com' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'configuration.queries', 'QUALNP/DSCDISPATCHERBATCH/TableConfiguration.csv' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 'folder.queries', 'QUALNP/DSCDISPATCHERBATCH/queries/' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 's3.configuration.bucket', 'sentry-dlst-qualnp-dataset-ae2' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'QUALNP', 's3.configuration.key', 'conf/dsc_dispatcher_batch/configuration.txt' ),
			
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'sql.readDatasetFileRaw', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileRaw.ObjectBucket AS [TargetBucket], DatasetFileRaw.ObjectKey AS [TargetKey], DatasetFileRaw.DatasetFileRawID AS [DatasetFileRawID] FROM DatasetFileRaw LEFT JOIN DatasetFileDrop ON DatasetFileRaw.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileRaw.DatasetID = Dataset.Dataset_ID WHERE DatasetFileRaw.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'sql.updateDatasetFileRaw', 'UPDATE DatasetFileRaw SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileRawID = {DatasetFileRawID};' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'sql.readDatasetFileQuery', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileQuery.ObjectBucket AS [TargetBucket], DatasetFileQuery.ObjectKey AS [TargetKey], DatasetFileQuery.DatasetFileQueryID AS [DatasetFileQueryID] FROM DatasetFileQuery LEFT JOIN DatasetFileDrop ON DatasetFileQuery.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileQuery.DatasetID = Dataset.Dataset_ID WHERE DatasetFileQuery.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'QUALNP', 'sql.updateDatasetFileQuery', 'UPDATE DatasetFileQuery SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileQueryID = {DatasetFileQueryID};' ),
			
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'source.topic', 'DATA-QUALNP-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'target.topic', 'DATA-QUALNP-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'data.sentry.rest.api.version', 'V2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'sql.read.partitionoffsetcheck', 'SELECT [EventMetricsId] FROM [dbo].[EventMetrics] WHERE [Partition] = <Partition> AND [Offset] = <Offset>;' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'sql.insert.eventrecord', 'INSERT INTO [dbo].[EventHandlerMetrics] ([Service_Run_GUID],[Process_Run_GUID],[Partition_ID],[Offset_ID],[Event_Handler_Type],[Metrics_Data],[Application_CDE],[Status_CDE],[Created_DTM]) VALUES (<Service_Run_GUID>,<Process_Run_GUID>,<Partition_ID>, <Offset_ID>,''<Event_Handler_Type>'',''<Metrics_Data>'', ''<Application_CDE>'', ''<Status_CDE>'',GETDATE());' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'sql.insert.datasetfileconnectors', 'INSERT INTO [dbo].[DatasetFileConnectors] ([FileNME], [S3FileBucket], [S3FileKey], [S3FileSizeAMT]) VALUES (''<FileNME>'', ''<S3FileBucket>'', ''<S3FileKey>'', ''<S3FileSizeAMT>'');' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'aws.version', 'ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'kafka.topic.configuration.bucket', 'sentry-dlst-qualnp-dataset-ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'kafka.topic.configuration.key', 'conf/kafka_connector_to_s3_batch/kafkatopicconfiguration01.csv' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.warehouse', 'DATA_WH' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.database', 'DATA_QUALNP' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.useProxy', 'true' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.proxyHost', 'webproxy.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'QUALNP', 'snowflake.proxyPort', '80' ),
			
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 's3.configuration.bucket', 'sentry-dlst-qual-dataset-ae2' ),
			( 'S3FILESMERGEBATCHHANDLER', 'QUALNP', 's3.configuration.key', 'conf/s3_files_merge_batch/configuration.txt' ),

			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.server', 'DLPP-QUALNP-SentryDatasets.dbal.sentry.local' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.name', 'SentryDatasets' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.authentication', 'Windows' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.secure.file.path', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.failover', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.pool.minPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'support.database.pool.maxStatements', '300' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'data.sentry.rest.base.path', 'https://dataqual.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.role', 'DATA__DBADMIN_ROLE' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.useProxy', 'true' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.proxyHost', 'serverproxyqual.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.proxyPort', '80' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.proxyHost', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'snowflake.proxyPort', '8080' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'ld.sdk', 'sdk-6dea26fc-9169-4c86-a89f-78b93691a711' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'ld.proxy.address', 'app-proxy-nonprod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'QUALNP', 'ld.proxy.port', '8080' ),

			( 'FSTPRODBATCHHANDLER', 'PROD', 'app.key1', 'value11' ),
			( 'FSTPRODBATCHHANDLER', 'PROD', 'app.key2', 'value12' ),

			( 'SNDPRODBATCHHANDLER', 'PROD', 'app.key1', 'value21' ),
			( 'SNDPRODBATCHHANDLER', 'PROD', 'app.key2', 'value22' ),
			( 'SNDPRODBATCHHANDLER', 'PROD', 'source.object.bucket', 'sentry-dlst-prod-dataset-ae2' ),
			( 'SNDPRODBATCHHANDLER', 'PROD', 'source.object.key', 'users/data/01/gb_001.csv' ),
			( 'SNDPRODBATCHHANDLER', 'PROD', 'target.file.key', 'users/cla4137/sndbatchhandler/target.txt' ),
			

			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.server', 'dblo-prod-plur.dbal.sentry.local' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.name', 'PLUR' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'configuration.dataproducer', 'PROD/DATABASELOADERPLURBATCHHANDLER/TableConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'configuration.dataloader', 'PROD/DATABASELOADERPLURBATCHHANDLER/SchemaConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'folder.queries', 'PROD/DATABASELOADERPLURBATCHHANDLER/dataproducer/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.warehouse', 'DATA_WH' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.role', 'BATCH_PLUR_TEST' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.useProxy', 'true' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.proxyHost', 'serverproxyprod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.proxyPort', '80' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.proxyHost', 'app-proxy-prod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'snowflake.proxyPort', '8080' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PROD', 'ld.sdk', 'sdk-2c8a53e0-46a8-4b37-9753-418de81db1a2' ),

			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'data.sentry.check.published', 'SELECT 1 FROM [dbo].[FileDetector] WHERE [FilePath] = ''{FilePath}'' AND [FileCreatedDTM] = ''{FileCreatedDTM}'' AND [FileModifiedDTM] = ''{FileModifiedDTM}'';' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PROD', 'data.sentry.update.published', 'INSERT INTO [dbo].[FileDetector] ([FilePath], [FileCreatedDTM], [FileModifiedDTM], [CreatedDTM]) VALUES (''{FilePath}'', ''{FileCreatedDTM}'', ''{FileModifiedDTM}'', GETDATE());' ),

			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'sql.read.filereply', 'SELECT ''sentry-dataset-management-np'' AS [SourceBucket], DatasetFileReply.* FROM [DatasetFileReply] WHERE [ReplyStatus] = ''A'';' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'sql.update.filereply', 'UPDATE [DatasetFileReply] SET [ReplyStatus] = {ReplyStatus} WHERE [DatasetFileReply_Id] = {DatasetFileReply_Id};' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'aws.version', 'ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 'target.topic', 'DATA-LOCAL-GOLDENEYE-000000' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 's3.configuration.bucket', 'sentry-dlst-prod-dataset-ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'PROD', 's3.configuration.key', 'control/dfs_to_s3_batch/dfstos3configuration01.csv' ),

			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'configuration.queries', 'PROD/DSCDISPATCHERBATCH/TableConfiguration.csv' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 'folder.queries', 'PROD/DSCDISPATCHERBATCH/queries/' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 's3.configuration.bucket', 'sentry-dlst-prod-dataset-ae2' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PROD', 's3.configuration.key', 'conf/dsc_dispatcher_batch/configuration.txt' ),
			
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'sql.readDatasetFileRaw', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileRaw.ObjectBucket AS [TargetBucket], DatasetFileRaw.ObjectKey AS [TargetKey], DatasetFileRaw.DatasetFileRawID AS [DatasetFileRawID] FROM DatasetFileRaw LEFT JOIN DatasetFileDrop ON DatasetFileRaw.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileRaw.DatasetID = Dataset.Dataset_ID WHERE DatasetFileRaw.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''Prod'';' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'sql.updateDatasetFileRaw', 'UPDATE DatasetFileRaw SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileRawID = {DatasetFileRawID};' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'sql.readDatasetFileQuery', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileQuery.ObjectBucket AS [TargetBucket], DatasetFileQuery.ObjectKey AS [TargetKey], DatasetFileQuery.DatasetFileQueryID AS [DatasetFileQueryID] FROM DatasetFileQuery LEFT JOIN DatasetFileDrop ON DatasetFileQuery.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileQuery.DatasetID = Dataset.Dataset_ID WHERE DatasetFileQuery.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''Prod'';' ),
			( 'FILECOPYBATCHHANDLER', 'PROD', 'sql.updateDatasetFileQuery', 'UPDATE DatasetFileQuery SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileQueryID = {DatasetFileQueryID};' ),
			
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'source.topic', 'DATA-PROD-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'target.topic', 'DATA-PROD-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'data.sentry.rest.api.version', 'V2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'sql.read.partitionoffsetcheck', 'SELECT [EventMetricsId] FROM [dbo].[EventMetrics] WHERE [Partition] = <Partition> AND [Offset] = <Offset>;' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'sql.insert.eventrecord', 'INSERT INTO [dbo].[EventHandlerMetrics] ([Service_Run_GUID],[Process_Run_GUID],[Partition_ID],[Offset_ID],[Event_Handler_Type],[Metrics_Data],[Application_CDE],[Status_CDE],[Created_DTM]) VALUES (<Service_Run_GUID>,<Process_Run_GUID>,<Partition_ID>, <Offset_ID>,''<Event_Handler_Type>'',''<Metrics_Data>'', ''<Application_CDE>'', ''<Status_CDE>'',GETDATE());' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'sql.insert.datasetfileconnectors', 'INSERT INTO [dbo].[DatasetFileConnectors] ([FileNME], [S3FileBucket], [S3FileKey], [S3FileSizeAMT]) VALUES (''<FileNME>'', ''<S3FileBucket>'', ''<S3FileKey>'', ''<S3FileSizeAMT>'');' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'aws.version', 'ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'kafka.topic.configuration.bucket', 'sentry-dlst-prod-dataset-ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'kafka.topic.configuration.key', 'conf/kafka_connector_to_s3_batch/kafkatopicconfiguration01.csv' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.warehouse', 'DATA_WH' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.database', 'DATA_QUAL' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.useProxy', 'true' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.proxyHost', 'webproxy.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PROD', 'snowflake.proxyPort', '80' ),
			
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 's3.configuration.bucket', 'sentry-dlst-prod-dataset-ae2' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PROD', 's3.configuration.key', 'conf/s3_files_merge_batch/configuration.txt' ),

			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.server', 'DLPP-PROD-SentryDatasets.dbal.sentry.local' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.name', 'SentryDatasets' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.authentication', 'Windows' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.secure.file.path', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.failover', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.pool.minPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.pool.maxPoolSize', '50' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.pool.initialPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.pool.maxIdelTime', '0' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'support.database.pool.maxStatements', '300' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.role', 'BATCH_PLUR_PROD' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.useProxy', 'true' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.proxyHost', 'serverproxy.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.proxyPort', '80' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.proxyHost', 'app-proxy-prod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'snowflake.proxyPort', '8080' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'ld.sdk', 'sdk-2c8a53e0-46a8-4b37-9753-418de81db1a2' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'ld.proxy.address', 'app-proxy-prod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PROD', 'ld.proxy.port', '8080' ), 
			
			( 'FSTPRODBATCHHANDLER', 'PRODNP', 'app.key1', 'value11' ),
			( 'FSTPRODBATCHHANDLER', 'PRODNP', 'app.key2', 'value12' ),

			( 'SNDPRODBATCHHANDLER', 'PRODNP', 'app.key1', 'value21' ),
			( 'SNDPRODBATCHHANDLER', 'PRODNP', 'app.key2', 'value22' ),
			( 'SNDPRODBATCHHANDLER', 'PRODNP', 'prodnp.object.bucket', 'sentry-dlst-prodnp-dataset-ae2' ),
			( 'SNDPRODBATCHHANDLER', 'PRODNP', 'prodnp.object.key', 'users/data/01/gb_001.csv' ),
			( 'SNDPRODBATCHHANDLER', 'PRODNP', 'target.file.key', 'users/cla4137/sndbatchhandler/target.txt' ),
			
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.server', 'dblo-prod-plur.dbal.sentry.local' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.name', 'PLUR' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'configuration.dataproducer', 'PRODNP/DATABASELOADERPLURBATCHHANDLER/TableConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'configuration.dataloader', 'PRODNP/DATABASELOADERPLURBATCHHANDLER/SchemaConfiguration.csv' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'folder.queries', 'PRODNP/DATABASELOADERPLURBATCHHANDLER/dataproducer/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.warehouse', 'DATA_WH' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.role', 'BATCH_PLUR_PROD' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.useProxy', 'true' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.proxyHost', 'serverproxyprod.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.proxyPort', '80' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.proxyHost', 'app-proxy-prodnp.sentry.com' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'snowflake.proxyPort', '8080' ),
			( 'DATABASELOADERPLURBATCHHANDLER', 'PRODNP', 'ld.sdk', 'sdk-2c8a53e0-46a8-4b37-9753-418de81db1a2' ),

			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'data.sentry.check.published', 'SELECT 1 FROM [dbo].[FileDetector] WHERE [FilePath] = ''{FilePath}'' AND [FileCreatedDTM] = ''{FileCreatedDTM}'' AND [FileModifiedDTM] = ''{FileModifiedDTM}'';' ),
			( 'DFSFILEDETECTORBATCHHANDLER', 'PRODNP', 'data.sentry.update.published', 'INSERT INTO [dbo].[FileDetector] ([FilePath], [FileCreatedDTM], [FileModifiedDTM], [CreatedDTM]) VALUES (''{FilePath}'', ''{FileCreatedDTM}'', ''{FileModifiedDTM}'', GETDATE());' ),

			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'sql.read.filereply', 'SELECT ''sentry-dataset-management-np'' AS [SourceBucket], DatasetFileReply.* FROM [DatasetFileReply] WHERE [ReplyStatus] = ''A'';' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'sql.update.filereply', 'UPDATE [DatasetFileReply] SET [ReplyStatus] = {ReplyStatus} WHERE [DatasetFileReply_Id] = {DatasetFileReply_Id};' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'aws.version', 'ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 'target.topic', 'DATA-LOCAL-GOLDENEYE-000000' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 's3.configuration.bucket', 'sentry-dlst-prodnp-dataset-ae2' ),
			( 'DFSTOS3BATCHHANDLER', 'PRODNP', 's3.configuration.key', 'control/dfs_to_s3_batch/dfstos3configuration01.csv' ),

			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'configuration.queries', 'PRODNP/DSCDISPATCHERBATCH/TableConfiguration.csv' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 'folder.queries', 'PRODNP/DSCDISPATCHERBATCH/queries/' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 's3.configuration.bucket', 'sentry-dlst-prodnp-dataset-ae2' ),
			( 'DSCDISPATCHERBATCHHANDLER', 'PRODNP', 's3.configuration.key', 'conf/dsc_dispatcher_batch/configuration.txt' ),
			
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'sql.readDatasetFileRaw', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileRaw.ObjectBucket AS [TargetBucket], DatasetFileRaw.ObjectKey AS [TargetKey], DatasetFileRaw.DatasetFileRawID AS [DatasetFileRawID] FROM DatasetFileRaw LEFT JOIN DatasetFileDrop ON DatasetFileRaw.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileRaw.DatasetID = Dataset.Dataset_ID WHERE DatasetFileRaw.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'sql.updateDatasetFileRaw', 'UPDATE DatasetFileRaw SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileRawID = {DatasetFileRawID};' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'sql.readDatasetFileQuery', 'SELECT DatasetFileDrop.ObjectBucket AS [SourceBucket], DatasetFileDrop.ObjectKey AS [SourceKey], DatasetFileDrop.ObjectVersionID AS [SourceVersionID], DatasetFileQuery.ObjectBucket AS [TargetBucket], DatasetFileQuery.ObjectKey AS [TargetKey], DatasetFileQuery.DatasetFileQueryID AS [DatasetFileQueryID] FROM DatasetFileQuery LEFT JOIN DatasetFileDrop ON DatasetFileQuery.DatasetFileDropID = DatasetFileDrop.DatasetFileDropID LEFT JOIN Dataset ON DatasetFileQuery.DatasetID = Dataset.Dataset_ID WHERE DatasetFileQuery.ObjectStatus = 6 and Dataset.NamedEnvironmentType = ''NonProd'';' ),
			( 'FILECOPYBATCHHANDLER', 'PRODNP', 'sql.updateDatasetFileQuery', 'UPDATE DatasetFileQuery SET ObjectStatus = 1, ObjectVersionID = {ObjectVersionID}, ObjectETag = {ObjectETag}, ObjectSizeAMT = {ObjectSizeAMT}, UpdateDTM = GETDATE() WHERE DatasetFileQueryID = {DatasetFileQueryID};' ),
			
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'source.topic', 'DATA-PRODNP-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'target.topic', 'DATA-PRODNP-GOLDENEYE-000000B' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'data.sentry.rest.api.version', 'V2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'sql.read.partitionoffsetcheck', 'SELECT [EventMetricsId] FROM [dbo].[EventMetrics] WHERE [Partition] = <Partition> AND [Offset] = <Offset>;' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'sql.insert.eventrecord', 'INSERT INTO [dbo].[EventHandlerMetrics] ([Service_Run_GUID],[Process_Run_GUID],[Partition_ID],[Offset_ID],[Event_Handler_Type],[Metrics_Data],[Application_CDE],[Status_CDE],[Created_DTM]) VALUES (<Service_Run_GUID>,<Process_Run_GUID>,<Partition_ID>, <Offset_ID>,''<Event_Handler_Type>'',''<Metrics_Data>'', ''<Application_CDE>'', ''<Status_CDE>'',GETDATE());' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'sql.insert.datasetfileconnectors', 'INSERT INTO [dbo].[DatasetFileConnectors] ([FileNME], [S3FileBucket], [S3FileKey], [S3FileSizeAMT]) VALUES (''<FileNME>'', ''<S3FileBucket>'', ''<S3FileKey>'', ''<S3FileSizeAMT>'');' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'aws.version', 'ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'kafka.topic.configuration.bucket', 'sentry-dlst-prodnp-dataset-ae2' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'kafka.topic.configuration.key', 'conf/kafka_connector_to_s3_batch/kafkatopicconfiguration01.csv' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.warehouse', 'DATA_WH' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.database', 'DATA_QUALNP' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.useProxy', 'true' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.proxyHost', 'webproxy.sentry.com' ),
			( 'KAFKACONNECTORTOS3BATCHHANDLER', 'PRODNP', 'snowflake.proxyPort', '80' ),
			
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 's3.configuration.bucket', 'sentry-dlst-prodnp-dataset-ae2' ),
			( 'S3FILESMERGEBATCHHANDLER', 'PRODNP', 's3.configuration.key', 'conf/s3_files_merge_batch/configuration.txt' ),

			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.server', 'DLPP-PRODNP-SentryDatasets.dbal.sentry.local' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.name', 'SentryDatasets' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.authentication', 'Windows' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.secure.file.path', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.failover', '' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.pool.minPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.pool.maxPoolSize', '50' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.pool.initialPoolSize', '10' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.pool.maxIdelTime', '0' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'support.database.pool.maxStatements', '300' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'data.sentry.rest.base.path', 'https://data.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.server', 'sentry.us-east-2.aws.snowflakecomputing.com/' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.role', 'DATA__DBADMIN_ROLE' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.useProxy', 'true' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.proxyHost', 'serverproxy.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.proxyPort', '80' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.proxyHost', 'app-proxy-prodnp.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'snowflake.proxyPort', '8080' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'ld.sdk', 'sdk-2c8a53e0-46a8-4b37-9753-418de81db1a2' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'ld.proxy.address', 'app-proxy-prod.sentry.com' ),
			( 'SNOWFLAKEREFRESHBATCHHANDLER', 'PRODNP', 'ld.proxy.port', '8080' )

			
		)
		AS Source ([Application], [Environment], [ConfigurationKey], [ConfigurationValue]) 

		ON TARGET.[Application] = SOURCE.[Application] AND TARGET.[Environment] = SOURCE.[Environment] AND TARGET.[ConfigurationKey] = SOURCE.[ConfigurationKey]

		WHEN MATCHED THEN 
			-- update matched rows 
			UPDATE SET 
			[Application] = SOURCE.[Application],
			[Environment] = SOURCE.[Environment],
			[ConfigurationKey] = SOURCE.[ConfigurationKey],
			[ConfigurationValue] = SOURCE.[ConfigurationValue]

		WHEN NOT MATCHED BY TARGET THEN 
			-- insert new rows 
			INSERT ([Application], [Environment], [ConfigurationKey], [ConfigurationValue]) 
			VALUES ([Application], [Environment], [ConfigurationKey], [ConfigurationValue])  
				
		WHEN NOT MATCHED BY SOURCE THEN 
			-- delete rows that are in the target but not the source 
			DELETE;

		END TRY 

		BEGIN CATCH 

		DECLARE @Merge_ApplicationConfigurationProperties_ErrorMessage NVARCHAR(4000); 
		DECLARE @Merge_ApplicationConfigurationProperties_ErrorSeverity INT; 
		DECLARE @Merge_ApplicationConfigurationProperties_ErrorState INT; 
	
		SELECT 
			@Merge_ApplicationConfigurationProperties_ErrorMessage = ERROR_MESSAGE(), 
			@Merge_ApplicationConfigurationProperties_ErrorSeverity = ERROR_SEVERITY(), 
			@Merge_ApplicationConfigurationProperties_ErrorState = ERROR_STATE(); 
	
		RAISERROR 
		( 
			@Merge_ApplicationConfigurationProperties_ErrorMessage, 
			@Merge_ApplicationConfigurationProperties_ErrorSeverity, 
			@Merge_ApplicationConfigurationProperties_ErrorState 
		); 
	
		ROLLBACK TRAN 

		RETURN

	END CATCH 

COMMIT TRAN