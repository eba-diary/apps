<?xml version="1.0"?>
<project name="Deploy" xmlns="http://nant.sf.net/schemas/nant.xsd">
  
  <!-- ////////////////////////////////////////////////////////////////// -->
  <!--    CONFIGURABLE SETTINGS                                           -->
  <!-- ////////////////////////////////////////////////////////////////// -->
  
  <!-- Set the name of the web project -->
  <property name="PublishedWebSiteName" value="Sentry.data.Web"/>
  
  <!-- The list of steps in deploying your app -->
  <target name="deploy" depends="environmentSettings, addOutage, deployApp, deleteOutage, envDashRecordDeploy" />

  <!-- Environment Dashboard Settings -->
  <property name="envDashSysId" value="278"/>
  <property name="envDashBuildTypId" value="387"/>

  <!-- SEER Outage Settings -->
  <property name="seerOutageSystemName" value="My App"/>
  <property name="seerOutageLengthMinutes" value="60"/>


  <!-- ////////////////////////////////////////////////////////////////// -->
  <!--    DEPLOYMENT SCRIPT                                               -->
  <!-- ////////////////////////////////////////////////////////////////// -->
  
  <!-- Include the Environments file -->
  <include buildfile="Environments.include" />
  
  <!-- Determine the environment -->
  <regex pattern="\\(?'TargetEnv'\w+)\\(?'WhatToDeploy'\w+)\\Artifacts\\DeploymentScripts" input="${project::get-base-directory()}"/>
  <echo message="${TargetEnv}"/>
  <echo message="${WhatToDeploy}"/>

  <!-- Create a SEER outage -->
  <target name="addOutage" if="${bool::parse(createSeerOutage)}">
    <tstamp property="currentdate" pattern="yyyy-MM-ddTHH:mm:ss.fff"/>
    <addOutage outageName="${seerOutageSystemName} ${TargetEnv} Deployment"
      outageDesc="Outage created during automated deployment"
      outageStart="${currentdate}"
      outageLengthMinutes="${seerOutageLengthMinutes}">
      <servers serverNames="${seerOutageServers}" />
      <applications applicationNames="${seerOutageApplications}" />
    </addOutage>
  </target>
  
  <!-- Deploy the Web or ConsoleApp -->
  <target name="deployApp">

    <if test="${WhatToDeploy=='Web'}">
      <!-- for each deployment location in semicolon-delimited list in DeployLocations_Web -->
        <foreach item="String" in="${DeployLocations}" delim=";" property="copytodir">
          <echo message="Location = ${copytodir}"/>

          <!-- Copy App_Offline.htm to base directory to block traffic during deployment-->
          <copy file="App_Offline.htm" tofile="${copytodir}\App_Offline.htm" overwrite="true" />

          <!-- Replace web.config with temporary web.config to prevent app domain restart -->
          <copy file="Web.config" tofile="${copytodir}\Web.config" overwrite="true" />

          <sleep seconds="15"/>
          <echo message="Deleting existing web site deployment." />

          <!-- use three separate delete steps to try to avoid file contention -->
          <delete verbose="true">
            <fileset basedir="${copytodir}">
              <include name="*.*"/>
              <exclude name="App_Offline.htm"/>
              <exclude name="Web.config"/>
            </fileset>
          </delete>
          <!-- Delete everything except the _status and aspnet_client directories and App_Offline.htm and Web.config
           also save bin for separate deletion, since we sometimes get hung up on that -->
          <delete verbose="true">
            <fileset basedir="${copytodir}">
              <include name="**/*" />
              <exclude name="aspnet_client/**" />
              <exclude name="App_Offline.htm" />
              <exclude name="Web.config"/>
              <exclude name="bin/**"/>
            </fileset>
          </delete>
          <!-- delete bin folder IIS sometimes hangs on to these files -->
          <delete verbose="true">
            <fileset basedir="${path::combine(copytodir, 'bin')}">
              <include name="**/*"/>
            </fileset>
          </delete>


          <!-- Deploy web site code, except for Web.config -->
          <echo message="Deploying web site." />
          <property name="copyfromdir" value="..\_PublishedWebsites\${PublishedWebSiteName}"/>
          <property name="copyfromdiralt" value="..\${PublishedWebSiteName}\_PublishedWebsites\${PublishedWebSiteName}"/>
          <if test="${directory::exists(copyfromdiralt)}" verbose="true">
            <property name="copyfromdir" value="${copyfromdiralt}"/>
          </if>
          <copy todir="${copytodir}">
            <fileset basedir="${copyfromdir}">
              <include name="**/*"/>
              <exclude name="aspnet_client/**" />
              <exclude name="Web.config"/>
            </fileset>
          </copy>

          <!-- Once all other files are deployed, copy the real web.config, allowing app domain recycle -->
          <copy file="${copyfromdir}\Web.config" tofile="${copytodir}\Web.config" overwrite="true" />

          <!-- Delete App_Offline.htm to allow traffic back into the site -->
          <delete file="${copytodir}\App_Offline.htm" />

          <sleep seconds="10"/>

        </foreach>
    </if>


    <if test="${WhatToDeploy=='ConsoleApp'}">
      <!-- for each deployment location in semicolon-delimited list in DeployLocations_Console -->
      <foreach item="String" in="${DeployLocations}" delim=";" property="copytodir">
          <echo message="Location = ${copytodir}" />

          <echo message="Deleting existing console app deployment." />
          <delete verbose="true">
            <fileset basedir="${copytodir}">
              <include name="**/*" />
              <exclude name="backup/**" />
            </fileset>
          </delete>

          <echo message="Deploying console apps." />
          <copy todir="${copytodir}">
            <fileset basedir="..\">
              <include name="**/*"/>
              <exclude name="_PublishedWebsites/**" />
              <exclude name="${PublishedWebSiteName}/**" />
              <exclude name="DeploymentScripts/**" />
              <exclude name="logs/**" />
              <exclude name="version.txt" />
              <exclude name="*Tests.*"/>
            </fileset>
          </copy>

        </foreach>
    </if> <!--<if test="${WhatToDeploy=='ConsoleApp'}">-->
  </target>

  <property name="VersionTag" value="" />
  <target name="GetVersion">
    <if test="${file::exists('..\version.txt')}">
      <loadfile file="..\version.txt" property="VersionTag" />
      <property name="VersionTag" value="${string::trim(VersionTag)}"/>
      <echo message="Retrieved version ${VersionTag} from version.txt"/>
    </if>
  </target>

  <!-- Delete the SEER outage -->
  <target name="deleteOutage" if="${bool::parse(createSeerOutage)}">
    <tstamp property="currentdate" pattern="yyyy-MM-ddTHH:mm:ss.fff"/>
    <!-- Now that the app is deployed, we need to give DynaTrace time to realize our site is
         back up, before we tell SEER to end the maintenance window -->
    <sleep minutes="3"/>
    <deleteOutage outageName="${seerOutageSystemName} ${TargetEnv} Deployment"/>
  </target>
  
  <!-- BuildDate and deployDate are optional on the task calls below. If they are not present, -->
  <!-- the target Environment Dashboard web service will use the current date/time. -->
  <target name="envDashRecordDeploy" depends="environmentSettings, GetVersion" description="Task to record a deployment in the Environment Dashboard application.">
    <echo message="Calling Environment Dashboard web service to record deployment..."/>
    <recordDeployment
			webSvcUrl='https://EnvironmentDashboard.sentry.com/WebService/DashboardService.asmx'
			sourceSystemId='${envDashSysId}'
			environmentId='${envDashSiteEnvId}'
			buildTag='${VersionTag}'
			sendAlert='true'
			initiatorName="NAnt script ${project::get-name()}" 
      failonerror="false"/>
  </target>

</project>