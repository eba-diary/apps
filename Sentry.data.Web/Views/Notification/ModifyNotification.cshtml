@model Sentry.data.Web.NotificationModel
@{
    ViewBag.Title = "Create Notification";
}

<div class="topBanner">
    <div>
        <a class="backToList" href="/Notification/ManageNotification"><span class="glyphicon glyphicon-chevron-left"></span>Back to Previous Page</a>
    </div>
</div>

@if (Model.NotificationId == 0)
{
    <h1>Create Notification</h1>
}
else
{
    <h1>Edit Notification</h1>
}

<hr />
@*Attach class to form because Notification.js uses class here to submit form because of quill*@
@using (Html.BeginForm("SubmitNotification", "Notification", FormMethod.Post,htmlAttributes: new { @class = "modifyNotificationForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.CreateUser)
    @Html.HiddenFor(model => model.NotificationId, new { @class = "notificationId" })

    <div class="form-horizontal">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })



        <br />

        <div class="form-group">
            @Html.LabelFor((model) => model.ObjectId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ObjectId, Model.AllDataAssets, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.StartTime, new { @class = "form-control edit-dataset-row", @style = "width: 92%; display: inline-block;" })
                <span class="input-group-addon" style="display: inline-block;">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ExpirationTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.ExpirationTime, new { @class = "form-control edit-dataset-row", @style = "width: 92%; display: inline-block;" })
                <span class="input-group-addon" style="display: inline-block;">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor((model) => model.MessageSeverity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MessageSeverity, Model.AllSeverities, new { @class = "form-control edit-dataset-row" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor((model) => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor((model) => model.Title, new { @class = "form-control edit-dataset-row" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor((model) => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <!-- Quill editor container -->
                <div id="editor"> </div>

                <!-- Bogus TextArea which will hold ACTUAL message too be saved, notification.js will copy an encoded version here upon submit button -->
                @Html.TextAreaFor((model) => model.Message, htmlAttributes: new { @class = "messageEncoded", @style = "display:none" })
            </div>
        </div>
        <div class="form-group">
            <span class="text-muted"><em>** Fields in <b>Bold</b> are Required</em></span>
        </div>
        <br />
        <div class="form-group">
            <div>
                <input value="Submit" class="btn btn-primary" onclick="data.Notification.SubmitChanges() "/>
                <a class="btn btn-warning" href="/Notification/ManageNotification">Cancel</a>
            </div>

        </div>

        

    </div>
}
@section Scripts {

    @Scripts.Render("~/bundles/quill")

    <script type="text/javascript">

        $(function () {
            $('#StartTime').datetimepicker();
            $('#ExpirationTime').datetimepicker();

            data.Notification.InitQuill();
        });

    </script>
}