@{
    Sentry.data.Core.DataAsset dataAsset = ViewBag.DataAsset;
    string DisplayName;
    string arch = "";
    string guide = "";
    if (ViewBag.IsLine == true)
    {
        ViewBag.Title = ViewBag.LineName + " Lineage";
        DisplayName = ViewBag.LineName;
    }
    else
    {
        ViewBag.Title = dataAsset.DisplayName + " Lineage";
        DisplayName = dataAsset.DisplayName;
        arch = "http://sharepoint.sentry.com/it/DataArch/_layouts/15/VisioWebAccess/VisioWebAccess.aspx?id=/it/DataArch/Shared%20Documents/Data%20Services%20Architecture%20Diagrams/" + Model.ArchLink;
    }

    string disabled;
}

<style>
    _:-ms-lang(x), .lineageRow {
        padding: 15px 10px 15px 10px;
    }
</style>

@Html.HiddenFor(x => dataAsset.Name)

<!-- Data Asset Header -->
@{
    if (ViewBag.IsLine == false)
    {
        foreach (var item in dataAsset.AssetNotifications)
        {
            <div class="alert alert-dismissable alert-@item.MessageSeverityTag.ToLower()" style="text-align: center;">
                <button type="button" class="close" data-dismiss="alert">×</button>
                @Html.Raw(@item.DisplayMessage)
            </div>
        }
    }
}
<div class="page-header indexHeader">
    <div class="row ml-1">
        <img src="~/Images/Icons/DataAssetsBlue.svg" class="assetImg leftFloat hidden-xs" />
        <div class="indexName">
            <h2 class="pt-3 daName">@DisplayName</h2>
        </div>

        @if (ViewBag.IsLine == false)
        {
        <div class="ml-auto">
            <ul class="nav nav-pills mt-4">
                <li class="nav-item"><a class="nav-link" href="~/DataAsset/@dataAsset.Name">Home</a></li>

                @{ disabled = (dataAsset.DisplayName == "SERA PL" || dataAsset.DisplayName == "PL Policy ODS") ? "" : "disabled"; }
                <li class="@disabled nav-item"><a class="nav-link" href="/Lineage/Personal Lines/@dataAsset.Name">Lineage</a></li>

                @{ disabled = (dataAsset.ArchLink != null) ? "" : "disabled"; }
                <li class="@disabled nav-item"><a class="nav-link" href="@arch" target="_blank">Arch Diagrams</a></li>

                @{ disabled = (dataAsset.DataModelLink != null) ? "" : "disabled"; }
                <li class="@disabled nav-item"><a class="nav-link" href="@Url.Action("DataModel", "ExternalFile", new { dataModelName = dataAsset.DataModelLink, filename = "index.htm" })" target="_blank">Data Model</a></li>

                @{ disabled = (dataAsset.GuideLink != null) ? "" : "disabled"; }
                <li class="@disabled nav-item"><a class="nav-link" href="@Model.GuideLink" target="_blank">Consumer Guide</a></li>

                @{ disabled = (dataAsset.Contact != null) ? "" : "disabled"; }
                <li class="@disabled nav-item"><a class="nav-link" href="mailto:@Model.Contact">Contact Us</a></li>
            </ul>
        </div>

        }
    </div>
    @if (ViewBag.IsLine == true)
    {
        <div class="visible-xs">
            <button type="button" class="btn btn-lg btn-default daHamburger" data-toggle="collapse" data-target=".navbar-responsive-collapse">
                <i class="icon-hamburger"></i>
            </button>
        </div>

        <div class="visible-xs daCollapse">
            <div class="navbar-collapse collapse navbar-responsive-collapse">
                <ul class="nav navbar-nav">
                    @{ disabled = (dataAsset.DisplayName == "SERA PL" || dataAsset.DisplayName == "PL Policy ODS") ? "" : "disabled"; }
                    <li class="@disabled"><a href="/Lineage/Personal Lines/@dataAsset.Name">Lineage</a></li>

                    @{ disabled = (dataAsset.ArchLink != null) ? "" : "disabled"; }
                    <li class="@disabled"><a href="@arch" target="_blank">Arch Diagrams</a></li>

                    @{ disabled = (dataAsset.DataModelLink != null) ? "" : "disabled"; }
                    <li class="@disabled"><a href="@Url.Action("DataModel", "ExternalFile", new { dataModelName = dataAsset.DataModelLink, filename = "index.htm" })" target="_blank">Data Model</a></li>

                    @{ disabled = (dataAsset.GuideLink != null) ? "" : "disabled"; }
                    <li class="@disabled"><a href="@Model.GuideLink" target="_blank">Consumer Guide</a></li>

                    @{ disabled = (dataAsset.Contact != null) ? "" : "disabled"; }
                    <li class="@disabled"><a href="mailto:@Model.Contact">Contact Us</a></li>
                </ul>
            </div>
        </div>
    }

</div>

<style>
    .disabled {
        pointer-events: none;
        cursor: not-allowed;
    }
</style>

<div id="filterRow" class="row">
    <div class="col-lg-4">
        <h4>Business Term</h4>
        <select class="form-control select2" data-bind="options: availableDataObjectFields, value: selectedDataObjectField,
                optionsDisableDefault: false, select2: { placeholder: 'Select an option', allowClear: true, selectOnClose: false, closeOnSelect: true }"
                id="dataObjectFields"></select>
    </div>
    <div class="col-lg-4">
        <h4>Consumption Layer</h4>
        <select class="form-control select2" data-bind="options: availableDataElements, value: selectedDataElement,
                optionsDisableDefault: false, select2: { placeholder: 'Select an option', allowClear: true, selectOnClose: false, closeOnSelect: true }"
                id="dataElements"></select>
    </div>
    <div class="col-lg-4">
        <h4>Table</h4>
        <select class="form-control select2" data-bind="value: selectedDataObject, options: availableDataObjects,
                optionsDisableDefault: false, select2: { placeholder: 'Select an option', allowClear: true, selectOnClose: false, closeOnSelect: true }"
                id="dataObjects"></select>
    </div>
</div>

<hr />
<div class="row">
    <div class="col-lg-12">
        <input type="button" value="Show All Layers" class="btn btn-xs btn-info"  style="display:inline-block;" data-bind="click : ToggleLayersON, visible : ShowAllLayers() === false" />
        <input type="button" value="Hide All Layers" class="btn btn-xs btn-info"  style="display:inline-block;" data-bind="click : ToggleLayersOFF, visible : ShowAllLayers() === true" />

        @*<input type="button" value="Collapse Middle Layers" class="btn btn-xs btn-info" onclick="CollapseLayers();" style="display:inline-block;" />*@
        <input type="button" value="Toggle Hidden Layers" class="btn btn-xs btn-warning" style="display:inline-block;" data-bind="click : ToggleHiddenRows"/>
        <div class="legendDiv">
            <span class="legend databases">Database Tables and Views</span>
            <span class="legend businessObjects">Business Objects Universe</span>
            <span class="legend cubes">Cubes</span>
            <span class="legend hiddenLegend" style="display: none;">Hidden Rows</span>
        </div>
    </div>
</div>
<hr />

<div data-bind="visible : hasBusinessTerm">
    <h6 data-bind="text : selectedDataObjectField"></h6>
    <span data-bind="text: businessTermDescription"></span>
    <hr />
</div>

<div id="filterSpinner" data-bind="visible: SpinnerOn">
    <div class="sentry-spinner-container" style=" width: 1166px;">
        <span class="sentry-spinner" style="height:100px"></span>
        <div id="filterText">
            Please Select An Option Above ...
        </div>
    </div>
</div>
<div id="lineagePanel">
    <ul data-bind="template: {name: 'TopTemplate' , foreach: lineage}" style="list-style-type: none;margin-left:0px;padding-left: 15px;"></ul>
</div>



<script type="text/html" id="TopTemplate">
    <li data-bind="css: LayerInfo">
        <div class="lineageRow" data-bind="css: Color">
            <button type="button" class="btn btn-xs p-1 h-50 align-self-center" style="display: inline-block;  margin-bottom: 6px;" data-bind="click: ToggleChildren, visible: HasChildren, css : ButtonClass">
                <span id="icon_" class=""  data-bind="css : ButtonSpanClass"></span>
            </button>
            <span style="margin-left: 25px;" data-bind="visible: HasChildren() === false"> </span>

            @*  This is the old button.  That didn't work.
                <button type="button" class="btn btn-xs btn-success btnShowChildren" style="display: inline-block;  margin-bottom: 6px;" data-bind="enable: HasChildren">
                <span id="icon_" class="glyphicon glyphicon-plus"></span>
            </button>*@
            <div class="Source">
                <span class="SourceElement_NME" data-bind="text : DataElement_NME"></span>
                <span class="SourceObject_NME" data-bind="text : DataObject_NME"></span>
                <span class="SourceField_NME" data-bind="text : DataObjectField_NME"></span>
                <span class="LayerCount" data-bind="text : Layer" style="display: inline-block; margin-right: 10px; float:right;"></span>
                <input type="button" value="Show Details" class="btn btnShowDetails btn-xs btn-info" style="display: inline-block; margin-right: 10px; float:right;">
                <div class="extension bg_gray csv" data-bind="visible: HasTransform" style="display: inline-block; margin-right: 10px; float:right;">
                    <span>Transformation Available</span>
                </div>

                <div>
                    <div class="noDetails" style="display: none;">
                        <hr>
                        <span><b>Description : </b></span>
                        <span>There currently is no description for this object.</span>
                        <hr>
                        <div data-bind="visible: HasTransform">
                            <span><b>Transformation Text : </b></span>
                            <span data-bind="text : Transformation_TXT"></span>
                        </div>
                    </div>
                    <div class="detailsPanel" style="display: none;">
                        <hr>
                        <span><b>Table Description : </b></span>
                        <span class="DataObject_DSC"></span>
                        <hr>
                        <span><b>Field Description : </b></span>
                        <span class="DataObjectField_DSC"></span>
                        <hr>
                        <span><b>Transformation Text : </b></span>
                        <span data-bind="text : Transformation_TXT"></span>
                    </div>
                </div>
            </div>
        </div>

        <ul data-bind=" template: {name:  'TopTemplate' , foreach:  Sources }, visible: ShowChildren" style="list-style-type: none;margin-left:0px;padding-left: 40px;"></ul>
    </li>
</script>

<style>

    .legendDiv {
        display: inline-block;
        background-color: white;
        float: right;
        border-radius: 10px;
        margin-top: -5px;
        margin-bottom: -5px;
    }

    .legend {
        display: inline-block;
        border: 1px gray solid;
        padding: 5px;
        border-radius: 10px;
    }

    .hiddenLegend {
        display: inline-block;
        background-color: lightgray;
    }

    .layer:before {
        /*Using a Bootstrap glyphicon as the bullet point*/
        content: "\e095";
        font-family: 'Glyphicons Halflings';
        font-size: 14px;
        float: left;
        margin-top: 20px;
        margin-left: -30px;
        color: gray;
        transform: scaleY(-1);
        -moz-transform: scaleY(-1);
        -webkit-transform: scaleY(-1);
        -ms-transform: scaleY(-1);
    }

    .layer {
        display: block;
    }

    .businessObjects {
        background-color: rgba(137,171,227,0.5);
    }

    .cubes {
        background-color: rgba(229,114,0,0.5);
    }

    .databases {
        background-color: rgba(187,133,171,0.5);
    }

    .tab {
        float: right;
    }


    .rootTab {
        float: right;
        width: calc(100%);
    }

        .rootTab .Source {
            width: calc(100% - 42px);
        }

    .icon-flipped {
        transform: scaleY(-1);
        -moz-transform: scaleY(-1);
        -webkit-transform: scaleY(-1);
        -ms-transform: scaleY(-1);
    }

    .lineageRow {
        padding-left: 10px;
        border-radius: 10px;
        margin-bottom: 5px;
    }

    .Source {
        background-color: white;
        width: calc(100% - 55px);
        padding: 10px 10px 6px;
        display: inline-block;
        border-radius: 10px;
        -webkit-margin-before: 1em;
        -webkit-margin-after: 1em;
        -webkit-margin-start: 0px;
        -webkit-margin-end: 0px;
    }

        .Source p {
            color: #003DA5;
        }

        .Source span:first-child {
            margin-left: 0px;
        }

        .Source span {
            margin-left: 10px;
        }

    .hiddenClick {
        cursor: pointer;
    }
</style>





@section Scripts {
    <script>

        var tabLength = 40;
        var Line_CDE;
        var DataAsset_ID;

        function ToggleHiddenRowsCss(justStyle) {

            if ($('.hiddenLayer').children('div').is(":visible") || justStyle) {
                ;
                $($('#lineagePanel').find('li')).each(function () {
                    if ($(this).attr('class') != 'layer0') {
                        if ($(this).attr('class') !== undefined) {
                            var currentIndex = $(this).attr('class').substring(5);

                            var closest = $($(this).parent()).closest('li:not(".hiddenLayer")');

                            if ($(closest).attr('class') !== undefined) {
                                var indexToBe = $(closest).attr('class').substring(5);

                                var a = '-' + (((currentIndex - 1) - indexToBe) * tabLength) + 'px';

                                $(this).css('margin-left', a);
                            }
                        }
                    }

                });
            } else {
                $($('#lineagePanel').find('li')).each(function () {
                    if ($(this).attr('class') != 'layer0') {
                        $(this).css('margin-left', '0px');
                    }
                });
            }

            if (!justStyle) {
                $('.hiddenLayer').children('div').toggle();
                $('.hiddenLegend').toggle();
            }
        }

        function CollapseLayers() {

            if (!$('.hiddenLayerText').length > 0) {
                $('.layer0').each(function () {
                    var count;

                    $($(this).find('ul')).each(function () {
                        if (!$(this).has('li').length) {

                            $(this).parent().parent().children('li').children('div').show();


                            var currentIndex = $(this).parent().parent().parent().parent().children('li').attr('class').substring(5);
                            var indexToBe = 1;
                            var a = '-' + (((currentIndex - 1) - indexToBe) * tabLength) + 'px';

                            $(this).parent().parent().parent().parent().children('li').css('margin-left', a);
                            $(this).parent().parent().parent().parent().children('li').children('div').show();

                            count = $(this).parent().parent().parent().parent().children('li').children('div').children('.Source').children('.LayerCount').text();

                        } else {
                            $(this).children('li').children('div').hide();
                        }
                    });

                    var layer = "li[class*=" + "layer" + count + "]";
                    $('<a class="hiddenLayerText">Layers 1 through ' + (count - 1) + ' are hidden.  Click here to view them all.</a>').insertBefore($(this).find(layer).children('div')[0]);

                });
            } else {
                $('.hiddenLayerText').remove();
                $('.layer0').each(function () {
                    $($(this).find('ul')).each(function () {
                        if (!$(this).has('li').length) {

                            $(this).parent().parent().children('li').children('div').show();
                            $(this).parent().parent().parent().parent().children('li').css('margin-left', '0px');
                            $(this).parent().parent().parent().parent().children('li').children('div').show();

                        } else {
                            $(this).children('li').children('div').show();
                        }
                    });
                });
            }
        }


        $(document).on('click', '.btnShowDetails', function () {

            var url = "/api/v1/lineage/description?LineCDE=" + Line_CDE + "&DataAsset_ID=" + DataAsset_ID;
            if ($($(this).parent().children('.SourceElement_NME')[0]).text()) {
                url += "&DataElement_NME=" + $($(this).parent().children('.SourceElement_NME')[0]).text();
            }

            if ($($(this).parent().children('.SourceObject_NME')[0]).text()) {
                url += "&DataObject_NME=" + $($(this).parent().children('.SourceObject_NME')[0]).text();
            }

            if ($($(this).parent().children('.SourceField_NME')[0]).text()) {
                url += "&DataObjectField_NME=" + $($(this).parent().children('.SourceField_NME')[0]).text();
            }

            var DataObject_DSC_span = $($(this).parent().children('div').children('.detailsPanel').children('.DataObject_DSC')[0]);
            var DataObjectField_DSC_span = $($(this).parent().children('div').children('.detailsPanel').children('.DataObjectField_DSC')[0]);

            var noDetails = $($(this).parent().children('div').children('.noDetails')[0]);

            var panel = $($(this).parent().children('div').children('.detailsPanel'));

            if ($(this).attr("value") == "Show Details") {
                $(this).attr("value", "Hide Details");

                DataObject_DSC_span.empty();
                DataObjectField_DSC_span.empty();

                $.ajax({
                    type: "GET",
                    url: encodeURI(url),
                    dataType: "json",
                    success: function (result) {
                        console.log(result);
                        panel.toggle();

                        DataObjectField_DSC_span.append(result.DataObjectField_DSC);
                        DataObject_DSC_span.append(result.DataObject_DSC);
                    },
                    error: function (e) {
                        noDetails.toggle();
                    }
                });
            }
            else {
                $(this).attr("value", "Show Details");
                noDetails.hide();
                panel.hide();
            }

        });

        $(document).on('click', '.btnShowChildren', function () {
            console.log(this);
            $($(this).children('span')).toggleClass("icon-plus icon-minus");

            var row = $(this).parent().parent();

            var childRow = $(row).children("ul").children("li");
            $(row).children("ul").children("li").toggle();

            if ($(childRow).hasClass('hiddenLayer')) {
                $($(row).children()).find('li:has(".hiddenLayer")').show();

                $($(row).children()).find('li:not(".hiddenLayer")').first().show();
            }
        });



        ko.bindingHandlers.select2 = {
            init: function (el, valueAccessor, allBindingsAccessor, viewModel) {
                ko.utils.domNodeDisposal.addDisposeCallback(el, function () {
                    $(el).select2('destroy');
                });

                var allBindings = allBindingsAccessor(),
                    select2 = ko.utils.unwrapObservable(allBindings.select2);

                $(el).select2(select2);
            },
            update: function (el, valueAccessor, allBindingsAccessor, viewModel) {
                var allBindings = allBindingsAccessor();

                if ("value" in allBindings) {
                    if ((allBindings.select2.multiple || el.multiple) && allBindings.value().constructor != Array) {
                        $(el).val(allBindings.value().split(',')).trigger('change');
                    }
                    else {
                        $(el).val(allBindings.value()).trigger('change');
                    }
                } else if ("selectedOptions" in allBindings) {
                    var converted = [];
                    var textAccessor = function (value) { return value; };
                    if ("optionsText" in allBindings) {
                        textAccessor = function (value) {
                            var valueAccessor = function (item) { return item; }
                            if ("optionsValue" in allBindings) {
                                valueAccessor = function (item) { return item[allBindings.optionsValue]; }
                            }
                            var items = $.grep(allBindings.options(), function (e) { return valueAccessor(e) == value });
                            if (items.length == 0 || items.length > 1) {
                                return "UNKNOWN";
                            }
                            return items[0][allBindings.optionsText];
                        }
                    }
                    $.each(allBindings.selectedOptions(), function (key, value) {
                        converted.push({ id: value, text: textAccessor(value) });
                    });
                    $(el).select2("data", converted);
                }
                $(el).trigger("change");
            }
        };


        function Lineage(data, vm) {
            var self = this;

            self.Layer = ko.observable(data.Layer);
            self.LineageID = ko.observable(data.LineageID);
            self.SourceElement_NME = ko.observable(data.SourceElement_NME);
            self.SourceObject_NME = ko.observable(data.SourceObject_NME);
            self.SourceField_NME = ko.observable(data.SourceField_NME);
            self.Display_IND = ko.observable(data.Display_IND);

            self.Sources = ko.observableArray($.map(data.Sources, function (item) { return new Lineage(item, vm) }));

            self.Toggled = ko.observable(false);

            self.ShowChildren = ko.computed(function () {
                if (self.Toggled() || (self.Display_IND() === "N" && vm.ShowHiddenLayers() === false) || vm.ShowAllLayers()) {
                    return true;
                } else {
                    return false;
                }
            });

            self.ShowSelf = ko.computed(function () {
                if (self.Toggled() || (self.Display_IND() === "N" && vm.ShowHiddenLayers() === false) || vm.ShowAllLayers()) {
                    return true;
                } else {
                    return false;
                }
            });

            self.ToggleChildren = function () {
                if (self.Toggled()) {
                    self.Toggled(false);
                } else {
                    self.Toggled(true);
                }
            }

            self.Transformation_TXT = ko.observable(data.Transformation_TXT);
            self.DataAsset_ID = ko.observable(data.DataAsset_ID);
            self.DataElement_NME = ko.observable(data.DataElement_NME);
            self.DataObject_NME = ko.observable(data.DataObject_NME);
            self.DataObject_DSC = ko.observable(data.DataObject_DSC);
            self.DataObjectCode_DSC = ko.observable(data.DataObjectCode_DSC);
            self.DataObjectDetailType_VAL = ko.observable(data.DataObjectDetailType_VAL);
            self.DataObjectField_NME = ko.observable(data.DataObjectField_NME);
            self.DataObjectField_DSC = ko.observable(data.DataObjectField_DSC);


            self.ButtonClass = ko.computed(function () {

                if (vm.ShowAllLayers()) {
                    return 'disabled';
                } else {
                    return 'btn-success';
                }
            });

            self.ButtonSpanClass = ko.computed(function () {
                if (self.Toggled() || vm.ShowAllLayers() || self.ShowChildren()) {
                     return 'icon-minus';
                } else {
                    return 'icon-plus';
                }
            });

            self.LayerInfo = ko.computed(function () {
                var output = "";
                if (data.Display_IND == 'N') {
                    output += "hiddenLayer ";
                }

                if (data.Layer == 0) {
                    output += "layer" + data.Layer;
                } else {
                    output += "layer" + data.Layer;
                }
                return output;
            });

            self.HasChildren = ko.computed(function () {
                if (data.Sources.length > 0) {
                    return true;
                } else {
                    return false;
                }
            });

            self.HasTransform = ko.computed(function () {
                if (data.Transformation_TXT.length > 1) {
                    return true;
                } else {
                    return false;
                }
            });


            self.Color = ko.computed(function () {
                var output = "";

                if (data.Layer == 0) {
                } else {
                    output += "layer ";
                }

                switch (data.DataObjectCode_DSC) {
                    case "Cube":
                        output += "cubes";
                        break;
                    case "BO Class":
                        output += "businessObjects";
                        break;
                    case "Table":
                    case "View":
                    default:
                        output += "databases";
                        break;
                }
                return output;

            });

        }

        var loaded = false;

        function ViewModel() {
            var self = this;


            function asyncComputed(evaluator, owner) {
                var result = ko.observable();

                ko.computed(function () {
                    // Get the $.Deferred value, and then set up a callback so that when it's done,
                    // the output is transferred onto our "result" observable
                    evaluator.call(owner).done(result);
                });

                return result;
            }

            self.ShowAllLayers = ko.observable(false);
            self.ShowHiddenLayers = ko.observable(false);

            self.ToggleLayersON = function () {
                self.ShowAllLayers(true);
            }

            self.ToggleLayersOFF = function () {
                self.ShowAllLayers(false);
            }



            self.ToggleHiddenRows = function () {

                ToggleHiddenRowsCss(false);

                if (self.ShowHiddenLayers()) {
                    self.ShowHiddenLayers(false);
                } else {
                    self.ShowHiddenLayers(true);
                }

            }

            self.lineage = ko.observableArray();

            self.availableDataObjectFields = ko.observableArray();

            self.availableDataElements = ko.observableArray();

            self.availableDataObjects = ko.observableArray();

            self.selectedDataObjectField = ko.observable();
            self.selectedDataObject = ko.observable();
            self.selectedDataElement = ko.observable();

            self.businessTermDescription = ko.observable();
            self.hasBusinessTerm = ko.computed(function () {
                if (self.businessTermDescription() && self.selectedDataObjectField()) {
                    return true;
                } else {
                    return false;
                }

            });

            self.SpinnerOn = ko.computed(function () {

                //console.log('1: ' + self.selectedDataElement() + ' ' + self.selectedDataElement() == null || self.selectedDataElement() == '' ? 0 : 1)
                //console.log('2: ' + self.selectedDataObject() + ' ' + self.selectedDataObject() == null || self.selectedDataObject() == ''? 0 : 1)
                //console.log('3: ' + self.selectedDataObjectField() + ' ' + self.selectedDataObjectField() == null || self.selectedDataObjectField() == ''? 0 : 1)
                //console.log('4: ' + $('#dataElements').val() === [] || $('#dataElements').val() == null || $('#dataElements').val().length === 0 ? 0 : 1)
                //console.log('5: ' + $('#dataObjects').val() === [] || $('#dataObjects').val() == null ||$('#dataObjects').val().length === 0 ? 0 : 1)
                //console.log('6: ' + $('#dataObjectFields').val() === [] || $('#dataObjectFields').val() == null || $('#dataObjectFields').val().length === 0 ? 0 : 1)

                //i have to watch each of the three selects for nullability and empty arrays and the knockout object for its existance

                //console.log('7: ' + self.lineage().length)

                if (self.lineage().length > 0 && $('#lineagePanel').is(":visible")) {
                    return false;
                } else if (
                    (self.selectedDataElement() == null || self.selectedDataElement() == '')
                    && (self.selectedDataObject() == null || self.selectedDataObject() == '')
                    && (self.selectedDataObjectField() == null || self.selectedDataObjectField() == '')
                    && ($('#dataElements').val() === [] || $('#dataElements').val() == null || $('#dataElements').val().length === 0)
                    && ($('#dataObjects').val() === [] || $('#dataObjects').val() == null || $('#dataObjects').val().length === 0)
                    && ($('#dataObjectFields').val() === [] || $('#dataObjectFields').val() == null || $('#dataObjectFields').val().length === 0)) {

                    $('#filterText').text('Please Select An Option Above ...');
                    return true;
                } else {
                    $('#filterText').text('Please Wait ...');
                    return true;
                }

            });

            DropdownSelects(true);

            function DropdownSelects(first) {

                $('#lineagePanel').hide();

                var baseUrlParameters = '';

                var elementFromURL = "&DataElement_NME=" + decodeURI(location.href.substr(location.href.lastIndexOf('/') + 1));

                var dataElementParameter = '';

                if (elementFromURL && first && $('#dataAsset_Name').val() != decodeURI(location.href.substr(location.href.lastIndexOf('/') + 1))) {
                    dataElementParameter = elementFromURL;
                } else {
                    dataElementParameter = "&DataElement_NME=" + encodeURIComponent($('#dataElements').val());
                }

                var dataObjectParameter = "&DataObject_NME=" + encodeURIComponent($('#dataObjects').val());
                var dataFieldParameter = "&DataObjectField_NME=" + encodeURIComponent($('#dataObjectFields').val());



                if (first) {
                    var url = decodeURI(location.href);


                    if (url.includes("Personal Lines")) {
                        Line_CDE = "PL";
                    } else {
                        Line_CDE = "CL";
                    }

                    if (url.includes("SERAPL")) {
                        DataAsset_ID = 2;
                    } else if (url.includes("PLPolicyODS")) {
                        DataAsset_ID = 6;
                    }
                }

                if (DataAsset_ID) {
                    baseUrlParameters = "?LineCDE=" + Line_CDE + "&DataAsset_ID= " + DataAsset_ID;
                } else {
                    baseUrlParameters = "?LineCDE=" + Line_CDE;
                }

                var url = "/api/v1/lineage/businessTerms" + baseUrlParameters;

                if (($('#dataElements').val() && !first) || (elementFromURL && first)) {
                    url += dataElementParameter;
                }
                if ($('#dataObjects').val() && !first) {
                    url += dataObjectParameter;
                }

                $.getJSON(encodeURI(url), function (allData) {
                    allData.push('');
                    self.availableDataObjectFields(allData);

                    var url2 = "/api/v1/lineage/lineageTables" + baseUrlParameters;

                    if ($('#dataElements').val() && !first) {
                        url2 += dataElementParameter;
                    }
                    if ($('#dataObjectFields').val() && !first) {
                        url2 += dataFieldParameter;
                    }

                    $.getJSON(encodeURI(url2), function (allData2) {
                        allData2.push('');
                        self.availableDataObjects(allData2);


                        if (first) {
                            $('.select2').val([]).trigger('change');
                            if (elementFromURL) {
                                self.selectedDataElement(decodeURI(decodeURI(location.href.substr(location.href.lastIndexOf('/') + 1))));
                            }
                        }
                    });

                    var url3 = "/api/v1/lineage/layers" + baseUrlParameters;

                    if ($('#dataObjects').val() && !first) {
                        url3 += dataObjectParameter;
                    }
                    if ($('#dataObjectFields').val() && !first) {
                        url3 += dataFieldParameter;
                    }

                    $.getJSON(encodeURI(url3), function (allData3) {
                        allData3.push('');
                        self.availableDataElements(allData3);

                        if (first) {
                            if (elementFromURL) {
                                self.selectedDataElement(decodeURI(location.href.substr(location.href.lastIndexOf('/') + 1)));
                                $('#dataElements').val(decodeURI(location.href.substr(location.href.lastIndexOf('/') + 1))).trigger('change');
                            } else {
                                $('.select2').val([]).trigger('change');
                            }
                        }
                    });

                    var url4 = "/api/v1/lineage/lineage" + baseUrlParameters;

                    if ($('#dataElements').val()) {
                        url4 += dataElementParameter;
                    }
                    if ($('#dataObjects').val()) {
                        url4 += dataObjectParameter;
                    }
                    if ($('#dataObjectFields').val()) {
                        url4 += dataFieldParameter;
                    }

                    if (!first) {
                        $.getJSON(encodeURI(url4), function (allData4) {
                            var items = $.map(allData4, function (item) { return new Lineage(item, self) });
                            self.lineage(items);

                            $('.layer0').show();

                            $('#lineagePanel').show();

                            self.lineage.notifySubscribers();

                            $('.hiddenLayer').children('div').toggle();
                            $('<br />').insertBefore('.layer0')
                            ToggleHiddenRowsCss(true);

                            $('.hiddenLayer').children('div').css('background-color', 'lightgray');
                            // $('.hiddenLayer').children('div').css('opacity', '0.75');
                        });
                    }

                    var url6 = "/api/v1/lineage/businessTermDescription" + baseUrlParameters;

                    if ($('#dataObjectFields').val() && !first) {
                        url6 += dataFieldParameter;

                        $.getJSON(encodeURI(url6), function (allData6) {
                            self.businessTermDescription(allData6);
                        });
                    } else {
                    }

                });

                //THIS WILL RUN IF AND ONLY IF THERE IS A DATA ELEMENT IN THE URL.
                if (first && elementFromURL) {
                    var url5 = "/api/v1/lineage/lineage" + baseUrlParameters + elementFromURL;

                    $.getJSON(encodeURI(url5), function (allData) {
                        var items = $.map(allData, function (item) { return new Lineage(item) });
                        self.lineage(items);
                        $('.layer0').show();

                        $('#lineagePanel').show();
                        self.lineage.notifySubscribers();


                        $('.hiddenLayer').children('div').toggle();
                        $('<br />').insertBefore('.layer0');
                        ToggleHiddenRows(true);

                        $('.hiddenLayer').children('div').css('background-color', 'lightgray');
                    });
                }
            }


            $('.select2').on('select2:select', function (e) {
                DropdownSelects(false);
            });

            $('#dataObjectFields').on('select2:unselect', function (e) {
                $('#dataObjectFields').val([]);
                DropdownSelects(false);
            });
            $('#dataElements').on('select2:unselect', function (e) {
                $('#dataElements').val([]);
                DropdownSelects(false);
            });
            $('#dataObjects').on('select2:unselect', function (e) {
                $('#dataObjects').val([]);
                DropdownSelects(false);
            });
        };

        ko.applyBindings(new ViewModel());


    </script>
}