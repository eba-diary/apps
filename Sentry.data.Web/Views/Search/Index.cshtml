@using Sentry.data.Core.GlobalEnums;

@model Sentry.data.Web.SearchIndexModel

@{
    @Html.AntiForgeryToken()
}

<div id="search-pg-wrapper">

    <div class="row">

        @* filters *@
        <div class="hidden-xs hidden-sm col-md-3 col-lg-3">
            <div id="search-pg-filters">

                @*<p id="filter-by-label" style="display: none;">Filter by:</p>*@
                <div id="filterColumn" style="display:none;">
                    <!-- ko foreach: AllFilters -->
                    @* category header *@
                    <div class="panel panel-default dataset-list-filters">
                        <div class="panel-heading filterHead" data-bind="attr: { id: HeadId }">
                            <span class="filterCategoryName" data-bind="text : Name"></span>
                            <span class="glyphicon glyphicon-chevron-down rightFloat filterViewIcon" data-bind="attr: { id: HeadIcon }"></span>
                        </div>

                        @* foreach of the category filters *@
                        <div class="dataset-list-filter-category panel-body" data-bind="attr: {id : HeadHide }" style="display: none;">
                            <!-- ko if: (OrderedFilters().length > 0) -->
                            <ul class="list-unstyled ul-filter-list">
                                <!-- ko if: !ShowMore -->
                                <!-- ko foreach: OrderedFilters -->
                                <li class="list-unstyled li-filter-disabled filterList" data-bind="css: { notAllowed: Count() == 0 }">
                                    <label data-bind="attr: { id: id }">
                                        <input type="checkbox" class="filterChbx"
                                               data-bind="value: id, checked: window.vm.SelectedFilters, attr: { id: id, disabled: Count() == 0 }" />
                                        <strong data-bind="text : Title"></strong>
                                        <span class="filter-tile-count">(<!--ko text: Count--><!--/ko-->)</span>
                                    </label>
                                </li>
                                <!-- /ko -->
                                <!-- /ko -->

                                <!-- ko if: ShowMore -->
                                <!-- ko foreach: OrderedFilters -->
                                <li class="list-unstyled li-filter-disabled filterList" data-bind="visible: $index() < 6, css: { notAllowed: Count() == 0 }">
                                    <label data-bind="attr: { id: id }">
                                        <input type="checkbox" class="filterChbx"
                                                data-bind="value: id, checked: window.vm.SelectedFilters, attr: { id: id, disabled: Count() == 0 }" />
                                        <strong data-bind="text : Title"></strong>
                                        <span class="filter-tile-count">(<!--ko text: Count--><!--/ko-->)</span>
                                    </label>
                                </li>
                                <!-- /ko -->

                                <li data-bind="attr: {id : HiddenMore}">
                                    <!-- ko foreach: OrderedFilters -->
                                    <ul class="notNested">
                                        <li class="list-unstyled li-filter-disabled filterList" data-bind="visible: $index() >= 6, css: { notAllowed: Count() == 0 }">
                                            <label data-bind="attr: { id: id }">
                                                <input type="checkbox" class="filterChbx"
                                                        data-bind="value: id, checked: window.vm.SelectedFilters, attr: { id: id, disabled: Count() == 0 }" />
                                                <strong data-bind="text : Title"></strong>
                                                <span class="filter-tile-count">(<!--ko text: Count--><!--/ko-->)</span>
                                            </label>
                                        </li>
                                    </ul>
                                    <!-- /ko -->
                                </li>
                                <!-- /ko -->

                            </ul>
                            <!-- /ko -->
                            <!-- ko if: (OrderedFilters().length > 6 && ShowMore) -->
                            <a href="#" class="filterMore" data-bind="attr: { id:  HiddenId}">
                                <div class="glyphicon glyphicon-plus-sign inlineBlock moreIcon leftFloat" data-bind="attr : {id : IconMore}"></div>
                                <div class="leftFloat txt_filterMore" data-bind="attr: {id: TxtMore}">Show More</div>
                            </a>
                            <!-- /ko -->

                        </div>
                    </div>

                    <!-- /ko -->
                </div>

            </div>
        </div>

        @* main content *@
        <div class="col-xs-12 col-sm-12 col-md-9 col-lg-9">

            <div id="search-pg-content-wrapper">
                @* page title *@
                <div class="listHeadGroup">
                    <div data-bind="visible: IsShownForCurrentType('Datasets')" style="display: none;"><img src="~/Images/Icons/DatasetsBlue.svg" class="datasetImg leftFloat" /></div>
                    <div data-bind="visible: IsShownForCurrentType('BusinessIntelligence')" style="display: none;"><img src="~/Images/Icons/Business IntelligenceBlue.svg" class="datasetImg leftFloat" /></div>
                    <div data-bind="visible: IsShownForCurrentType('Datasets')" style="display: none;"><h1 class="htCenter datasetHeader">Datasets</h1></div>
                    <div data-bind="visible: IsShownForCurrentType('BusinessIntelligence')" style="display: none;"><h1 class="htCenter datasetHeader">Business Intelligence</h1></div>
                </div>

                @* spinner (shown until content loads) *@
                <div id="filterSpinner">
                    <div class="sentry-spinner-container" style="padding-top: 150px; margin-left: -80px;">
                        <span class="sentry-spinner"></span>
                    </div>
                </div>

                @* search box *@
                <div class="searchBoxDS  has-feedback has-feedback-left">
                    <input class="form-control searchTextDS text-box single-line" id="SearchText" placeholder="Search Datasets..." name="SearchText" type="text" data-bind="value: Query, valueUpdate: 'keyup', visible: IsShownForCurrentType('Datasets'), event: {'keyup': searchResults.toFirstPage }" autocomplete="off" style="display: none;">
                    <input class="form-control searchTextDS text-box single-line" id="SearchText" placeholder="Search Exhibits and Dashboards..." name="SearchText" type="text" data-bind="value: Query, valueUpdate: 'keyup', visible: IsShownForCurrentType('BusinessIntelligence')" autocomplete="off" style="display: none;">
                    <i class="form-control-feedback glyphicon glyphicon-search"></i>
                </div>

                @* filters/tiles (hidden by default until content loads *@
                <div id="dataColumn" style="display:none;">
                    <div id="DatasetItemList" class="dataset-list inlineBlock text-left">
                        <div>
                            <h4 class="found">
                                Active Filters:
                                <button type="button" class="btn btn-sm btn-primary" id="btnClearFilters" data-bind="click: clearFilters, enable: SelectedFilters().length !== 0">Clear Filters</button>
                            </h4>

                            <select multiple="" class="form-control select2-hidden-accessible"
                                    id="filterSelector" name="filterSelector" tabindex="-1" aria-hidden="true">
                                <!-- ko foreach: AllFilters -->
                                <optgroup data-bind="attr: {label: Name}">
                                    <!-- ko foreach: Filters -->
                                    <option data-bind="value: $data.id, text: $data.Title"></option>
                                    <!-- /ko -->
                                </optgroup>
                                <!-- /ko -->
                            </select>
                        </div>

                        <div id="search-tile-header">
                            @* number of items option *@
                            <div id="nbr-search-results-wrapper" class="float-l">
                                <div>Showing</div>
                                <div>
                                    <select id="search-results-choices" class="form-control" data-bind="event: { change: window.vm.limitSearchResults() }">
                                        <option value="15" selected>15</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="All">All</option>
                                    </select>
                                </div>
                                <div>results</div>
                            </div>

                            @* sorting control *@
                            <div id="sort-option-wrapper" class="float-r">
                                <div>Sort by</div>
                                <div>
                                    <select id="sort-results" class="form-control" data-bind="event: { change: window.vm.sortExhibits() }">
                                        @foreach (SelectListItem sortOption in Model.SortByOptions)
                                        {
                                            <option value="@sortOption.Value">@sortOption.Text</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <ul class="list-unstyled" id="listOfDatasets" data-bind="foreach: searchResults.pageItems">
                            <li class="ul-dataset-list-item borderSide_gray boxShadowSm" data-bind="css : BorderColor, click: TileClicked, attr: { title: PrimaryTitle }">
                                <div>
                                    <div data-bind="if: $index > 20"></div>
                                    <div class="category-type-wrap">
                                        <div class="glyphicon glyphicon-star btnFavorite disregardParentClick" id="btnFavorite" data-bind="attr: {data: DatasetId}, visible: IsFavorite" style="display: none" title="Click to toggle favorite"></div>
                                        <div class="glyphicon glyphicon-star-empty btnFavorite disregardParentClick" id="btnFavorite" data-bind="attr: {data: DatasetId}, visible: IsFavorite == false" style="display: none" title="Click to toggle favorite"></div>
                                        <div class="category-type" data-bind="css: BannerColor, attr: {title: AbbreviatedCategory}">
                                            <span data-bind="text: AbbreviatedCategory" />
                                        </div>
                                    </div>
                                    <div></div>
                                    <div class="dataset-list-content">
                                        <!-- ko foreach: DistinctFileExtensions -->
                                        <div class="extension bg_gray" data-bind="css : $data">
                                            <span data-bind="text: $data" />
                                        </div>
                                        <!-- /ko -->
                                        <span class="search-dataset-name" data-bind="text: DatasetName"></span>
                                        <!-- ko if: IsSecured-->
                                        <i class="glyphicon glyphicon-lock text-primary" data-toggle="tooltip" data-placement="bottom" title="Secure"></i>
                                        <!-- /ko -->
                                    </div>

                                    <div class="dataset-list-content">
                                        <div class="dataset-list-content-value ">
                                            <span data-bind="text: DatasetDesc"></span>
                                        </div>
                                    </div>
                                    <div class="dataset-list-content dataset-detail-content-info">
                                        <div>
                                            <!-- ko ifnot: Type === "RPT" -->
                                            <div class="SentryOwner col-lg-5 dataset-detail-content-info-row">
                                                <span class="bold ownerDate" data-bind="css : Color">Sentry Owner:</span>
                                                <span data-bind="text: SentryOwner"></span>
                                            </div>
                                            <div class="col-lg-5 dataset-detail-content-info-row">
                                                <span class=" bold ownerDate" data-bind="css : Color">Last Activity Date:</span>
                                                <span data-bind="text: ChangedDtm"></span>
                                            </div>
                                            <!-- /ko -->
                                            <!-- ko if: Type === "RPT" -->
                                            <div class="SentryOwner col-lg-12 dataset-detail-content-info-row">
                                                <span class="bold dataset-detail-contact-label" data-bind="css : Color">Refresh Frequency:</span>
                                                <span class="info-detail" data-bind="text: UpdateFrequency"></span>
                                            </div>
                                            <div class="contacts col-lg-10 dataset-detail-content-info-row">
                                                <span class="bold dataset-detail-contact-label" data-bind="css : Color">Contact:</span>
                                                <div class="info-detail">
                                                    <span class="info-detail" data-bind="text: ContactNames()"></span>
                                                    <span class="moreContacts info-detail" data-bind="text: moreContactInfo, attr: { title: AdditionalContacts}" title="Additional contact names"></span>
                                                </div>
                                            </div>
                                            <div class="col-lg-2 dataset-detail-content-info-row">
                                                <a href="#" class="home-tile-link-bi disregardParentClick" title="Click to view details">View Details ></a>
                                            </div>
                                            <!-- /ko -->
                                        </div>
                                    </div>
                                </div>
                            </li>
                        </ul>

                        <div id="search-tile-footer" class="text-right">

                            @* search results info display *@
                            <div id="search-results-wrapper" class="footer-container">
                                Results <span data-bind="text: searchResults.firstItemOnPage()"></span>-<span data-bind="text: searchResults.lastItemOnPage()"></span> of <span data-bind="text: searchResults.itemCount()"></span>
                            </div>

                            @* pagination controls *@
                            <div id="pagination-wrapper">
                                <ul class="pagination">
                                    @* button to take you directly to the first page *@
                                    <li data-bind="css: { disabled: searchResults.isFirstPage() }" class="previous disabled">
                                        <a href="#" aria-label="First" data-bind="click: searchResults.toFirstPage" title="First">&laquo;</a>
                                    </li>
                                    @* button to take you to the prevoius page *@
                                    <li data-bind="css: { disabled: !searchResults.hasPreviousPage() }" class="previous disabled">
                                        <a href="#" aria-label="Previous" data-bind="click: searchResults.toPreviousPage" title="Previous">&lt;</a>
                                    </li>

                                    @* loop through the pages, building a button for each *@
                                    <!-- ko foreach: searchResults.pages -->
                                    <li data-bind="css: { active: $data == $parent.searchResults.pageNumber() }">
                                        <a href="#" data-bind="text: $data, click: $parent.searchResults.pageNumber.bind($data)"></a>
                                    </li>
                                    <!-- /ko -->
                                    @* button to take you to the next page*@
                                    <li data-bind="css: { disabled: !searchResults.hasNextPage() }" class="next disabled">
                                        <a href="#" aria-label="Next" data-bind="click: searchResults.toNextPage" title="Next">&gt;</a>
                                    </li>
                                    @* button to take you directly to the last page *@
                                    <li data-bind="css: { disabled: searchResults.isLastPage() }" class="next disabled">
                                        <a href="#" aria-label="Last" data-bind="click: searchResults.toLastPage" title="Last">&raquo;</a>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <hr>
                        <!-- ko if: searchResults().length == 0 -->
                        <div>
                            <h4>
                                No results given the active filters and/or search text.  Please refine your search parameters.
                            </h4>
                        </div>
                        <!-- /ko -->
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>


@section Scripts {
    <script>
        $(function () {

            $("#filterSelector").select2({
                selectOnClose: false,
                closeOnSelect: false,
                templateSelection: formatTag,
                placeholder: "There are no active filters.  Pick an option to the left or click here to begin filtering.",
            });

            //This is fed into the Select2 Box to format tags.
            function formatTag(tag) {
                var cat = "";

                for (var i = 0; i < vm.AllFilters().length; i++) {
                    for (var j = 0; j < vm.AllFilters()[i].Filters().length; j++) {
                        if (vm.AllFilters()[i].Filters()[j].id === tag.id) {
                            cat = vm.AllFilters()[i].Filters()[j].Category;
                            break;
                        }
                    }
                    if (cat !== "") {
                        break;
                    }
                }

                var $state = $(
                    '<span class="' + cat.split(" ").join("_").toLowerCase() + '_filter">' + cat + " : " + tag.text + '</span>'
                );

                return $state;
            };


            $('#filterSelector').on('select2:select', function (e) {
                
                var data = e.params.data;

                // push the selected filter Id to the observable array
                window.vm.SelectedFilters.push(data.id);
            });

            $('#filterSelector').on('select2:unselect', function (e) {
                
                var data = e.params.data;

                // remove the selected filter Id from the observable array
                window.vm.RemoveSelection(data.id);
            });
        });

        function filterForCount(selectedFilters, filtersToRemove) {
            //build my selected fitler (all filters but Business Unit)
            ko.utils.arrayForEach(filtersToRemove, function (item) {
                selectedFilters.splice(selectedFilters.indexOf(item.id), 1);
            });

            return FilterExhibits(window.vm.datasets(), "0", selectedFilters);
        }

        function Dataset(data) {
            var self = this;

            self.DatasetDesc = data.DatasetDesc;
            self.SentryOwner = data.SentryOwnerName;
            self.DatasetId = data.DatasetId;

            self.DatasetInformation = data.DatasetInformation;
            self.DatasetName = data.DatasetName;
            self.Category = data.Category;
            self.AbbreviatedCategory = data.AbbreviatedCategory;
            self.IsSecured = data.IsSecured;
            self.Type = data.Type;

            self.PrimaryTitle = ko.computed(function () {
                if (self.Type === "RPT") {
                    return "Click here to open.";
                } else {
                    return "Click here to go to the Dataset Detail Page.";
                }
            });

            self.TileClicked = function (item, e) {

                if ($(e.target).hasClass("btnFavorite") === true) {
                    return false;
                }
                else if (self.Type === "RPT") {
                    //What is the primary function of clicking on the tile if its a Report
                    //And you did not click on a button.
                    if ($(e.target).hasClass("disregardParentClick") === false) {
                        if (self.LocationType === "file") {
                            vm.GetFile(self);
                        }
                        else {
                            var win = window.open(data.Location, '_blank');
                            if (win) {
                                //Browser has allowed it to be opened
                                win.focus();
                            } else {
                                //Browser has blocked it
                                alert('Please allow popups for this website');
                            }
                        }
                    }
                    //And you did click on the button
                    else {

                        window.location.href = "/BusinessIntelligence/Detail/" + data.DatasetId;
                    }


                } else {
                     //What is the primary function of clicking on the tile if its a Dataset.
                    window.location.href = "/Dataset/Detail/" + data.DatasetId;
                }

                return false;
            };

            self.CreatedDtm = data.CreatedDtm;
            self.ChangedDtm = data.ChangedDtm;
            self.Color = data.Color;

            self.BannerColor = data.BannerColor;
            self.BorderColor = data.BorderColor;

            self.Categories = data.Categories;
            self.DistinctFileExtensions = data.DistinctFileExtensions;
            self.BusinessUnits = data.BusinessUnits;
            self.DatasetFunctions = data.DatasetFunctions;

            self.PageViews = data.PageViews;
            self.Downloads = data.Downloads;

            self.Location = data.Location;
            self.LocationType = data.LocationType;
            self.Tags = data.Tags;
            self.UpdateFrequency = data.UpdateFrequency;
            self.CanEditDataset = data.CanEditDataset;
            self.IsFavorite = data.IsFavorite;
            self.ContactDetails = data.ContactDetails;
            self.AdditionalContacts = "";
            self.moreContactInfo = "";

            self.ContactNames = ko.computed(function () {
                if (self.ContactDetails != null && self.ContactDetails.length > 0) {
                    var moreItems = self.ContactDetails.length;
                    var maxLength = 80;
                    var result = "";
                    var firstMoreItem = true;
                    ko.utils.arrayForEach(self.ContactDetails, function (item) {
                        if ((result.length + item.Name.length) <= maxLength) {
                            if (moreItems < self.ContactDetails.length) { result += ", " + item.Name; }
                            else { result += item.Name; }
                            moreItems -= 1;
                        }
                        else {
                            if (firstMoreItem) { self.AdditionalContacts += item.Name; firstMoreItem = false;}
                            else { self.AdditionalContacts += ", " + item.Name; }
                        }
                    })

                    if (moreItems > 0) { self.moreContactInfo = " and " + moreItems + " more"; }

                    return result;
                }
                else {
                    return "No contacts defined";
                }
            })

            self.TagNames = [];
            if (data.Tags !== null && data.Tags.length !== 0) {
                ko.utils.arrayForEach(data.Tags, function (v) {
                    self.TagNames.push(v.Name);
                });
            }

            self.CanSeeDetails = ko.computed(function () {
                if ((self.Type === "RPT" && self.CanEditDataset) || self.Type !== "RPT") {
                    return true;
                }
                else {
                    return false;
                }
            });

        }

        //This only should be used for the Category type filter groups the ones that are 'OR'ed together when multiple selected in the same box.
        function IsSelectedFiltersAMatch(selectedFilters, datasetObjectArray, isAndOperator) {

            if (selectedFilters.length === 0) {
                return true;
            } else if (datasetObjectArray.length === 0) {
                return false;
            } else {
                for (var i = 0; i < selectedFilters.length; i++) {
                    if (isAndOperator && datasetObjectArray.includes(selectedFilters[i].Title)) {
                        return true;
                    }
                    else if (!isAndOperator && !datasetObjectArray.includes(selectedFilters[i].Title)) {
                        return false;
                    }
                }
            }

            return !isAndOperator;
        }

        function FilterExhibits(exhibits, sortVal, selectedFilters) {

            if (selectedFilters.length === 0 || window.vm === undefined) {
                return data.Search.SortTheResults(sortVal,
                    exhibits,
                    @((int)DatasetSortByOption.Alphabetical),
                    @((int)DatasetSortByOption.Favorites),
                    @((int)DatasetSortByOption.MostAccessed),
                    @((int)DatasetSortByOption.RecentlyAdded),
                    @((int)DatasetSortByOption.RecentlyUpdated));
            }

            //get all the filerters selected from the category group
            var selectedCategories = data.Search.GetSelectedFiltersFromGroup(window.vm.CategoryFilters, selectedFilters);
            var selectedBusinessUnits = data.Search.GetSelectedFiltersFromGroup(window.vm.BusinessUnitFilters, selectedFilters);
            var selectedFunctions = data.Search.GetSelectedFiltersFromGroup(window.vm.DatasetFunctionFilters, selectedFilters);
            var selectedExtensions = data.Search.GetSelectedFiltersFromGroup(window.vm.ExtensionFilters, selectedFilters);
            var selectedTags = data.Search.GetSelectedFiltersFromGroup(window.vm.TagFilters, selectedFilters);
            var selectedOwners = data.Search.GetSelectedFiltersFromGroup(window.vm.OwnerFilters, selectedFilters);

            //filter the exhibits based on teh groups that are 'OR'ed toghether
            exhibits = exhibits.filter(function (exhibit) {
                var categoryMatch = IsSelectedFiltersAMatch(selectedCategories, exhibit.Categories, true);
                var buMatch = IsSelectedFiltersAMatch(selectedBusinessUnits, exhibit.BusinessUnits, true);
                var extensionMatch = IsSelectedFiltersAMatch(selectedExtensions, exhibit.DistinctFileExtensions, true);
                var functionMatch = IsSelectedFiltersAMatch(selectedFunctions, exhibit.DatasetFunctions, true);
                var ownerMatch = IsSelectedFiltersAMatch(selectedOwners, exhibit.SentryOwner, true);

                //now filter the rest of the exhibits on the groups that are 'AND'ed together.
                var tagMatch = IsSelectedFiltersAMatch(selectedTags, exhibit.TagNames, false);

                return categoryMatch && buMatch && functionMatch && extensionMatch && tagMatch & ownerMatch;
            });

            return data.Search.SortTheResults(sortVal,
                exhibits,
                @((int)DatasetSortByOption.Alphabetical),
                @((int)DatasetSortByOption.Favorites),
                @((int)DatasetSortByOption.MostAccessed),
                @((int)DatasetSortByOption.RecentlyAdded),
                @((int)DatasetSortByOption.RecentlyUpdated));
        }

        function ListViewModel() {
            var self = this;
            self.Query = ko.observable('');
            self.datasets = ko.observableArray([]);
            self.AllFilters = ko.observableArray([]);  //This is the master list of all filters.
            self.SelectedFilters = ko.observableArray([]);
            self.CategoryFilters = ko.observableArray([]);
            self.BusinessUnitFilters = ko.observableArray([]);
            self.DatasetFunctionFilters = ko.observableArray([]);
            self.OwnerFilters = ko.observableArray([]);
            self.ExtensionFilters = ko.observableArray([]);
            self.TagFilters = ko.observableArray([]);

            self.FilterExhibits = function (exhibits, sortVal) {
                return FilterExhibits(exhibits, sortVal, self.SelectedFilters());
            };

            self.PopulateDatasetFilters = function (datasets) {
                var temp = [];
                var pageType = '1_';

                //Guarentee order of categories to ensure filter numbering is consistent
                //https://stackoverflow.com/a/13359705
                //pulling all unique category values from observablearray
                var uniqueCategories = ko.dependentObservable(function () {
                    var categories = ko.utils.arrayMap(datasets, function (item) { return item.Category });
                    return ko.utils.arrayGetDistinctValues(categories).sort();
                })

                //CATEGORY FILTER
                var uniqueCatCnt = 1;
                for (var item, i = 0; item = uniqueCategories()[i++];) {
                    var category = item;

                    if (!(category in categoryLookup)) {
                        categoryLookup[category] = 1;
                        self.CategoryFilters.push(new data.Search.Filter(pageType + '0_' + uniqueCatCnt, category, 'Category'));

                        temp.push(new data.Search.Filter(pageType + '0_' + uniqueCatCnt, category, 'Category'));

                        // compare the category to what may have been passed along in the URL; if there's a match, push it to the SelectedFilters observable array
                        if (category === data.Search.GetParameterByName('category')) {
                            self.SelectedFilters.push(pageType + '0_' + uniqueCatCnt);
                        }

                        uniqueCatCnt++;
                    }
                }

                var item;

                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }

                self.AllFilters.push(new data.Search.FilterCategory('Category', temp, 1, true));
                temp = [];


                //Guarentee order of Owners to ensure filter numbering is consistent
                //https://stackoverflow.com/a/13359705
                //pulling all unique category values from observablearray
                var uniqueOwners = ko.dependentObservable(function () {
                    var Owners = ko.utils.arrayMap(datasets, function (item) { return item.SentryOwner });
                    return ko.utils.arrayGetDistinctValues(Owners).sort();
                })
                //SENTRYOWNER FILTER
                for (var item, i = 0; item = uniqueOwners()[i++];) {
                    var owner = item;

                    if (!(owner in ownerLookup)) {
                        ownerLookup[owner] = 1;
                        self.OwnerFilters.push(new data.Search.Filter(pageType + '1_' + i, owner, 'Sentry Owner'));

                        temp.push(new data.Search.Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                    }

                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Sentry Owner') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Sentry Owner', temp, 2, true));
                temp = [];


                //EXTENSION FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = datasets[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new data.Search.Filter(pageType + '3_' + counter, ext, 'Extension'));

                            temp.push(new data.Search.Filter(pageType + '3_' + counter, ext, 'Extension'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Extension') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Extension', temp, 3, true));

                // sort the filters by Sequence
                self.AllFilters.sort(function (left, right) {
                    return left.Sequence - right.Sequence;
                });
            };

            self.PopulateExhibitFilters = function (exhibits) {
                var temp = [];
                var pageType = '2_'
                var item;

                //Guarentee order of categories to ensure filter numbering is consistent
                //https://stackoverflow.com/a/13359705
                //pulling all unique category values from observablearray
                var uniqueCategories = ko.computed(function () {
                    var categories = [];
                    ko.utils.arrayForEach(exhibits, function (item) {
                        ko.utils.arrayMap(item.Categories, function (innercats) { return categories.push(innercats) });
                    });
                    return ko.utils.arrayGetDistinctValues(categories).sort();
                });

                //CATEGORY FILTER
                for (var cat, i = 0; cat = uniqueCategories()[i++];) {
                    if (!(cat in categoryLookup)) {
                        categoryLookup[cat] = 1;
                        self.CategoryFilters.push(new data.Search.Filter(pageType + '0_' + i, cat, 'Category'));

                        // compare the category to what may have been passed in the URL; if there's a match, push it to the SelectedFilters observable array
                        if (cat === data.Search.GetParameterByName('category')) {
                            self.SelectedFilters.push(pageType + '0_' + i);
                        }

                        temp.push(new data.Search.Filter(pageType + '0_' + i, cat, 'Category'));
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Category', temp, 1, true));
                temp = [];


                //BUSINESS UNIT FILTER
                counter = 0; //reset counter
                for (var item, i = 0; item = exhibits[i++];) {
                    for (var bu, j = 0; bu = item.BusinessUnits[j++];) {
                        if (!(bu in businessUnitLookup)) {
                            businessUnitLookup[bu] = 1;
                            self.BusinessUnitFilters.push(new data.Search.Filter(pageType + '5_' + counter, bu, 'Business Unit'));

                            temp.push(new data.Search.Filter(pageType + '5_' + counter, bu, 'Business Unit'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Business Unit') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Business Unit', temp, 2, false));
                temp = [];


                //DATASET FUNCTION FILTER
                counter = 0; //reset counter
                for (var item, i = 0; item = exhibits[i++];) {
                    for (var fn, j = 0; fn = item.DatasetFunctions[j++];) {
                        if (!(fn in datasetFunctionLookup)) {
                            datasetFunctionLookup[fn] = 1;
                            self.DatasetFunctionFilters.push(new data.Search.Filter(pageType + '6_' + counter, fn, 'Function'));

                            temp.push(new data.Search.Filter(pageType + '6_' + counter, fn, 'Function'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Function') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Function', temp, 3, false));
                temp = [];


                //REPORT TYPE FILTER
                counter = 0; // reset the counter
                for (var item, i = 0; item = exhibits[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new data.Search.Filter(pageType + '2_' + counter, ext, 'Report Type'));

                            temp.push(new data.Search.Filter(pageType + '2_' + counter, ext, 'Report Type'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Report Type') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Report Type', temp, 4, true));
                temp = [];


                //TAG FILTER
                //Retrieve unique list of tag groups across tags that exist on exhibits
                // and alfa sort the list
                var tagGroups = $.unique($.map(exhibits, function (nested) {
                        return $.map(nested.Tags, function (element) {
                            return element.Group;
                        });
                    })
                ).sort();

                //Move "Other" group to end of array if exists for display purposes
                function array_move(arr, old_index, new_index) {
                    if (new_index >= arr.length) {
                        var k = new_index - arr.length + 1;
                        while (k--) {
                            arr.push(undefined);
                        }
                    }
                    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
                };

                array_move(tagGroups, tagGroups.indexOf('Other'), tagGroups.length - 1)


                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                //Loop through each tag group, add all tags for the group which are associated
                // with each exhibit
                for (var group, g = 0; group = tagGroups[g++];) {
                    for (var item, i = 0; item = exhibits[i++];) {
                        if (item.Tags != null) {
                            var Tags = item.Tags;
                            //Loop through list of Tags on each item
                            for (var tag, j = 0; tag = Tags[j++];) {
                                if (tag.Group == group && !(tag.Name in tagLookup)) {
                                    tagLookup[tag.Name] = 1;
                                    self.TagFilters.push(new data.Search.Filter(pageType + '3_' + counter, tag.Name, group));

                                    temp.push(new data.Search.Filter(pageType + '3_' + counter, tag.Name, group));
                                    counter++;
                                }
                            }
                        }
                    }
                    ko.utils.arrayForEach(self.AllFilters(), function (v) {
                        if (v.Name == group) {
                            item = v;
                        }
                    });
                    if (item !== undefined) {
                        temp = item.Filters().concat(temp);
                        ko.utils.arrayRemoveItem(self.AllFilters(), item);
                    }
                    self.AllFilters.push(new data.Search.FilterCategory(group, temp, 5, true));

                    temp = [];
                }

                // sort the filters by Sequence
                self.AllFilters.sort(function (left, right) {
                    return left.Sequence - right.Sequence;
                });
            };

            self.PopulateGenericFilters = function (allObjects) {
                var temp = [];
                var pageType = '3_'

                //CATEGORY FILTER
                var param = data.Search.GetParameterByName('category');

                for (var item, i = 0; item = allObjects[i++];) {
                    var category = item.Category;

                    if (!(category in categoryLookup)) {
                        categoryLookup[category] = 1;
                        self.CategoryFilters.push(new data.Search.Filter(pageType + '0_' + i, category, 'Category'));

                        temp.push(new data.Search.Filter(pageType + '0_' + i, category, 'Category'));

                        if (category == param) {
                            self.SelectedFilters.push(pageType + '0_' + i);
                        }
                    }
                }

                var item;

                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }

                self.AllFilters.push(new data.Search.FilterCategory('Category', temp, 1, true));
                temp = [];


                //BUSINESS UNIT FILTER
                for (var item, i = 0; item = allObjects[i++];) {
                    for (var bu, j = 0; bu = item.BusinessUnits[j++];) {
                        if (!(bu in businessUnitLookup)) {
                            businessUnitLookup[bu] = 1;
                            self.BusinessUnitFilters.push(new data.Search.Filter(pagetype + '5_' + counter, bu, 'Business Unit'));

                            temp.push(new data.Search.Filter(pageType + '5_' + counter, bu, 'Business Unit'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name === 'Business Unit') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Business Unit', temp, 2, false));


                //SENTRYOWNER FILTER
                for (var item, i = 0; item = allObjects[i++];) {
                    var owner = item.SentryOwner;

                    if (!(owner in ownerLookup)) {
                        ownerLookup[owner] = 1;
                        self.OwnerFilters.push(new data.Search.Filter(pageType + '1_' + i, owner, 'Sentry Owner'));

                        temp.push(new data.Search.Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                    }

                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Sentry Owner') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Sentry Owner', temp, 3, true));
                temp = [];


                //EXTENSION FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = allObjects[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new data.Search.Filter(pageType + '3_' + counter, ext, 'Extension'));

                            temp.push(new data.Search.Filter(pageType + '3_' + counter, ext, 'Extension'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Extension') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Extension', temp, 4, true));

                //TAG FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = allObjects[i++];) {
                    if (item.Tags != null) {
                        var Tags = item.Tags;
                        //Loop through list of Tags on each item
                        for (var tag, j = 0; tag = Tags[j++];) {
                            if (!(tag.Name in tagLookup)) {
                                tagLookup[tag.Name] = 1;
                                self.TagFilters.push(new data.Search.Filter(pageType + '4_' + counter, tag.Name, 'Tag'));

                                temp.push(new data.Search.Filter(pageType + '4_' + counter, tag.Name, 'Tag'));
                                counter++;
                            }
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name === 'Tag') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new data.Search.FilterCategory('Tag', temp, 5, true));
                temp = [];

                // sort the filters by Sequence
                self.AllFilters.sort(function (left, right) {
                    return left.Sequence - right.Sequence;
                });
            };

            self.RemoveSelection = function (id) {
                self.SelectedFilters.remove(function (feature) {
                    return feature == id;
                });
            }

            self.clearFilters = function () {
                self.SelectedFilters.removeAll();
            };

            self.SearchType = ko.computed(function () {
                return data.Search.GetSearchType();
            });

            self.IsShownForCurrentType = function (searchType) {
                return searchType === data.Search.GetDetailType();
            };

            var loaded = false;

            var categoryLookup = {};
            var businessUnitLookup = {};
            var datasetFunctionLookup = {};
            var ownerLookup = {};
            var extensionLookup = {};
            var tagLookup = {};

            self.populateFilters = function () {

                var allData = self.datasets();

                if (self.SearchType() == "Datasets") {
                    self.PopulateDatasetFilters(allData);
                } else if (self.SearchType() == "BusinessIntelligence") {
                    self.PopulateExhibitFilters(allData);
                } else {
                    self.PopulateGenericFilters(allData);
                }

            };

            // Load initial state from server, convert it to Dataset instances, then populate self.datasets
            $.getJSON( "/Search/" + self.SearchType() + "/List", function (allData) {
                var mappedTasks = $.map(allData, function (item) { return new Dataset(item) });

                self.datasets(self.datasets().concat(mappedTasks));

                self.populateFilters();

                data.Search.SetInitialDisplay();

                $('#filterSelector').val(self.SelectedFilters()).trigger('change');
            });

            self.SortByVal = function () {
                if (!loaded) {
                    //on initial load
                    //look at url to determine if sort param exists, if so set local storage
                    // and selected Sort By value.
                    if (data.Search.GetParameterByName('sort')) {
                        localStorage.setItem("sortByVal", (data.Search.GetParameterByName('sort')));
                        $("#sort-results").val(data.Search.GetParameterByName('sort'));
                    }
                }

                //pull sortby value from local storage
                var val = localStorage.getItem("sortByVal");
                
                if (val !== undefined) {
                    return val;
                }
                else {
                    return '0';
                }
            }

            self.searchResults = ko.computed(function () {

                if (!loaded) {
                    var list = JSON.parse(localStorage.getItem("filteredIds"));

                    if (list != undefined) {

                        for (var i = 0; i < list.length; i++) {
                            self.SelectedFilters.push(list[i]);
                        }
                    }

                    if (data.Search.GetParameterByName('searchPhrase')) {
                        self.Query(data.Search.GetParameterByName('searchPhrase'));
                    }
                    else if (data.Search.GetParameterByName('category')) {
                        self.Query('');
                    }
                    else {
                        var searchText = localStorage.getItem("searchText");

                        if (searchText != undefined && searchText != "") {
                            self.Query(searchText);
                        }
                    }
                }
                else {
                    localStorage.setItem("searchText", self.Query());
                }

                //var searchQuery = self.Query().split(" ");
                var searchQuery = self.Query().match(/".*?"|\w+/g);
                if (jQuery.isEmptyObject(searchQuery)) {
                    searchQuery = [""];
                }

                var temp = [];

                for (var i = 0; i < self.datasets().length; i++) {

                    var keywordFound = false;
                    var count = 0;
                    var dataset = self.datasets()[i];


                        for (var j = 0; j < searchQuery.length; j++) {
                            //var search = searchQuery[j];
                            var search = searchQuery[j].replace(/"/g, "");

                            /*******************************************
                             * Shared metadata between BI and Datasets *
                            ********************************************/
                            var desc = dataset.DatasetDesc.toString();
                            var name = dataset.DatasetName.toString();
                            if (!jQuery.isEmptyObject(dataset.SentryOwner)) {
                                var owner = dataset.SentryOwner.toString();
                            };

                            if (desc.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                keywordFound = true;
                                count++;
                            }

                            //Search Dataset Name
                            if (name.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                keywordFound = true;
                                count++;
                            }

                            //Search Extensions
                            ko.utils.arrayForEach(dataset.DistinctFileExtensions, function (v) {
                                if (v.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                    keywordFound = true;
                                    count++;
                                }
                            })

                            //Search Category
                            ko.utils.arrayForEach(dataset.Categories, function (v) {
                                if (v.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                    keywordFound = true;
                                    count++;
                                }
                            });


                            /*************************
                             * BI Specific metadata or searches *
                            **************************/
                            //Search Owner
                            //  Only users which can edit reports can see the owner
                            //  therefore we need to inlucde it only if current user
                            //  has permissions to edit reports
                            if (dataset.Type == 'RPT' && dataset.CanEditDataset && !jQuery.isEmptyObject(owner) && owner.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                keywordFound = true;
                                count++;
                            }

                            //Search Tags
                            if (!jQuery.isEmptyObject(dataset.tags)) {
                                ko.utils.arrayForEach(dataset.Tags, function (v) {
                                    if (v.Name.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                        keywordFound = true;
                                        count++;
                                    }
                                });
                            }

                            //Search Contact Name
                            if (!jQuery.isEmptyObject(dataset.ContactDetails)) {
                                ko.utils.arrayForEach(dataset.ContactDetails, function (v) {
                                    if (v.Name.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                        keywordFound = true;
                                        count++;
                                    }
                                });
                            }

                            //Search Business Units
                            if (!jQuery.isEmptyObject(dataset.BusinessUnits)) {
                                ko.utils.arrayForEach(dataset.BusinessUnits, function (v) {
                                    if (v.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                        keywordFound = true;
                                        count++;
                                    }
                                })
                            }

                            //Search Functions
                            if (!jQuery.isEmptyObject(dataset.DatasetFunctions)) {
                                ko.utils.arrayForEach(dataset.DatasetFunctions, function (v) {
                                    if (v.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                        keywordFound = true;
                                        count++;
                                    }
                                })
                            }

                            //Search Update Frequency
                            if (!jQuery.isEmptyObject(dataset.UpdateFrequency)) {
                                if (dataset.UpdateFrequency.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                    keywordFound = true;
                                    count++;
                                }
                            }

                            /*****************************
                             * Dataset Specific metadata or searches *
                            ******************************/
                            if (dataset.Type == 'DS' && !jQuery.isEmptyObject(owner) && owner.toLowerCase().indexOf(search.toLowerCase()) >= 0) {
                                keywordFound = true;
                                count++;
                            }
                        }
                    
                    if (keywordFound) {
                        temp.push({ dataset: dataset, count: count });
                    }
                }

                temp = temp.sort(function (left, right) {
                    return right.count - left.count || new Date(right.dataset.ChangedDtm) - new Date(left.dataset.ChangedDtm);
                });

                queryResults = temp.map(x => x.dataset);

                queryResults = self.FilterExhibits(queryResults, self.SortByVal());

                $("#SearchText").attr("placeholder", "Search " + queryResults.length + " Datasets...");

                return queryResults;
            }).extend({ paged: { pageSize: 15 } }); // .extend() is for the knockout-paging plugin
            // go to https://github.com/ErikSchierboom/knockout-paging for information on the plugin

            self.sortExhibits = function () {
                if (loaded) {
                    localStorage.setItem("sortByVal", $('#sort-results').val());
                    self.datasets.valueHasMutated();
                }
            };

            self.limitSearchResults = function () {

                var nbrResults = 15;
                
                // determine number of results to return in the search results using the value selected in the drop-down
                if ($("#search-results-choices").val() === "All") {
                    nbrResults = 100000;
                    localStorage.setItem("itemsToShow", "All");
                    //localStorage.setItem("itemCount", self.searchResults.itemCount());
                } else {
                    nbrResults = parseInt($("#search-results-choices").val());
                    localStorage.setItem("itemsToShow", nbrResults);
                }

                self.searchResults.pageSize(nbrResults);

            }

            self.SelectedFilters.subscribe(function () {
                localStorage.setItem("filteredIds", ko.toJSON(self.SelectedFilters()));
                $('#filterSelector').val(self.SelectedFilters()).trigger('change');

            });

            self.GetFile = function (data) {
                $.ajax({
                    url: '/ExternalFile/HasReadPermissions?pathAndFilename=' + encodeURIComponent(data.Location),
                    method: "GET",
                    dataType: 'json',
                    success: function (obj) {
                        if (obj.HasPermission) {
                            var url = '/ExternalFile/DownloadExternalFile?pathAndFilename=' + encodeURIComponent(data.Location);
                            window.open(url);
                        }
                        else {
                            Sentry.ShowModalAlert(
                                "User does not have sufficient permissions to selected file. </br></br>  Contact <b>" + data.SentryOwner + "</b> to request access to exhibit."
                            );
                        }
                    },
                    error: function (obj) {
                        Sentry.ShowModalAlert("Failed permissions check, please try again.  If problem persists, please contact <a mailto:DSCSupport@sentry.com></a>");
                    }
                });
            };

            self.CurrentPageSelection = self.searchResults.pageNumber.subscribe(function () {
                localStorage.setItem("pageSelection", ko.toJSON(self.searchResults.pageNumber()));
            });


            //items that need to be run only on initial load of page
            if (loaded === false) {
                if (data.Search.GetParameterByName('itemsToShow')) {
                    //on initial load of view model, check url
                    var selection = data.Search.GetParameterByName('itemsToShow').replace(/'/g, '');
                    $("#search-results-choices").val(selection);
                    if (selection === "All") {
                        self.searchResults.pageSize(100000);
                    }
                    else { console.log("setting page size:" + selection); self.searchResults.pageSize(selection); }
                }
            }

            loaded = true;
        }

        $(document).ready(function () {
            console.log("pre-init");
            data.Search.Init();
        });

    </script>
}