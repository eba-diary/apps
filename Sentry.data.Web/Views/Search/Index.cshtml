@{
    ViewBag.Title = "Datasets";
}
@{
    @Html.AntiForgeryToken()
}

<div id="main">
    <div class="col-md-3 textCenter">
        <div class="listHeadGroup">
            <img src="~/Images/Icons/DatasetsBlue.svg" class="datasetImg leftFloat" data-bind="visible: IsShownForCurrentType('Datasets')" style="display: none;" />
            <img src="~/Images/Icons/Business IntelligenceBlue.svg" class="datasetImg leftFloat" data-bind="visible: IsShownForCurrentType('BusinessIntelligence')" style="display: none;" />
            <h1 class="htCenter datasetHeader" data-bind="visible: IsShownForCurrentType('Datasets')" style="display: none;" >Datasets</h1>
            <h1 class="htCenter datasetHeader" data-bind="visible: IsShownForCurrentType('BusinessIntelligence')" style="display: none;">Business Intelligence</h1>            
        </div>
    </div>
    <div class="navbar-form navbar-center">
        <div class="col-md-9 textCenter">
            <div class="searchBoxDS  has-feedback has-feedback-left">
                <input class="form-control searchTextDS text-box single-line" id="SearchText" placeholder="Search Datasets..." name="SearchText" type="text" data-bind="value: Query, valueUpdate: 'keyup', visible: IsShownForCurrentType('Datasets')" autocomplete="off" style="display: none;">
                <input class="form-control searchTextDS text-box single-line" id="SearchText" placeholder="Search Exhibits and Dashboards..." name="SearchText" type="text" data-bind="value: Query, valueUpdate: 'keyup', visible: IsShownForCurrentType('BusinessIntelligence')" autocomplete="off" style="display: none;">
                <i class="form-control-feedback glyphicon glyphicon-search"></i>
            </div>
        </div>

        <div id="filterSpinner">
            <div class="sentry-spinner-container" style=" width: 1166px; padding-top: 150px;">
                <span class="sentry-spinner" style="height:100px"></span>
            </div>
            <div class="col-sm-3 clearFloat no-padding hidden-sm hidden-xs" id="filterColumn" style="display:none;">
                <div class="outsideFilters" id="outsideFilters">

                    <!-- ko foreach: AllFilters -->
                    <!-- THE CATEGORY HEADER-->
                    <div class="panel panel-default dataset-list-filters boxShadow" data-bind="css : BorderColor">
                        <div class="panel-heading filterHead white" data-bind="css : BannerColor, attr: { id: HeadId }">
                            <span data-bind="text : Name"></span>
                            <span class="glyphicon glyphicon-chevron-up rightFloat filterViewIcon" data-bind="css : Color, attr: { id: HeadIcon }"></span>
                        </div>

                        <!-- FOREACH OF THE CATEGORY FILTERS-->
                        <div class="dataset-list-filter-category panel-body" data-bind="attr: {id : HeadHide }">
                            <ul class="list-unstyled ul-filter-list">
                                <!-- ko foreach: OrderedFilters -->
                                <li class="list-unstyled li-filter-disabled filterList" data-bind="visible: $index() < 6">
                                    <label data-bind="attr: { id: id }" style="display: block; font-weight: normal;">
                                        <input type="checkbox" class="filterChbx"
                                               data-bind="value: id, checked: window.vm.SelectedFilters, attr: { id: id }"/>
                                        <span data-bind="text : Title"></span>
                                        <span class="badge badge-info" data-bind="text : Count, css : $parent.BannerColor"></span>
                                     </label>
                                </li>

                                <!-- /ko -->

                                <li data-bind="attr: {id : HiddenMore}">
                                    <!-- ko foreach: OrderedFilters -->
                                    <ul class="notNested">
                                        <li class="list-unstyled li-filter-disabled filterList" data-bind="visible: $index() >= 6">
                                            <label data-bind="attr: { id: id }" style="display: block; font-weight: normal;">
                                                <input type="checkbox" class="filterChbx"
                                                       data-bind="value: id, checked: window.vm.SelectedFilters, attr: { id: id }" />
                                                <span data-bind="text : Title"></span>
                                                <span class="badge badge-info" data-bind="text : Count, css : $parent.BannerColor"></span>
                                            </label>
                                        </li>
                                    </ul>
                                    <!-- /ko -->
                                </li>

                            </ul>

                            <!-- ko if: OrderedFilters().length > 6 -->
                            <a href="#" class="filterMore" data-bind="attr: { id:  HiddenId}">
                                <div class="glyphicon glyphicon-plus-sign inlineBlock moreIcon leftFloat" data-bind="attr : {id : IconMore}"></div>
                                <div class="leftFloat txt_filterMore" data-bind="attr: {id: TxtMore}">Show More</div>
                            </a>
                            <!-- /ko -->

                        </div>
                    </div>

                    <!-- /ko -->
                </div>
            </div>
            <div class="col-md-9 textCenter" id="dataColumn" style="display:none;">
                <div id="DatasetItemList" class="dataset-list inlineBlock text-left">
                    <div>
                        <h4 class="found">
                            Active Filters:
                            <button type="button" class="btn btn-sm btn-primary" id="btnClearFilters" data-bind="click: clearFilters, enable: SelectedFilters().length !== 0">Clear Filters</button>
                        </h4>

                        <select multiple="" class="form-control select2-hidden-accessible"
                                id="filterSelector" name="filterSelector" tabindex="-1" aria-hidden="true">
                            <!-- ko foreach: AllFilters -->
                            <optgroup data-bind="attr: {label: Name}">
                                <!-- ko foreach: Filters -->
                                <option data-bind="value: $data.id, text: $data.Title"></option>
                                <!-- /ko -->
                            </optgroup>
                            <!-- /ko -->
                        </select>

                        @*<select multiple="multiple" id="activeFilters " class="form-control select2-hidden-accessible"
                        data-bind="select2: { options: SearchFilters, width: '100%', selectedOptions: Select2Filters, optionsText: 'Title' }"></select>*@
                    </div>
                    <ul class="list-unstyled" id="listOfDatasets" data-bind="foreach: searchResults">
                        <li class="ul-dataset-list-item borderSide_gray boxShadowSm" data-bind="css : BorderColor">
                            <div class="category-type-wrap">
                                <div class="glyphicon glyphicon-star btnFavorite" id="btnFavorite" data-bind="attr: {data: DatasetId}, visible: IsFavorite" style="display: none"></div>
                                <div class="glyphicon glyphicon-star-empty btnFavorite" id="btnFavorite" data-bind="attr: {data: DatasetId}, visible: IsFavorite == false" style="display: none"></div>
                                <div class="category-type" data-bind="css: BannerColor">
                                    <span data-bind="text: AbbreviatedCategory" />
                                </div>
                            </div>
                            <div></div>
                            <div class="dataset-list-content">
                                <!-- ko foreach: DistinctFileExtensions -->
                                <div class="extension bg_gray" data-bind="css : $data">
                                    <span data-bind="text: $data" />
                                </div>
                                <!-- /ko -->
                                <!-- ko if: CanSeeDetails() -->   
                                    <!-- ko if: ExternalLink !== undefined -->
                                    <a class="dataset-list-dataset-name" data-bind="attr: { href: ExternalLink, title: DatasetName }">
                                        <span data-bind="text: DatasetName" />
                                    </a>
                                    <!-- /ko -->
                                    <!-- ko if: ExternalLink === undefined -->
                                    <a class="dataset-list-dataset-name" data-bind="attr: { href: Link, title: DatasetName }">
                                        <span data-bind="text: DatasetName" />
                                    </a>
                                    <!-- /ko -->
                                <!-- /ko -->
                                
                                <!-- ko ifnot: CanSeeDetails() -->
                                    <span data-bind="text: DatasetName" style="font-size: larger; font-weight: bolder; color: #003DA5;"></span>
                                <!-- /ko -->


                                <!-- ko if: IsSensitive-->
                                <i class="glyphicon glyphicon-lock text-primary" data-toggle="tooltip" data-placement="bottom" title="Secure" style="padding-left: 10px;"></i>
                                <!-- /ko -->
                            </div>

                            <div class="dataset-list-content">
                                <div class="dataset-list-content-label"></div>
                                <div class="dataset-list-content-value listDesc">
                                    <span data-bind="text: DatasetDesc"></span>
                                </div>
                            </div>
                            <div class="dataset-list-content">
                                <span class="custom-glyphiconz" aria-hidden="true" />
                                <div class="dataset-list-content-label">
                                    <div>
                                        <div class="ownerDate" style="text-align : left;">                                            
                                            <span class="textBold ownerDate" data-bind="css : Color">Sentry Owner:&nbsp;</span>
                                            <span data-bind="text: SentryOwner"></span>

                                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;

                                            <!-- ko ifnot: Type === "RPT" -->
                                            <span class=" textBold ownerDate" data-bind="css : Color">Last Activity Date:&nbsp;</span>
                                            <span data-bind="text: ChangedDtm"></span>
                                            <!-- /ko -->
                                            <!-- ko if: Type === "RPT" -->
                                            <span class=" textBold ownerDate" data-bind="css : Color">Update Frequency:&nbsp;</span>
                                            <span data-bind="text: UpdateFrequency"></span>
                                            <!-- /ko -->
                                            
                                            <!-- ko if: Type === "RPT" -->
                                            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
                                            <!-- ko ifnot: (LocationType === "file") -->
                                            <a class="textBold ownerDate" target="_blank" data-bind="attr: { href: Location, title: DatasetName}">
                                                <span>Report Link</span>
                                            </a>
                                            <!-- /ko -->
                                            <!-- ko if: LocationType === "file" -->
                                            <a class="textBold ownerDate" data-bind="click: $parent.GetFile">
                                                <span>Report Link</span>
                                            </a>
                                            <!-- /ko -->
                                            <!-- /ko -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </li>

                    </ul>
                    <hr>
                    <!-- ko if: searchResults().length == 0 -->
                    <div>
                        <h4>
                            No results given the active filters and/or search text.  Please refine your search parameters.
                        </h4>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
            var $selector = $("#filterSelector").select2({
                selectOnClose: false,
                closeOnSelect: false,
                placeholder: "There are no active filters.  Pick an option to the left or click here to begin filtering.",
            });
            $selector.select2({
                selectOnClose: false,
                closeOnSelect: false,
                placeholder: "There are no active filters.  Pick an option to the left or click here to begin filtering.",
            });

            $('.select2-container--default').css('width', '100%');

            $('#filterSelector').on('select2:select', function (e) {
                // Do something
                var data = e.params.data;

                console.log(data);

                window.vm.SelectedFilters.push(data.id);

                //$('#' + data.id).prop('checked', true);

                //var storedNames = JSON.parse(localStorage.getItem("filteredIds"));

                //if (storedNames != null) {
                //    storedNames[storedNames.length] = data.id;
                //}
                //else {
                //    var storedNames = [];
                //    storedNames[0] = data.id;
                //}

                //localStorage.setItem("filteredIds", JSON.stringify(storedNames));

                //$('#filterSelector').select2("close");

                //changeWindow();

            });

            $('#filterSelector').on('select2:unselect', function (e) {
                // Do something
                var data = e.params.data;
                console.log('UNSELECT');
                console.log(data);

                window.vm.RemoveSelection(data.id);

            });
        });

        function getDetailType() {
            return window.location.pathname.split("/")[2];
        }

        function Filter(id, Title, Category, Count) {

            this.id = id;
            this.Title = Title;
            this.Category = Category;

            this.Count = ko.computed(function () {
                var items = ko.utils.arrayFilter(window.vm.searchResults(), function (prod) {
                    if (Title == prod.Category && Category == 'Category') {
                        return prod;
                    }
                    else if (Title == prod.SentryOwner && Category == 'Sentry Owner') {
                        return prod;
                    }
                    else if (Category == 'Extension') {
                        for (var i = 0; i < prod.DistinctFileExtensions.length; i++) {
                            if (prod.DistinctFileExtensions[i] == Title) {
                                return prod;
                            }
                        }
                    }
                    else if (Category == 'Report Type') {
                        for (var i = 0; i < prod.DistinctFileExtensions.length; i++) {
                            if (prod.DistinctFileExtensions[i] == Title) {
                                return prod;
                            }
                        }
                    }
                    else if (Category == 'Tag') {
                        if (prod.Tags != null) {
                            for (var i = 0; i < prod.Tags.length; i++) {
                                if (prod.Tags[i].Name == Title) {
                                    return prod;
                                }
                            }
                        }                        
                    }
                });

                return items.length;
            });
        }

        function FilterCategory(Name, Filters, Color) {
            this.Name = Name;
            this.Filters = ko.observableArray(Filters);

            this.OrderedFilters = ko.computed(function () {
                return Filters.sort(function (left, right) {
                    return left.Title == right.Title ? 0 : (left.Title < right.Title ? -1 : 1)
                });
            });

            this.Color = Color;

            this.BannerColor = 'filterHead_' + Color;
            this.BorderColor = 'filterBorder_' + Color;

            this.HiddenId = 'filterMore_' + Name.replace(' ', '_');
            this.HiddenMore = 'hidden_filterMore_' + Name.replace(' ', '_');
            this.IconMore = 'icon_filterMore_' + Name.replace(' ', '_');
            this.TxtMore = 'txt_filterMore_' + Name.replace(' ', '_');

            this.HeadId = 'filterType_' + Name.replace(' ', '_');
            this.HeadIcon = 'icon_filterType_' + Name.replace(' ', '_');
            this.HeadHide = 'hide_filterType_' + Name.replace(' ', '_');
        }

        function Dataset(data) {
            this.DatasetDesc = data.DatasetDesc;
            this.SentryOwner = data.SentryOwnerName;
            this.DatasetId = data.DatasetId;

            this.DatasetInformation = data.DatasetInformation;
            this.DatasetName = data.DatasetName;
            this.Category = data.Category;
            this.AbbreviatedCategory = data.AbbreviatedCategory;
            this.IsSensitive = data.IsSensitive;
            this.Type = data.Type;

            this.Link = "/Dataset/Detail/" + data.DatasetId;
            this.ExternalLink = data.Link;

            this.ChangedDtm = data.ChangedDtm;
            this.Color = data.Color;

            this.BannerColor = data.BannerColor;
            this.BorderColor = data.BorderColor;

            this.DistinctFileExtensions = data.DistinctFileExtensions;

            this.PageViews = data.PageViews;
            this.Downloads = data.Downloads;

            this.Location = data.Location;
            this.LocationType = data.LocationType;
            this.Tags = data.Tags;
            this.UpdateFrequency = data.UpdateFrequency;
            this.CanEditDataset = data.CanEditDataset;
            this.IsFavorite = data.IsFavorite;

            this.CanSeeDetails = ko.computed(function () {
                if ((this.Type === "RPT" && this.CanEditDataset) || this.Type !== "RPT") {
                    return true;
                }
                else {
                    return false;
                }
            });


            //this.header = ko.pureComputed(function () {
            //    return this.currentProfit() < 0 ? "profitWarning" : "profitPositive";
            //}, viewModel);
        }

        function ListViewModel() {
            var self = this;
            self.datasets = ko.observableArray([]);

            self.AllFilters = ko.observableArray([]);  //This is the master list of all filters.

            self.Query = ko.observable('');

            // self.SearchFilters = ko.observableArray([]);  //For the DropDown List
            self.SelectedFilters = ko.observableArray([]);

            self.CategoryFilters = ko.observableArray([]);
            self.OwnerFilters = ko.observableArray([]);
            self.ExtensionFilters = ko.observableArray([]);
            self.TagFilters = ko.observableArray([]);

            self.FilterDatasets = function (datasets) {
                //First grab all the selected category ID's
                var selectedCategoryIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '1_0') {
                        return feature;
                    }
                });

                selectedCategoryList = [];
                if (selectedCategoryIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedCategories = ko.utils.arrayFilter(self.CategoryFilters(), function (feature) {

                        for (var i = 0; i < selectedCategoryIDs.length; i++) {
                            if (feature.id == selectedCategoryIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedCategories.length; i++) {
                        selectedCategoryList.push(selectedCategories[i].Title);
                    }

                    //Then filter on those selected Categories
                    datasets = datasets.filter(function (item) {

                        for (var i = 0; i < selectedCategories.length; i++) {
                            if (item.Category == selectedCategories[i].Title) {
                                return true;
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected owner ID's
                var selectedOwnerIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '1_1') {
                        return feature;
                    }
                });

                var selectedOwnerList = '';
                if (selectedOwnerIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedOwners = ko.utils.arrayFilter(self.OwnerFilters(), function (feature) {

                        for (var i = 0; i < selectedOwnerIDs.length; i++) {
                            if (feature.id == selectedOwnerIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedOwners.length; i++) {
                        selectedOwnerList += (selectedOwners[i].Title) + "|";
                    }

                    //Then filter on those selected Categories
                    datasets = datasets.filter(function (item) {

                        for (var i = 0; i < selectedOwners.length; i++) {
                            if (item.SentryOwner == selectedOwners[i].Title) {
                                return true;
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected category ID's
                var selectedExtensionIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '1_3') {
                        return feature;
                    }
                });

                var selectedExtensionsList = [];
                if (selectedExtensionIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedExtensions = ko.utils.arrayFilter(self.ExtensionFilters(), function (feature) {

                        for (var i = 0; i < selectedExtensionIDs.length; i++) {
                            if (feature.id == selectedExtensionIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedExtensions.length; i++) {
                        selectedExtensionsList.push(selectedExtensions[i].Title);
                    }

                    //Then filter on those selected Categories
                    datasets = datasets.filter(function (item) {

                        for (var i = 0; i < selectedExtensions.length; i++) {
                            for (var j = 0; j < item.DistinctFileExtensions.length; j++) {
                                if (item.DistinctFileExtensions[j] == selectedExtensions[i].Title) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    });
                }

                if ($('#dataColumn').is(":visible")) {
                    $.ajax({
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: 'POST',
                        url: '/Search/SearchEvent?categoryFilters=' + selectedCategoryList +
                            '&sentryOwners=' + selectedOwnerList +
                            '&extensions=' + selectedExtensionsList +
                            '&searchTerm=' + self.Query() +
                            '&resultsReturned=' + queryResults.length
                    });
                }

                return datasets;
            };
            self.FilterExhibits = function (exhibits) {
                //First grab all the selected category ID's
                var selectedCategoryIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '2_0') {
                        return feature;
                    }
                });

                var selectedCategoryList = [];
                if (selectedCategoryIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedCategories = ko.utils.arrayFilter(self.CategoryFilters(), function (feature) {

                        for (var i = 0; i < selectedCategoryIDs.length; i++) {
                            if (feature.id == selectedCategoryIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedCategories.length; i++) {
                        selectedCategoryList.push(selectedCategories[i].Title);
                    }

                    //Then filter on those selected Categories
                    exhibits = exhibits.filter(function (item) {

                        for (var i = 0; i < selectedCategories.length; i++) {
                            if (item.Category == selectedCategories[i].Title) {
                                return true;
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected owner ID's
                var selectedOwnerIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '2_1') {
                        return feature;
                    }
                });

                //First grab all the selected category ID's
                var selectedExtensionIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '2_2') {
                        return feature;
                    }
                });

                var selectedExtensionsList = [];
                if (selectedExtensionIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedExtensions = ko.utils.arrayFilter(self.ExtensionFilters(), function (feature) {

                        for (var i = 0; i < selectedExtensionIDs.length; i++) {
                            if (feature.id == selectedExtensionIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedExtensions.length; i++) {
                        selectedExtensionsList.push(selectedExtensions[i].Title);
                    }

                    //Then filter on those selected Categories
                    exhibits = exhibits.filter(function (item) {

                        for (var i = 0; i < selectedExtensions.length; i++) {
                            for (var j = 0; j < item.DistinctFileExtensions.length; j++) {
                                if (item.DistinctFileExtensions[j] == selectedExtensions[i].Title) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected tag ID's
                var selectedTagIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '2_3') {
                        return feature;
                    }
                });

                var selectedTagList = '';
                if (selectedTagIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedTags = ko.utils.arrayFilter(self.TagFilters(), function (feature) {

                        for (var i = 0; i < selectedTagIDs.length; i++) {
                            if (feature.id == selectedTagIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedTags.length; i++) {
                        selectedTagList += (selectedTags[i].Title) + "|";
                    }

                    //Then filter on those selected Categories
                    exhibits = exhibits.filter(function (item) {
                        if (item.Tags != null) {
                            for (var i = 0; i < selectedTags.length; i++) {
                                for (var j = 0; j < item.Tags.length; j++) {
                                    if (item.Tags[j].Name == selectedTags[i].Title) {
                                        return true;
                                    }
                                }
                            }
                        }                        
                        return false;
                    });
                }

                if ($('#dataColumn').is(":visible")) {
                    $.ajax({
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: 'POST',
                        url: '/Search/SearchEvent?categoryFilters=' + selectedCategoryList +
                        //'&sentryOwners=' + selectedOwnerList +
                        '&extensions=' + selectedExtensionsList +
                        '&searchTerm=' + self.Query() +
                        '&resultsReturned=' + queryResults.length
                    });
                }

                return exhibits;
            };
            self.FilterGeneric = function (allObjects) {
                //First grab all the selected category ID's
                var selectedCategoryIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '3_0') {
                        return feature;
                    }
                });

                selectedCategoryList = [];
                if (selectedCategoryIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedCategories = ko.utils.arrayFilter(self.CategoryFilters(), function (feature) {

                        for (var i = 0; i < selectedCategoryIDs.length; i++) {
                            if (feature.id == selectedCategoryIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedCategories.length; i++) {
                        selectedCategoryList.push(selectedCategories[i].Title);
                    }

                    //Then filter on those selected Categories
                    allObjects = allObjects.filter(function (item) {

                        for (var i = 0; i < selectedCategories.length; i++) {
                            if (item.Category == selectedCategories[i].Title) {
                                return true;
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected owner ID's
                var selectedOwnerIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '3_1') {
                        return feature;
                    }
                });

                var selectedOwnerList = '';
                if (selectedOwnerIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedOwners = ko.utils.arrayFilter(self.OwnerFilters(), function (feature) {

                        for (var i = 0; i < selectedOwnerIDs.length; i++) {
                            if (feature.id == selectedOwnerIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedOwners.length; i++) {
                        selectedOwnerList += (selectedOwners[i].Title) + "|";
                    }

                    //Then filter on those selected Categories
                    allObjects = allObjects.filter(function (item) {

                        for (var i = 0; i < selectedOwners.length; i++) {
                            if (item.SentryOwner == selectedOwners[i].Title) {
                                return true;
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected category ID's
                var selectedExtensionIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '3_3') {
                        return feature;
                    }
                });

                var selectedExtensionsList = [];
                if (selectedExtensionIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedExtensions = ko.utils.arrayFilter(self.ExtensionFilters(), function (feature) {

                        for (var i = 0; i < selectedExtensionIDs.length; i++) {
                            if (feature.id == selectedExtensionIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedExtensions.length; i++) {
                        selectedExtensionsList.push(selectedExtensions[i].Title);
                    }

                    //Then filter on those selected Categories
                    allObjects = allObjects.filter(function (item) {

                        for (var i = 0; i < selectedExtensions.length; i++) {
                            for (var j = 0; j < item.DistinctFileExtensions.length; j++) {
                                if (item.DistinctFileExtensions[j] == selectedExtensions[i].Title) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    });
                }

                //First grab all the selected tag ID's
                var selectedTagIDs = ko.utils.arrayFilter(self.SelectedFilters(), function (feature) {

                    if (feature.substring(0, 3) == '3_4') {
                        return feature;
                    }
                });

                var selectedTagList = '';
                if (selectedTagIDs.length > 0) {
                    //Convert those category ID's to Filter Items
                    var selectedTags = ko.utils.arrayFilter(self.TagFilters(), function (feature) {

                        for (var i = 0; i < selectedTagIDs.length; i++) {
                            if (feature.id == selectedTagIDs[i]) {
                                return true;
                            }
                        }
                        return false;
                    });

                    for (var i = 0; i < selectedTags.length; i++) {
                        selectedTagList += (selectedTags[i].Title) + "|";
                    }

                    //Then filter on those selected Categories
                    allObjects = allObjects.filter(function (item) {
                        if (item.Tags != null) {
                            for (var i = 0; i < selectedTags.length; i++) {
                                for (var j = 0; j < item.Tags.length; j++) {
                                    if (item.Tags[j].Name == selectedTags[i].Title) {
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    });
                }

                if ($('#dataColumn').is(":visible")) {
                    $.ajax({
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: 'POST',
                        url: '/Search/SearchEvent?categoryFilters=' + selectedCategoryList +
                        '&sentryOwners=' + selectedOwnerList +
                        '&extensions=' + selectedExtensionsList +
                        '&searchTerm=' + self.Query() +
                        '&resultsReturned=' + queryResults.length
                    });
                }

                return allObjects;
            };
            self.PopulateDatasetFilters = function (datasets) {
                var temp = [];
                var pageType = '1_'

                //CATEGORY FILTER
                var param = getParameterByName('category');

                for (var item, i = 0; item = datasets[i++];) {
                    var category = item.Category;

                    if (!(category in categoryLookup)) {
                        categoryLookup[category] = 1;
                        self.CategoryFilters.push(new Filter(pageType + '0_' + i, category, 'Category'));

                        temp.push(new Filter(pageType + '0_' + i, category, 'Category'));

                        if (category == param) {
                            self.SelectedFilters.push(pageType + '0_' + i);
                        }
                    }
                }

                var item;

                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }

                self.AllFilters.push(new FilterCategory('Category', temp, 'blue'));
                temp = [];



                //SENTRYOWNER FILTER
                for (var item, i = 0; item = datasets[i++];) {
                    var owner = item.SentryOwner;

                    if (!(owner in ownerLookup)) {
                        ownerLookup[owner] = 1;
                        self.OwnerFilters.push(new Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                        //self.SearchFilters.push(new Filter('1_' + i, owner, 10));

                        temp.push(new Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                    }

                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Sentry Owner') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Sentry Owner', temp, 'green'));
                temp = [];


                //EXTENSION FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = datasets[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new Filter(pageType + '3_' + counter, ext, 'Extension'));
                            //self.SearchFilters.push(new Filter('1_' + i, owner, 10));

                            temp.push(new Filter(pageType + '3_' + counter, ext, 'Extension'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Extension') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Extension', temp, 'plum'));
            };
            self.PopulateExhibitFilters = function (exhibits) {
                var temp = [];
                var pageType = '2_'

                //CATEGORY FILTER
                var param = getParameterByName('category');

                for (var item, i = 0; item = exhibits[i++];) {
                    var category = item.Category;

                    if (!(category in categoryLookup)) {
                        categoryLookup[category] = 1;
                        self.CategoryFilters.push(new Filter(pageType + '0_' + i, category, 'Category'));
                        //self.SearchFilters.push(new Filter('0_' + i, category, 10));

                        temp.push(new Filter(pageType + '0_' + i, category, 'Category'));

                        if (category == param) {
                            self.SelectedFilters.push(pageType + '0_' + i);
                        }

                    }
                }

                var item;


                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }

                self.AllFilters.push(new FilterCategory('Category', temp, 'blue'));
                temp = [];


                //EXTENSION FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = exhibits[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new Filter(pageType + '2_' + counter, ext, 'Report Type'));
                            //self.SearchFilters.push(new Filter('1_' + i, owner, 10));

                            temp.push(new Filter(pageType + '2_' + counter, ext, 'Report Type'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Report Type') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Report Type', temp, 'plum'));
                temp = [];

                //TAG FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = exhibits[i++];) {
                    if (item.Tags != null) {
                        var Tags = item.Tags;
                        //Loop through list of Tags on each item
                        for (var tag, j = 0; tag = Tags[j++];) {
                            if (!(tag.Name in tagLookup)) {
                                tagLookup[tag.Name] = 1;
                                self.TagFilters.push(new Filter(pageType + '3_' + counter, tag.Name, 'Tag'));

                                temp.push(new Filter(pageType + '3_' + counter, tag.Name, 'Tag'));
                                counter++;
                            }
                        }
                    }                    
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Tag') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Tag', temp, 'gold'));
                temp = [];

            };
            self.PopulateGenericFilters = function (allObjects) {
                var temp = [];
                var pageType = '3_'
                 
                //CATEGORY FILTER
                var param = getParameterByName('category');

                for (var item, i = 0; item = allObjects[i++];) {
                    var category = item.Category;

                    if (!(category in categoryLookup)) {
                        categoryLookup[category] = 1;
                        self.CategoryFilters.push(new Filter(pageType + '0_' + i, category, 'Category'));

                        temp.push(new Filter(pageType + '0_' + i, category, 'Category'));

                        if (category == param) {
                            self.SelectedFilters.push(pageType + '0_' + i);
                        }
                    }
                }

                var item;

                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Category') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }

                self.AllFilters.push(new FilterCategory('Category', temp, 'blue'));
                temp = [];



                //SENTRYOWNER FILTER
                for (var item, i = 0; item = allObjects[i++];) {
                    var owner = item.SentryOwner;

                    if (!(owner in ownerLookup)) {
                        ownerLookup[owner] = 1;
                        self.OwnerFilters.push(new Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                        //self.SearchFilters.push(new Filter('1_' + i, owner, 10));

                        temp.push(new Filter(pageType + '1_' + i, owner, 'Sentry Owner'));
                    }

                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Sentry Owner') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Sentry Owner', temp, 'green'));
                temp = [];


                //EXTENSION FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = allObjects[i++];) {
                    for (var ext, j = 0; ext = item.DistinctFileExtensions[j++];) {
                        if (!(ext in extensionLookup)) {
                            extensionLookup[ext] = 1;
                            self.ExtensionFilters.push(new Filter(pageType + '3_' + counter, ext, 'Extension'));
                            //self.SearchFilters.push(new Filter('1_' + i, owner, 10));

                            temp.push(new Filter(pageType + '3_' + counter, ext, 'Extension'));
                            counter++;
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Extension') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Extension', temp, 'plum'));

                //TAG FILTER
                counter = 0; //Needs seperate counter as multiple objects can appear per iteration
                for (var item, i = 0; item = allObjects[i++];) {
                    if (item.Tags != null) {
                        var Tags = item.Tags;
                        //Loop through list of Tags on each item
                        for (var tag, j = 0; tag = Tags[j++];) {
                            if (!(tag.Name in tagLookup)) {
                                tagLookup[tag.Name] = 1;
                                self.TagFilters.push(new Filter(pageType + '4_' + counter, tag.Name, 'Tag'));

                                temp.push(new Filter(pageType + '4_' + counter, tag.Name, 'Tag'));
                                counter++;
                            }
                        }
                    }
                }
                ko.utils.arrayForEach(self.AllFilters(), function (v) {
                    if (v.Name == 'Tag') {
                        item = v;
                    }
                });
                if (item !== undefined) {
                    temp = item.Filters().concat(temp);
                    ko.utils.arrayRemoveItem(self.AllFilters(), item);
                }
                self.AllFilters.push(new FilterCategory('Tag', temp, 'gold'));
                temp = [];
            };

            self.RemoveSelection = function (id) {
                console.log('Removing : ' + id);


                self.SelectedFilters.remove(function (feature) {
                    return feature == id;
                });
            }

            self.clearFilters = function () {
                self.SelectedFilters.removeAll();
            };

            self.SearchType = ko.computed(function () {
                return getSearchType();
            });

            self.IsShownForCurrentType = function (what) {
                return what === getDetailType();
            };

            var loaded = false;

            var categoryLookup = {};
            var ownerLookup = {};
            var extensionLookup = {};
            var tagLookup = {};

            self.populateFilters = function () {

                var allData = self.datasets();

                if (self.SearchType() == "Datasets") {
                    self.PopulateDatasetFilters(allData);
                } else if (self.SearchType() == "BusinessIntelligence") {
                    self.PopulateExhibitFilters(allData);
                } else {
                    self.PopulateGenericFilters(allData);
                }
                
            };

            // Load initial state from server, convert it to Dataset instances, then populate self.datasets
            url = "/Search/" + self.SearchType() + "/List"
            $.getJSON(url, function (allData) {
                var mappedTasks = $.map(allData, function (item) { return new Dataset(item) });

                self.datasets(self.datasets().concat(mappedTasks));

                //request.send();
                //request2.send();

                self.populateFilters();

                $('#dataColumn').show();
                $('#filterColumn').show();
                $('.sentry-spinner-container').remove();
                $('.select2-search__field').css({ width: '500px' });
                $('#filterSelector').val(self.SelectedFilters()).trigger('change');
            });

            self.searchResults = ko.computed(function () {

                if (!loaded) {
                    var list = JSON.parse(localStorage.getItem("filteredIds"));

                    if (list != undefined) {

                        for (var i = 0; i < list.length; i++) {
                            self.SelectedFilters.push(list[i]);
                        }
                    }

                    if (getParameterByName('searchPhrase')) {
                        self.Query(getParameterByName('searchPhrase'));
                    }
                    else if (getParameterByName('category')) {
                        self.Query('');
                    }
                    else {
                        var searchText = localStorage.getItem("searchText");

                        if (searchText != undefined && searchText != "") {
                            self.Query(searchText);
                        }
                    }
                    loaded = true;
                }
                else {
                    localStorage.setItem("searchText", self.Query());
                }

                var searchQuery = self.Query().split(" ");


                var temp = [];

                for (var i = 0; i < self.datasets().length; i++) {
                    var keywordFound = false;
                    var count = 0;
                    var dataset = self.datasets()[i];

                    for (var j = 0; j < searchQuery.length; j++) {
                        var desc = dataset.DatasetDesc.toString();
                        var name = dataset.DatasetName.toString();
                        var owner = dataset.SentryOwner.toString();

                        if (desc.toLowerCase().indexOf(searchQuery[j].toLowerCase()) >= 0) {
                            keywordFound = true;
                            count++;
                        }
                        if (owner.toLowerCase().indexOf(searchQuery[j].toLowerCase()) >= 0) {
                            keywordFound = true;
                            count++;
                        }
                        if (name.toLowerCase().indexOf(searchQuery[j].toLowerCase()) >= 0) {
                            keywordFound = true;
                            count++;
                        }
                    }
                    if (keywordFound) {
                        temp.push({ dataset: dataset, count: count });
                    }
                }

                temp = temp.sort(function (left, right) {
                    return right.count - left.count || new Date(right.dataset.ChangedDtm) - new Date(left.dataset.ChangedDtm);
                });

                queryResults = temp.map(x => x.dataset);
                var selectedCategoryList = [];

                        if (self.SearchType() == "Datasets") {
                            queryResults = self.FilterDatasets(queryResults);
                        } else if (self.SearchType() == "BusinessIntelligence") {
                            queryResults = self.FilterExhibits(queryResults);
                        } else {
                            queryResults = self.FilterGeneric(queryResults);
                            }

                        $("#SearchText").attr("placeholder", "Search " + queryResults.length + " Datasets...");

                        return queryResults;
                    });

                    self.SelectedFilters.subscribe(function () {
                        localStorage.setItem("filteredIds", ko.toJSON(self.SelectedFilters()));
                        $('#filterSelector').val(self.SelectedFilters()).trigger('change');

                    });

                    self.GetFile = function (data) {

                        $.ajax({
                            url: '/ExternalFile/HasReadPermissions?pathAndFilename=' + encodeURIComponent(data.Location),
                            method: "GET",
                            dataType: 'json',
                            success: function (obj) {
                                if (obj.HasPermission) {
                                    var url = '/ExternalFile/DownloadExternalFile?pathAndFilename=' + encodeURIComponent(data.Location);
                                    window.open(url);
                                }
                                else {
                                    Sentry.ShowModalAlert(
                                        "User does not have sufficient permissions to selected file. </br></br>  Contact <b>" + data.SentryOwner + "</b> to request access to exhibit."
                                    );
                                }
                            },
                            error: function (obj) {
                                Sentry.ShowModalAlert("Failed permissions check, please try again.  If problem persists, please contact <a mailto:DSCSupport@sentry.com></a>");
                            }
                        });
                    };
                }


        $(document).ready(function () {
            window.vm = new ListViewModel();
            ko.applyBindings(vm);

            if (window.location.href.match(/&ids=/)) {

            }
            else {
                window.vm.clearFilters();
            }
            


            $(document).on("click", "[id^='filterType_']", function (e) {
                e.preventDefault();

                var id = $(this).attr("id");
                var category = "#hide_" + id
                var icon = "#icon_" + id;

                $(category).slideToggle();
                $(icon).toggleClass("glyphicon-chevron-down glyphicon-chevron-up");
            });

            $(document).on("click", "[id^='filterMore_']", function (e) {
                e.preventDefault();

                var id = $(this).attr("id");
                var show = "#hidden_" + id
                var icon = "#icon_" + id;
                var txt = "#txt_" + id;

                $(show).slideToggle();
                $(icon).toggleClass("glyphicon-plus-sign glyphicon-minus-sign");

                if ($(txt).text() == "Show Less") {
                    $(txt).text("Show More");
                }
                else {
                    $(txt).text("Show Less");
                }
            });

            $(document).on("click", "[id^='btnFavorite']", function (e) {
                e.preventDefault();

                var button = $(this);
                var id = button.attr("data");

                if (button.hasClass("glyphicon-star")) {

                    $.ajax({
                        url: '/Dataset/SetFavorite?datasetId=' + encodeURIComponent(id),
                        method: "GET",
                        dataType: 'json',
                        success: function () {
                            Sentry.ShowModalAlert("Favorite has been removed."
                            );
                        },
                        error: function () {
                            Sentry.ShowModalAlert("Failed to remove favorite.");
                        }
                    });
                }
                else if (button.hasClass("glyphicon-star-empty")) {

                    $.ajax({
                        url: '/Dataset/SetFavorite?datasetId=' + encodeURIComponent(id),
                        method: "GET",
                        dataType: 'json',
                        success: function () {
                            Sentry.ShowModalAlert("Favorite has been added."
                            );
                        },
                        error: function () {
                            Sentry.ShowModalAlert("Failed to set favorite.");
                        }
                    });
                }

                $(this).toggleClass("glyphicon-star glyphicon-star-empty");

            });
        });

        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }

        function getSearchType() {
            var regex = /\/Search\/(\w+)/,
                url = window.location.href;
            return regex.exec(url)[1];
        }

    </script>
}
