@model Sentry.data.Web.Models.Config.DataSourceTokenModel
@using (Html.BeginCollectionItem("Tokens"))
{
    <div class="card mb-3">
        @if (Model != null)
        {
            @Html.HiddenFor(model => model.Id, new { @class = "tokenId"})
            @Html.HiddenFor(model => model.ToDelete, new { @class = "toDeleteMarker"})
        }
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <div class="md-form my-0">
                        @Html.LabelFor(m => m.TokenName, new { @class = "control-label" })
                        @Html.TextBoxFor((model) => model.TokenName, new { @class = "form-control" })
                        @Html.ValidationMessageFor((model) => model.TokenName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col">
                    <div class="md-form my-0">
                        @Html.LabelFor(m => m.TokenUrl, new { @class = "control-label" })
                        @Html.TextBoxFor((model) => model.TokenUrl, new { @class = "form-control" })
                        @Html.ValidationMessageFor((model) => model.TokenUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="md-form mt-3">
                @Html.LabelFor(m => m.CurrentToken, new { @class = "control-label" })
                @Html.TextBoxFor((model) => model.CurrentToken, new { @class = "form-control" })
                @Html.ValidationMessageFor((model) => model.CurrentToken, "", new { @class = "text-danger" })
            </div>
            <div class="md-form">
                @Html.LabelFor(m => m.RefreshToken, new { @class = "control-label" })
                @Html.TextBoxFor((model) => model.RefreshToken, new { @class = "form-control" })
                @Html.ValidationMessageFor((model) => model.RefreshToken, "", new { @class = "text-danger" })
            </div>
            <div class="row">
                <div class="col-3">
                    <div class="md-form my-0">
                        @Html.LabelFor(m => m.TokenExp, new { @class = "control-label w-100" })
                        @Html.EditorFor((model) => model.TokenExp, new { @class = "form-control" })
                        @Html.ValidationMessageFor((model) => model.TokenExp, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-9">
                    <div class="md-form my-0">
                        @Html.LabelFor(m => m.Scope, new { @class = "control-label" })
                        @Html.TextBoxFor((model) => model.Scope, new { @class = "form-control" })
                        @Html.ValidationMessageFor((model) => model.Scope, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="mt-3 d-inline-block">
                @Html.CheckBoxSimpleFor(m => m.Enabled, new { @class = "form-check-input" })
                @Html.LabelFor(m => m.Enabled, new { @class = "form-check-label" })
            </div>
            <button type="button" class="btn d-none btn-warning waves-effect waves-light float-r cancelDelete">Cancel Delete</button>
            <button type="button" class="btn btn-danger waves-effect waves-light float-r removeToken">Remove</button>
        </div>
    </div>
}
