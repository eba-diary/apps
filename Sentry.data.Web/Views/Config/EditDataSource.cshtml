@using Sentry.data.Core;
@model Sentry.data.Web.DataSourceModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="alertRow" class="row" style="position: relative; z-index: 999">
    <div class="col-lg-12">
        <div id="alertContainer" class="bs-component">
            <div id="configWarningAlert" class="alert" style="display: none;">
                <button type="button" class="close" data-dismiss="alert">×</button>
                <h4 id="configWarningHeader">Warning!</h4>
                <p id="configWarningText"></p>
            </div>
        </div>
    </div>
</div>

<div class="topBanner">
    <div>
        <a class="backToList" href="/"><span class="glyphicon glyphicon-chevron-left"></span>Back to Previous Page</a>
    </div>

</div>


@using (Html.BeginForm("DataSourceForm", "Config", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ReturnUrl)
    @Html.HiddenFor(model => model.Name)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.SourceType)
    @Html.HiddenFor(model => model.BaseUri)

    <h1>Edit Data Source</h1>
    <hr />

    <div id="myTabContent" class="tab-content">
        <div id="informationPanel" class="tab-pane fade active in form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Name, new { @disabled = "disabled", @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Description, new { @value = "", @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor((model) => model.SourceType, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor((model) => model.SourceType, Model.SourceTypesDropdown, new { @readonly = "readonly", @disabled = "disabled", @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor((model) => model.SourceType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group fieldDescription">
                <label class="control-label col-md-2"></label>
                <div class="col-md-10">
                    <span class="text-muted">
                        <em id="sourceDescription"></em>
                    </span>
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.BaseUri, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.BaseUri, new { @value = "", @disabled = "disabled", @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor(model => model.BaseUri, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="authPanel">
                <div class="form-group">
                    @Html.LabelFor((model) => model.AuthID, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor((model) => model.AuthID, Model.AuthTypesDropdown, new { @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.AuthID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group fieldDescription">
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10">
                        <span class="text-muted">
                            <em id="authDescription"></em>
                        </span>
                    </div>
                </div>
            </div>

            <div id="userPassPanel">
                <div class="form-group">
                    @Html.LabelFor((model) => model.IsUserPassRequired, new { @class = "control-label col-md-2" })
                    <div class="col-md-1">
                        @Html.CheckBoxFor((model) => model.IsUserPassRequired, new { @class = "edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.IsUserPassRequired, "", new { @class = "text-danger" })
                    </div>
                    <div id="userPassNotificationPanel" class="credentialWarning">
                        <div class="col-md-9">
                            <em>Work with data.sentry.com administrators to configure credentials.  The data source will not operate until credentials are configured.</em>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tokenAuthPanel">
                <div class="form-group">
                    @Html.Label("Authentication Header", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="col-md-5 headerEntry">
                            @Html.Label("Token Header Name", new { @class = "col-md-5 headerEntryLabel" })
                            @Html.TextBoxFor(m => m.TokenAuthHeader, new { @value = "", @class = "form-control edit-dataset-row col-md-3" })
                        </div>
                        <div class="col-md-5 headerEntry">
                            @Html.Label("Token Value", new { @class = "col-md-5 headerEntryLabel" })
                            @Html.PasswordFor(m => m.TokenAuthValue, new { @value = "", @class = "form-control edit-dataset-row col-md-3", @placeholder = "Leave blank to retain current token value" })
                        </div>
                    </div>
                </div>
            </div>

            <div id="OAuthPanel">
                <div class="form-group">
                    @Html.LabelFor(m => m.ClientId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor((model) => model.ClientId, new { @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.ClientId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ClientPrivateId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor((model) => model.ClientPrivateId, new { @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.ClientPrivateId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TokenUrl, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor((model) => model.TokenUrl, new { @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.TokenUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TokenExp, new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.TextBoxFor((model) => model.TokenExp, new { @value = "", @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.TokenExp, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Scope, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor((model) => model.Scope, new { @class = "form-control edit-dataset-row" })
                        @Html.ValidationMessageFor((model) => model.Scope, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div id="portNumberPanel">
                <div class="form-group">
                    @Html.LabelFor(model => model.PortNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.PortNumber, new { @value = "", @class = "form-control edit-dataset-row col-md-3" })
                        @Html.ValidationMessageFor(model => model.PortNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group fieldDescription">
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10 text-muted">
                        <em>Industry statandard default port values:</em>
                        <ul>
                            <li><em>FTP : 21</em></li>
                            <li><em>SSH\SFTP : 22</em></li>
                            <li><em>HTTPS : 443</em></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div id="requestHeaderPanel">
                <div class="form-group">
                    @Html.LabelFor((model) => model.Headers, new { @class = "control-label col-md-2" })
                    <div id="requestHeader" class="col-md-10">
                        <div class="form-group col-md-10 headerEntry">
                            <a class="addHeader" style="display: inline-block; margin-left: 10px;"><span class="glyphicon glyphicon-plus"></span> Add Header</a>
                        </div>
                        <div class="col-md-5 headerEntryLabel">
                            @Html.Label("Header Name", new { @value = "", @class = "col-md-5 headerEntryLabel" })
                        </div>
                        <div class="col-md-5 headerEntryLabel">
                            @Html.Label("Header Value", new { @value = "", @class = "col-md-5 headerEntryLabel" })
                        </div>
                        @*This approach is described at the site http://ivanz.com/2011/06/16/editing-variable-length-reorderable-collections-in-asp-net-mvc-part-1/*@
                        @foreach (RequestHeader header in Model.Headers)
                        {
                            Html.RenderPartial("_Headers", header);
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <span class="text-muted"><em>** Fields in <b>Bold</b> are Required</em></span>
    </div>
    <div class="form-group">
        <div>
            <input type="submit" id="btnCreateDataSource" value="Save" class="btn btn-primary" />
        </div>
    </div>
}

<style>
    .headerEntry, .headerEntryLabel {
        padding-left: 0px;
    }
</style>


@section Scripts {

    <script>
        $(document).ready(function () {

            function setAuthTypePanels(authType) {

                if (authType == 'Anonymous Authentication') {
                    $('#requestHeaderPanel').hide();
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
                else if (authType == 'Basic Authentication') {
                    $('#requestHeaderPanel').hide();
                    $('#userPassPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
                else if (authType == 'Token Authentication') {
                    $('#requestHeaderPanel').show();
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').show();
                    $('#OAuthPanel').hide();
                }
                else if (authType == 'OAuth 2.0 Authentication') {
                    $('#requestHeaderPanel').hide();
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').show();
                    $('#OAuthPanel').show();
                }
                else {
                    $('#requestHeaderPanel').hide();
                    $('#userPassPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
            }

            function setSourceTypeDefaults(sourceType) {
                var authtxt = $('#AuthID').find(":selected").text()

                setAuthTypePanels(authtxt)

                if (sourceType == "SFTP" || sourceType == "FTP") {
                    //Assign Default values
                    if (sourceType == "SFTP") {
                        //User\Pass is required, so check and disable for changing
                        $('#IsUserPassRequired').attr('disabled', true);

                        //Set Authentication to Basic and disable as this is the only choice
                        $('#AuthID').attr('disabled', true);
                    }
                    else if (sourceType == "FTP") {
                        //User\Pass is not required, so uncheck and disable for changing
                        $('#IsUserPassRequired').attr('disabled', false);

                        //Enable Auth picker and set to default value
                        $('#AuthID').attr('readonly', false); // enabling picker
                    }

                    //$('#portNumberPanel').show();
                    //$('#userPassPanel').show();
                    //$('#authPanel').show();
                    //$('#tokenAuthPanel').hide();
                    //$('#requestHeaderPanel').hide();
                }
                else if (sourceType == "HTTPS") {
                    $('#IsUserPassRequired').attr('disabled', true);
                    $('#userPassPanel').hide();
                    if (authtxt == 'Token Authentication') {
                        $('#requestHeaderPanel').show();
                        $('#tokenAuthPanel').show();
                        $('#userPassPanel').hide();
                        $('#OAuthPanel').hide();
                    }
                    else if (authtxt == 'OAuth 2.0 Authentication') {
                        $('#requestHeaderPanel').hide();
                        $('#tokenAuthPanel').hide();
                        $('#userPassPanel').hide();
                        $('#OAuthPanel').show();
                    }
                    else {
                        $('#requestHeaderPanel').hide();
                        $('#tokenAuthPanel').hide();
                        $('#userPassPanel').hide();
                        $('#OAuthPanel').hide();
                    }
                }
                else if (sourceType == "S3Basic" || sourceType == "DFSCustom") {

                    //User\Pass is not required, so uncheck and disable
                    $('#IsUserPassRequired').attr('disabled', true);

                    //Default authentication and disable
                    $('#AuthID').attr('readonly', true);

                    $('#portNumberPanel').hide();
                    $('#userPassPanel').hide();
                    $('#authPanel').hide();
                    $('#tokenAuthPanel').hide();
                }
                else {
                    $('#portNumberPanel').hide();
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.attr('disabled', false);
                    $('#userPassPanel').show();
                    $('#authPanel').hide();
                }
            }

            $('.backToList').attr("href", document.referrer);
            $('#ReturnUrl').val(document.referrer);

            setSourceTypeDefaults($('#SourceType').val())

            $("#SourceType").change(function () {
                var val = $(this).val();
                var subItems = "";

                $.getJSON("@Url.Action("SourceTypeDescription", "Config")", {sourceType:val} ,function (data) {

                    $("#sourceDescription").text(data);
                });
            });

            var val = $("#SourceType").val();
            $.getJSON("@Url.Action("SourceTypeDescription", "Config")", {sourceType:val} ,function (data) {
                $("#sourceDescription").text(data);
            });

            var val = $("#AuthID").val();
            $.getJSON("@Url.Action("AuthTypeDescription", "Config")", {AuthID:val} ,function (data) {
                $("#authDescription").text(data);
            });

            $("#AuthID").change(function () {
                var val = $(this).val();
                var txt = $(this).find(":selected").text()
                var subItems = "";

                $.getJSON("@Url.Action("AuthTypeDescription", "Config")", {AuthID:val} ,function (data) {

                    $("#authDescription").text(data);
                });

                if (txt == 'Anonymous Authentication') {
                    $('#IsUserPassRequired').prop('checked', false);
                    $('#IsUserPassRequired').attr('disabled', true);
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
                else if (txt == 'Basic Authentication') {
                    $('#IsUserPassRequired').prop('checked', true);
                    $('#IsUserPassRequired').attr('disabled', true);
                    $('#IsUserPassRequired').trigger("change");
                    $('#userPassPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                } else if (txt == 'Token Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);
                    userpasschkbx.trigger("change");
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').show();
                    $('#OAuthPanel').hide();
                } else if (txt == 'OAuth 2.0 Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);
                    userpasschkbx.trigger("change");
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').show();
                } else {
                    $('#IsUserPassRequired').attr('disabled', false);
                    $('#userPassPanel').show();
                    $('#OAuthPanel').hide();
                }
            });

            function HideAlert() {
                $('#configWarningAlert').hide();
            };

            $('#IsUserPassRequired').change(function () {
                if ($(this).prop('checked') == false) {
                    HideAlert();
                }
                else {
                    var text = "<p>Any jobs referencing this data source will fail until data.sentry.com administrators configure the credentials.</p>" +
                        "<p>Please click <a href= \"mailto:DSCSupport@sentry.com?Subject=Data&nbsp;Source&nbsp;Credentials&nbsp;Request&Body=Please contact me regarding setting up credentials for a new data source.%0AData Source Name: <Insert Your Value>%0ASource Type: <Insert Your Value>%0ABaseUri: <Insert Your Value>\" > here </a > to start request for credential setup.</p > ";

                    PassHelpText("Warning", text);
                }
            });

            function PassHelpText(type, information) {

                var banner;
                var header;
                var text;

                if ($('#alertContainer').children().length == 0) {
                    $('#alertContainer').append("<div id=\"configWarningAlert\" class=\"alert alert-dismissable alert-warning\">" +
                        "<button type=\"button\" class=\"close\" data-dismiss=\"alert\">×</button>" +
                        "<h4 id=\"configWarningHeader\">Warning!</h4>" +
                        "<p id=\"configWarningText\"></p>" +
                        "</div>");
                }

                banner = $('#configWarningAlert');
                header = $('#configWarningHeader');
                text = $('#configWarningText');

                text.empty();

                if (information.startsWith('u\'')) {
                    information = information.substr(2, information.length - 1);
                }

                text.append(information);
                Banner = information;
                AlertLevel = type;

                if (type == "Warning") {
                    banner.switchClass("alert-success", "alert-warning", 10);
                    banner.switchClass("alert-info", "alert-warning", 10);
                    header.text("Warning!");

                } else if (type == "Success") {
                    banner.switchClass("alert-warning", "alert-success", 10);
                    banner.switchClass("alert-info", "alert-success", 10);
                    header.text("Success");
                } else if (type == "Error") {
                    banner.switchClass("alert-warning", "alert-danger", 10);
                    banner.switchClass("alert-info", "alert-danger", 10);
                    header.text("Error");
                } else {
                    banner.switchClass("alert-warning", "alert-info", 10);
                    banner.switchClass("alert-success", "alert-info", 10);
                    header.text("Information");
                }

                banner.show();

            }

            $('body').on('click', '.removeHeader', function () {

                $(this).parent().parent().remove();
            });

            $('.addHeader').click(function () {
                //This approach is described at the site below
                // http://ivanz.com/2011/06/16/editing-variable-length-reorderable-collections-in-asp-net-mvc-part-1/
                $.get("@Url.Action("HeaderEntryRow", "Config")", function (template) {
                    $('#requestHeader').append(template);
                });
            });

            // For certain types of Data Sources the isUserPassRequired checkbox required to be true.  Setting a checkboxfor to readonly still allows
            //   a user to change the value.  A workaround being used for this property is using jquery to disable the property
            //   for the specific data source types which require it to be true.  Then a $('form').on('submit') function
            //   enables the checkbox right before submitting the form.  This allows the value to be passed back to the controller.
            //https://stackoverflow.com/questions/40134337/set-mvc-checkbox-to-readonly-or-disabled-on-client-side
            $("form").on("submit", function (e) {
                $('#IsUserPassRequired').attr('disabled', false);
                $('#AuthID').attr('disabled', false);
            });
        });
    </script>

}
