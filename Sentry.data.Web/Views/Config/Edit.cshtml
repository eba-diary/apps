@model Sentry.data.Web.EditDatasetFileConfigModel
@{
    ViewBag.Title = "Edit Data File Config";
}

<div>
    <a class="backToList" href="/Config/Dataset/@Model.DatasetId"><span class="glyphicon glyphicon-chevron-left"></span>Back to Dataset Configuration</a>
</div>


<h1>Basic Configuration</h1>

<hr/>

@{using (Html.BeginForm("DatasetFileConfigForm", "Config", FormMethod.Post))
{
        @Html.AntiForgeryToken()

        <style>
        </style>

        <div class="form-horizontal">
            @Html.DisplayFor((model) => ViewData.ModelState)

            @Html.HiddenFor(model => model.ConfigId, new { @name = "configId" })
            @Html.HiddenFor(model => model.ConfigFileName)
            @Html.HiddenFor(model => model.FileTypeId)
            @Html.HiddenFor(model => model.DatasetId)
            @Html.HiddenFor(model => model.ModifyType)
            @Html.HiddenFor(model => model.DatasetScopeTypeID)
            @Html.HiddenFor(model => model.FileExtensionID)
            @{Model.ModifyType = ViewBag.ModifyType;}

            <div class="form-group">
                @Html.LabelFor(m => m.ConfigFileName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-4">
                    @Html.DisplayFor(m => m.ConfigFileName, new { htmlAttributes = new { @class = "from-control-static" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ConfigFileDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-9">
                    @Html.TextAreaFor(m => m.ConfigFileDesc, new { @class = "form-control ConfigFileDesc" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FileType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-4">
                    @if (Model.Security.ShowAdminControls)
                    {
                        @Html.DropDownListFor((model) => model.FileType, Model.AllDataFileTypes, new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.FileType, new SelectList(Model.AllDataFileTypes, "Text", "Text", Model.FileType), new { @disabled = "disabled", @readonly = "readonly", @class = "form-control " })
                        @Html.HiddenFor(model => model.CreateCurrentView)
                    }
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor((model) => model.DatasetScopeTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.DatasetScopeTypeID,
               new SelectList(Model.AllDatasetScopeTypes, "Value", "Text", Model.DatasetScopeTypeID), new { @disabled = "disabled", @readonly = "readonly", @class = "form-control" })
                </div>
            </div>
            @*<div class="form-group">
            @Html.LabelFor(m => m.DropPath, htmlAttributes: new { @class = "control-label col-sm-3" })
            <div class="col-sm-9">
                @Html.DisplayFor(m => m.DropPath, new { htmlAttributes = new { @class = "from-control-static" } })
                @Html.EditorFor(model => model.DropPath, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control edit-dataset-row" } })
                    @Html.ValidationMessageFor(model => model.DropPath, "", new { @class = "text-danger" })
            </div>
        </div>*@
            <div class="form-group">
                @Html.LabelFor((model) => model.FileExtensionID, new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.FileExtensionID,
               new SelectList(Model.ExtensionList, "Value", "Text", Model.FileExtensionID), new { @disabled = "disabled", @readonly = "readonly", @class = "form-control" })
                </div>
            </div>

            @if (Model.Security.ShowAdminControls)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.CreateCurrentView, new { @class = "control-label col-md-2 optional" })
                    <div class="col-md-1">
                        @Html.CheckBoxFor(model => model.CreateCurrentView, new { htmlAttributes = new { @class = "form-control edit-dataset-row" } })
                    </div>
                    @Html.Label("A view will be created filtering to data within latest file loaded into this schema", new { @class = "control-label col-md-9 optional text-muted", @style = "text-align: left" })
                </div>
            }

            <div class="form-group fieldDescription">
                <label class="control-label col-md-2"></label>
                <div class="col-md-10">
                    <span class="text-muted">
                        <em> Data.Sentry.com has ID's associated to the Schema / Metadata Repository.  This can be set to 0 and filled in later.</em>
                    </span>
                </div>
            </div>


            <hr />
            <div class="form-group">
                <span class="text-muted"><em>** Fields in <b>Bold</b> are Required</em></span>
            </div>
            <div class="form-group">
                <div>
                    <input type="submit" value="Edit Config File" class="btn btn-primary" />
                    <a class="btn btn-warning" href="/Config/Dataset/@Model.DatasetId">Cancel</a>
                </div>
            </div>
        </div>
    }
}

@section Scripts {
    <script>
        $(function () {
            data.ManageConfigs.EditConfigInit();
        });
    </script>
}
