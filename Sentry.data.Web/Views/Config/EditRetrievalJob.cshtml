@model Sentry.data.Web.EditJobModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="topBanner">
    <div>
        <a class="backToList" href="/Config/Dataset/@Model.DatasetID"><span class="glyphicon glyphicon-chevron-left"></span>Back to Dataset Configuration</a>
    </div>
</div>

@using (Html.BeginForm("EditRetrievalJob", "Config", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @*Show the custom validation summary*@
    @Html.DisplayFor((model) => ViewData.ModelState)

    @Html.HiddenFor(model => model.JobID)
    @Html.HiddenFor(model => model.DatasetID)
    @Html.HiddenFor(model => model.DatasetConfigID)
    @Html.HiddenFor(model => model.CreateCurrentFile)
    @Html.HiddenFor(model => model.OverwriteDataFile)

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <h1>Edit Dataset Retrieval Job</h1>
    <hr />
    <h3>Data Source Information</h3>
    <hr/>
    <div id="myTabContent" class="tab-content">
        <div id="informationPanel" class="tab-pane fade active in form-horizontal">
            <div class="form-group">
                @Html.LabelFor((model) => model.SelectedSourceType, new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @if (Model.IsGeneric)
                    {
                        @Html.DropDownListFor((model) => model.SelectedSourceType, Model.SourceTypesDropdown, new { @readonly = "readonly", @disabled = "disabled", @class = "form-control edit-dataset-row" })
                    }
                    else
                    {
                        @Html.DropDownListFor((model) => model.SelectedSourceType, Model.SourceTypesDropdown, new { @class = "form-control edit-dataset-row" })
                    }
                    @Html.ValidationMessageFor((model) => model.SelectedSourceType, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor((model) => model.SelectedDataSource, new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @if (Model.IsGeneric)
                    {
                        @Html.DropDownListFor((model) => model.SelectedDataSource, Model.SourcesForDropdown, new { @readonly = "readonly", @disabled = "disabled", @class = "form-control edit-dataset-row" })
                    }
                    else
                    {
                        @Html.DropDownListFor((model) => model.SelectedDataSource, Model.SourcesForDropdown, new { @class = "form-control edit-dataset-row" })
                    }


                    @Html.ValidationMessageFor((model) => model.SelectedDataSource, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="dataSourceInfoPanel">
                <div class="form-group">
                    <label class="col-md-offset-2 col-md-1">Owner:</label>
                    <div class="col-md-2" id="primaryOwner"></div>
                    <label class="col-md-1">Contact:</label>
                    <div class="col-md-2" id="primaryContact"><a id="dataSourceContactEmail" href=""></a></div>
                </div>
            </div>

            <div class="form-group fieldDescription">
                <label class="control-label col-md-2"></label>
                <div class="col-md-10">
                    <span class="text-muted">
                        <em id="dataSourceDescription"></em>
                    </span>
                </div>
            </div>

            <div class="form-group editDataSourceLink" style="display:none;">
                <label class="control-label col-md-2"></label>
                <div class="col-md-10">
                    <a id="editDataSource" class="backToList" href="/Config/Source/Edit"><span class="glyphicon glyphicon-chevron-right"></span>Edit Data Source</a>
                </div>
            </div>

            @if (Model.Security.CanCreateDataSource)
            {
                <div class="form-group">
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10">
                        <a class="backToList" href="/Config/Source/Create"><span class="glyphicon glyphicon-plus"></span>Create new Data Source</a>
                    </div>
                </div>
            }


                <div class="questionairePanel">
                    <hr />
                    <h3>Job Information</h3>
                    <hr />

                    <div class="jobquestion sourceLocation">
                        <div class="form-group configQuestion">
                            <div class="col-md-12">
                                <h6>Where is the source file?</h6>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RelativeUri, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type="text" id="baseURLTextBox" readonly="readonly" disabled="disabled" class="form-control edit-dataset-row col-md-4" style="width:40%;" />
                                @if (Model.IsGeneric)
                                {
                                    @Html.TextBoxFor(model => model.RelativeUri, new { @readonly = "readonly", @disabled = "disabled", @class = "form-control edit-dataset-row col-md-6", @style = "width:60%;" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.RelativeUri, new { @class = "form-control edit-dataset-row col-md-6", @style = "width:60%;" })
                                }

                                @Html.ValidationMessageFor(model => model.RelativeUri, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group fieldDescription">
                            <label class="control-label col-md-2"></label>
                            <div class="col-md-10">
                                <span class="text-muted">
                                    <em id="baseURL"></em>
                                </span>
                            </div>
                        </div>

                        <div class="httpSourcePanel" style="display:none;">

                            <div class="form-group">
                                @Html.LabelFor(model => model.SelectedRequestMethod, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.SelectedRequestMethod, Model.RequestMethodDropdown, new { @class = "form-control edit-dataset-row", })
                                    @Html.ValidationMessageFor(model => model.SelectedRequestMethod, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="httpPostPanel" style="display:none;">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SelectedRequestDataFormat, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.SelectedRequestDataFormat, Model.RequestDataFormatDropdown, new { @class = "form-control edit-dataset-row", })
                                        @Html.ValidationMessageFor(model => model.SelectedRequestDataFormat, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.HttpRequestBody, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.HttpRequestBody, new { rows = "15", cols = "132", htmlAttributes = new { @class = "form-control edit-dataset-row,", @placeholder = "JSON format" } })
                                        @Html.ValidationMessageFor(model => model.HttpRequestBody, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-2">
                                        <input type="button" id="jsonPreview" value="Validate Body" class="btn btn-primary" />
                                    </div>
                                </div>
                                <div class="jsonValidateResultsPanel form-group" style="display:none;">
                                    <div class="col-md-offset-2 col-md-10">
                                        <pre id="json-viewer"></pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="jobquestion ftpPattern">
                        <div class="form-group">
                            @Html.LabelFor((model) => model.FtpPattern, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor((model) => model.FtpPattern, Model.FtpPatternDropDown, new { @class = "form-control edit-dataset-row" })
                                @Html.ValidationMessageFor((model) => model.FtpPattern, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="jobquestion targetFileName">
                        <div class="form-group configQuestion">
                            <div class="col-md-12">
                                <hr />
                                <h6 id="targetfilenamequestion"></h6>
                            </div>
                        </div>
                        <div class="form-group questionDescription">
                            <div class="col-md-12">
                                <span class="text-muted">
                                    <em id="targetfilenamedesc"></em>
                                </span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.TargetFileName, htmlAttributes: new { @class = "control-label col-md-2 optional", @id = "targetfilenamelable" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TargetFileName, new { htmlAttributes = new { @class = "form-control edit-dataset-row", @placeholder = "Exclude file extension" } })
                                @Html.ValidationMessageFor(model => model.TargetFileName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="jobquestion searchCriteria">
                        <div class="form-group configQuestion">
                            <div class="col-md-12">
                                <hr />
                                <h6>Should selective files be processed?</h6>
                            </div>
                        </div>
                        <div class="form-group questionDescription">
                            <div class="col-md-12">
                                <span class="text-muted">
                                    <em>All searches are performed on full file name (including file extension).&nbsp;&nbsp;</em>
                                    <em>A regular expression search of \. is the least restrictive and will match anything with a period.</em>
                                </span>
                            </div>
                        </div>

                        <div class="searchCriteria searchCriteriaIsRegex">
                            <div class="form-group">
                                @Html.LabelFor(model => model.IsRegexSearch, htmlAttributes: new { @class = "control-label col-md-2 optional" })
                                <div class="col-md-10">
                                    @Html.CheckBoxFor(model => model.IsRegexSearch, new { @class = "" })
                                    @Html.ValidationMessageFor(model => model.IsRegexSearch, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group fieldDescription">
                            <label class="control-label col-md-2"></label>
                            <div class="col-md-10">
                                <span class="text-muted">
                                    <em> Not familiar with <a target="_blank" href="https://regexr.com/">Regex Expression?</a></em>
                                </span>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SearchCriteria, htmlAttributes: new { @class = "control-label col-md-2 optional" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.SearchCriteria, new { htmlAttributes = new { @class = "form-control edit-dataset-row" } })
                                @Html.ValidationMessageFor(model => model.SearchCriteria, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="jobquestion compression">
                        <div class="form-group configQuestion">
                            <div class="col-md-12">
                                <hr />
                                <h6>Do files need to be decompressed?</h6>
                            </div>
                        </div>

                        <div class="form-group questionDescription">
                            <div class="col-md-12">
                                <span class="text-muted">
                                    <em>Compressed files can be decompressed as part of the retrieval processes if needed.  Contents of compressed file will be loaded into this Schema.</em>
                                </span>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsSourceCompressed, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.CheckBoxFor(model => model.IsSourceCompressed, new { htmlAttributes = new { @class = "form-control edit-dataset-row" } })
                                @Html.ValidationMessageFor(model => model.IsSourceCompressed, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div id="compressionPanel">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CompressionType, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.CompressionType, Model.CompressionTypesDropdown, new { @class = "form-control edit-dataset-row", })
                                    @Html.ValidationMessageFor(model => model.CompressionType, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @Html.HiddenFor(model => model.FileNameExclusionList)
                            @Html.HiddenFor(model => model.NewFileNameExclusionList)

                            <div class="form-group">
                                <label class="control-label col-md-2" style="font-weight: 100;">File Names to Exclude</label>
                                <div id="fileNamePanel" class="col-md-10">

                                    @foreach (String a in Model.FileNameExclusionList.ToList())
                                    {
                                        <div>
                                            <input class="form-control edit-dataset-row fileNameExclusion" style="display: inline-block; width: 80%;" value="@a" />
                                            <a class="removeFileName" style="display: inline-block; margin-left: 10px;"><span class="glyphicon glyphicon-minus"></span> Remove File Name</a>
                                        </div>
                                    }

                                    <div>
                                        <input class="form-control edit-dataset-row fileNameExclusion" style="display: inline-block; width: 80%;" />
                                        <a class="removeFileName" style="display: inline-block; margin-left: 10px;"><span class="glyphicon glyphicon-minus"></span> Remove File Name</a>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group fieldDescription">
                                <label class="control-label col-md-2"></label>
                                <div class="col-md-10">
                                    <span class="text-muted">
                                        <em>This is optional.  If no names are provided, all files contined within the compressed file will be uploaded to this config.</em>
                                    </span>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2"></label>
                                <div class="col-md-10">
                                    <a class="addFileName"><span class="glyphicon glyphicon-plus"></span> Add File to Exclude</a>
                                </div>
                            </div>
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.Schedule)

                    <div class="jobquestion schedule">
                        @if (!Model.IsGeneric)
                        {
                            <div id="schedulePanel">
                                <div class="form-group configQuestion">
                                    <div class="col-md-12">
                                        <hr />
                                        <h6>How often is your Data Generated?</h6>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">Schedule</label>
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.SchedulePicker, Model.ScheduleOptions, new { @class = "form-control edit-dataset-row", })
                                        @Html.ValidationMessageFor(model => model.SchedulePicker, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group scheduler" id="hourlyPicker">
                                    <label class="control-label col-md-2">Every Hour at</label>
                                    <div class="col-md-10">
                                        <input id="cronHourlyTimePicker" type="number" max="59" min="0" class="form-control" style="width:10%;" placeholder="Minute" />
                                    </div>
                                </div>

                                <div class="form-group scheduler" id="dailyPicker">
                                    <label class="control-label col-md-2">Every Day at</label>
                                    <div class="col-md-10">
                                        <input class="timepicker timepicker-with-dropdown text-center form-control edit-dataset-row" id="cronDailyJobTimePicker" style="width:15%;" />
                                        CST
                                    </div>
                                </div>

                                <div class="form-group scheduler" id="weeklyPicker">
                                    <label class="control-label col-md-2">Every Week on</label>
                                    <div class="col-md-10">
                                        <select id="cronWeeklyDayPicker" class="form-control edit-dataset-row" style="width:25%; display: inline-block;">
                                            <option selected disabled>Day of the Week</option>
                                            <option value="0">Sunday</option>
                                            <option value="1">Monday</option>
                                            <option value="2">Tuesday</option>
                                            <option value="3">Wednesday</option>
                                            <option value="4">Thursday</option>
                                            <option value="5">Friday</option>
                                            <option value="6">Saturday</option>
                                        </select>
                                        at
                                        <input class="timepicker timepicker-with-dropdown text-center form-control edit-dataset-row" id="cronWeeklyJobTimePicker" style="width:15%; display: inline-block;" />
                                        CST
                                    </div>
                                </div>

                                <div class="form-group scheduler" id="monthlyPicker">
                                    <label class="control-label col-md-2">Every Month on</label>
                                    <div class="col-md-10">
                                        <input id="cronMonthlyDayPicker" type="number" max="31" min="1" class="form-control" style="width:20%; display: inline-block;" placeholder="Day of the Month" />
                                        at
                                        <input class="timepicker timepicker-with-dropdown text-center form-control edit-dataset-row" id="cronMonthlyJobTimePicker" style="width:15%; display: inline-block;" />
                                        CST
                                    </div>
                                </div>

                                <div class="form-group scheduler" id="yearlyPicker">
                                    <label class="control-label col-md-2">Every Year on</label>
                                    <div class="col-md-10">
                                        <select id="cronYearlyMonthPicker" class="form-control edit-dataset-row" style="width:25%; display: inline-block;">
                                            <option selected disabled>Month</option>
                                            <option value="1">Janurary</option>
                                            <option value="2">Feburary</option>
                                            <option value="3">March</option>
                                            <option value="4">April</option>
                                            <option value="5">May</option>
                                            <option value="6">June</option>
                                            <option value="7">July</option>
                                            <option value="8">August</option>
                                            <option value="9">September</option>
                                            <option value="10">October</option>
                                            <option value="11">November</option>
                                            <option value="12">December</option>
                                        </select>
                                        <input id="cronYearlyDayPicker" type="number" max="31" min="1" class="form-control" style="width:15%; display: inline-block;" placeholder="Day of the Month" />
                                        at
                                        <input class="timepicker timepicker-with-dropdown text-center form-control edit-dataset-row" id="cronYearlyJobTimePicker" style="width:15%; display: inline-block;" />
                                        CST
                                    </div>
                                </div>

                                <div id="scheduleRow" class="form-group" style="display: none;">
                                    <label class="control-label col-md-2">The next four scheduled times will be in your local Time</label>
                                    <div id="scheduledTimes" class="col-md-10">
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <label class="control-label col-md-2">Schedule</label>
                                <div class="col-md-10">
                                    <input class="form-control edit-dataset-row" value="Instant" disabled readonly />
                                </div>
                            </div>
                        }
                    </div>
                </div>
        </div>
        </div>

    <hr />
    <div class="form-group">
        <span class="text-muted"><em>** Fields in <b>Bold</b> are Required</em></span>
    </div>
    <div class="form-group">
        <div>
            <input type="submit" id="btnCreateDataset" value="Update Retrieval Job" class="btn btn-primary" />
            <a class="btn btn-warning" href="/Config/Dataset/@Model.DatasetID">Cancel</a>
        </div>
    </div>
}

<style>
    .addFileName {
        cursor: pointer;
    }

    .removeFileName {
        cursor: pointer;
    }
    .configQuestion {
        margin-top: 30px;
        margin-left: 3em;
        margin-bottom: 10px;
    }
    .questionDescription {
        margin-top: 15px;
    }
</style>


@section Scripts {
    @Scripts.Render("~/bundles/prettyCron")
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>
    <script>

        data.Job.FormInit();

        

        $('#SchedulePicker').change(function () {

            $('#hourlyPicker').hide();
            $('#dailyPicker').hide();
            $('#weeklyPicker').hide();
            $('#monthlyPicker').hide();
            $('#yearlyPicker').hide();

            switch ($(this).val()) {
                case "1":
                    $('#hourlyPicker').show();
                    break;
                case "2":
                    $('#dailyPicker').show();
                    break;
                case "3":
                    $('#weeklyPicker').show();
                    break;
                case "4":
                    $('#monthlyPicker').show();
                    break;
                case "5":
                default:
                    $('#yearlyPicker').show();
                    break;
            }
        });

        $('.addFileName').click(function () {
            $('#fileNamePanel').append("<div>" +
                "<input class= \"form-control edit-dataset-row fileNameExclusion\" style = \"display: inline-block; width: 80%;\" />" +
                "<a class=\"removeFileName\" style=\"display: inline-block; margin-left: 10px;\" ><span class=\"glyphicon glyphicon-minus\"></span> Remove File Name</a>" +
                "</div>");
        });


        $('body').on('change', '.fileNameExclusion', function () {
            $('#NewFileNameExclusionList').text("");

            var text = "";
            $('.fileNameExclusion').each(function (index, element) {
                text += $(element).val() + "|";
            });

            $('#NewFileNameExclusionList').val(text);
        });


        $('body').on('click', '.removeFileName', function () {

            $(this).parent().remove();
        });


        $('#cronHourlyTimePicker').bind('input', function () {
            $('#Schedule').val($(this).val() + ' * * * *');
            updateFutureTimes();
        });

        function updateFutureTimes() {

            if ($('#Schedule').val() != 0) {

                $('#scheduledTimes').empty();
                later.date.localTime();
                var schedule = later.parse.cron($('#Schedule').val());
                var futureScheduleUTC = later.schedule(schedule).next(4);

                $(futureScheduleUTC).each(function (index, element) {

                    $('#scheduledTimes').append("<p>" + element + "</p>");
                });

                $('#scheduleRow').show();
            } else {
                $('#scheduleRow').hide();
            }
        }



        $('#cronDailyJobTimePicker').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            minTime: '0',
            maxTime: '23:59',
            defaultTime: '11',
            startTime: '0',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function (ev) {

                if ($(this).timepicker('getTime')) {
                    var d = new Date($(this).timepicker('getTime'));
                    var h = d.getHours();
                    var m = d.getMinutes();

                    $('#Schedule').val(m + ' ' + h + ' * * *');
                }
                updateFutureTimes();
            }
        });


        $('#cronWeeklyDayPicker').bind('input', function () {
            changeWeek()
        });

        function changeWeek() {
            if ($('#cronWeeklyJobTimePicker').timepicker('getTime')) {
                var d = new Date($('#cronWeeklyJobTimePicker').timepicker('getTime'));
                var h = d.getHours();
                var m = d.getMinutes();
                var d = $('#cronWeeklyDayPicker').val();


                $('#Schedule').val(m + ' ' + h + ' * * ' + d);
            }
            updateFutureTimes();
        }

        $('#cronWeeklyJobTimePicker').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            minTime: '0',
            maxTime: '23:59',
            defaultTime: '11',
            startTime: '0',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function (ev) {
                changeWeek();
            }
        });

        $('#cronMonthlyDayPicker').bind('input', function () {
            changeMonth();
        });

        function changeMonth() {
            if ($('#cronMonthlyJobTimePicker').timepicker('getTime')) {
                var d = new Date($('#cronMonthlyJobTimePicker').timepicker('getTime'));
                var h = d.getHours();
                var m = d.getMinutes();
                var d = $('#cronMonthlyDayPicker').val();


                $('#Schedule').val(m + ' ' + h + ' ' + d + ' * *');
            }
            updateFutureTimes();
        }
        $('#cronMonthlyJobTimePicker').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            minTime: '0',
            maxTime: '23:59',
            defaultTime: '11',
            startTime: '0',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function (ev) {
                changeMonth();
            }
        });

        $('#cronYearlyDayPicker').bind('input', function () {
            changeYear();
        });

        $('#cronYearlyMonthPicker').bind('input', function () {
            changeYear();
        });

        function changeYear() {
            if ($('#cronYearlyJobTimePicker').timepicker('getTime')) {
                var d = new Date($('#cronYearlyJobTimePicker').timepicker('getTime'));
                var hour = d.getHours();
                var minute = d.getMinutes();
                var day = $('#cronYearlyDayPicker').val();
                var month = $('#cronYearlyMonthPicker').val();

                if (!day) {
                    day = '*';
                }

                if (!month) {
                    month = '*';
                }


                if (hour != null && minute != null && month != null && day != null) {
                    $('#Schedule').val(minute + ' ' + hour + ' ' + day + ' ' + month + ' *');
                } else {
                    $('#Schedule').val();
                }

            }
            updateFutureTimes();
        }
        $('#cronYearlyJobTimePicker').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            minTime: '0',
            maxTime: '23:59',
            defaultTime: '11',
            startTime: '0',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function (ev) {
                changeYear();
            }
        });

        $("#cronJobDatePicker").datepicker();

        $(function () {

            $('#hourlyPicker').hide();
            $('#dailyPicker').hide();
            $('#weeklyPicker').hide();
            $('#monthlyPicker').hide();
            $('#yearlyPicker').hide();
            $('#SchedulePicker').change();
            $("#compressionPanel").toggle($("#IsSourceCompressed").is(':checked'));

            var a = $('#Schedule').val().split(' ');
            var e = jQuery.Event("keydown");
            e.which = 13; // # Some key code value

            switch ($('#SchedulePicker').val()) {
                case "1":
                    $('#cronHourlyTimePicker').val(a[0]);
                    break;
                case "2":
                    $('#cronDailyJobTimePicker').val(a[1] + ":" + a[0]);
                    $("#cronDailyJobTimePicker").trigger(e);
                    break;
                case "3":
                    $('#cronWeeklyDayPicker').val(a[4]);
                    $("#cronWeeklyJobTimePicker").val(a[1] + ":" + a[0]);
                    $("#cronWeeklyJobTimePicker").trigger(e);
                    break;
                case "4":
                    $('#cronMonthlyDayPicker').val(a[2]);
                    $('#cronMonthlyJobTimePicker').val(a[1] + ":" + a[0]);
                    $("#cronMonthlyJobTimePicker").trigger(e);
                    break;
                case "5":
                    $('#cronYearlyMonthPicker').val(a[3]);
                    $('#cronYearlyDayPicker').val(a[2]);
                    $('#cronYearlyJobTimePicker').val(a[1] + ":" + a[0]);
                    $("#cronYearlyJobTimePicker").trigger(e);
                    break;
            }


            if ($("#SelectedDataSource").val() != 0) {
                var val = $("#SelectedDataSource").val();

                $("#editDataSource").attr("href", "/Config/Source/Edit/" + val);
                $("#editDataSource").show();
            }


            var val = $("#SelectedDataSource").val();

            $("#editDataSource").attr("href", "/Config/Source/Edit/" + val);
            $("#editDataSource").show();

            $.getJSON("@Url.Action("DataSourceDescription", "Config")", { sourceId: val} ,function (data) {
                $("#dataSourceDescription").text(data.Description);
                $("#baseURLTextBox").val(data.BaseUri);
                $("#baseURL").text(" The Base URL of the Data Source you picked is " + data.BaseUri + ".  What you type in the Relative URL will be appended to the end of this Base URL.");
            });

            $('#NewFileNameExclusionList').text("");

            var text = "";
            $('.fileNameExclusion').each(function (index, element) {
                text += $(element).val() + "|";
            });

            $('#NewFileNameExclusionList').val(text);

        });

    </script>
}
