@model Sentry.data.Web.ObsoleteDatasetModel

@{
    ViewBag.Title = "Fields";
    Sentry.data.Core.FileSchema schema = ViewBag.Schema;
    string color = Model.DatasetCategory.Color;
    string textColor = "dsc-" + color + "-text";
    string dateDefault = ViewBag.Date_Default;
    string timestampDefault = ViewBag.Timestamp_Default;
}
<a class="backToList" href="/Config/Dataset/@Model.DatasetId"><em class="fas fa-chevron-left pr-3"></em>  Back to Dataset Configuration</a>

<div class="topBanner" style="height: 60px;
    border-bottom: 1px #DDDDDD solid;">
    <div class="relative">
        <div>

            <div class="no-overflow">
                <h1 class="detailName leftFloat @textColor pt-0">
                    @Model.DatasetName

                    @if (Model.IsSecured)
                    {
                        <span class="fas fa-lock dsc-icon-button lockIcon" data-toggle="tooltip" data-placement="top" title="Secure"></span>
                    }
                </h1>

                <div class="text-right">
                    @if (Model.Security.CanEditDataset)
                    {
                        <a class="btn px-3"
                           id="EditDataset_@Model.DatasetId" data-id="@Model.DatasetId" data-toggle="tooltip" data-placement="top" title="Edit Dataset">
                            <em class="far fa-edit dsc-icon-button align-self-center @textColor mr-0 align-middle"></em>
                        </a>

                    }
                    <div class="btn-group dropdown" data-toggle="tooltip" data-placement="top" title="Additional Actions">

                        <a class="btn px-3"
                           data-toggle="dropdown">
                            <em class="fas fa-bars dsc-icon-button @textColor mr-0 align-middle"></em>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" role="menu" x-placement="bottom-start">
                            @if (Model.Security.CanManageSchema)
                            {
                                <a class="dropdown-item" href="/Config/Dataset/@Model.DatasetId">Manage Schemas</a>
                            }
                            @if (Model.Security.CanViewFullDataset)
                            {
                                <a id="SubscribeModal" class="dropdown-item" data-id="@Model.DatasetId">
                                    Subscribe
                                </a>
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>


</div>


<br />

@using (Html.BeginForm("Fields", "Config", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div data-bind="visible: Errors().length >= 1" style="display: none;">
        <h6 style="color: red;" class="pt-1">Errors:</h6>
        <ul data-bind="template: {name: 'ErrorTemplate' , foreach: Errors()}"></ul>
    </div>

    <h2 class="@textColor pt-1">Fields for @schema.Name</h2>

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <div data-bind="visible: IsPositional" style="display:none;">
        <p>This is a positional aware file type.&nbsp&nbspDrag and drop fields to change field order.</p>
    </div>

    <div data-bind="visible: AllowArrays" style="display:none;">
        <p>This file type allows arrays.&nbsp&nbspCheck the "Is Array" option to signify an array.</p>
    </div>

    <div data-bind="visible: HiveDatabaseName() !== null" style="display:none;">
        <h6 class="@textColor">This schema is currently tied to the Hive Table named <span data-bind="text: HiveDatabaseName"></span>.<span data-bind="text: HiveTableName"></span> with <span data-bind="text: RowCount"></span> rows.  <strong>You cannot edit it.</strong></h6>
    </div>

    <div id="panelSpinner">
        <div class="sentry-spinner-container" style=" width: 1166px;">
            <span class="sentry-spinner" style="height:100px"></span>
        </div>
    </div>


    <div id="schemaPanel">
        <ul class="rules-group-container row fields-sortable-ul" id="fields" data-bind="template: {name: 'RowTemplate' , foreach: SortedRows, afterAdd:SortRows}, css: SortableRows()" style="list-style-type: none;margin-left:0px;padding-left: 15px;"></ul>
    </div>


    <div class="col-lg-12">
        <hr />
        <button type="button" class="btn btn-sm btn-success" data-bind='click: addRow'><em class="fas fa-plus"></em> Add a Field</button>
        <hr />
        <button class="btn btn-success" id="saveBtn" data-bind='click: save'>Save</button>
        <div id="buttonSpinner" style="
                    display: inline-block;
                    margin-bottom: 24px;
                    margin-left: -20px;
                    display: none;
                ">
            <div class="sentry-spinner-container" style="width: 100px;display: inline-block;">
                <span class="sentry-spinner" style="height: 10px;width: 10px;"></span>
            </div>
        </div>
    </div>

    <script type="text/html" id="ErrorTemplate">
        <li>
            <span>Row # <span data-bind="text: Id"></span></span> :
            <span data-bind="text: Description"></span>
        </li>
    </script>

    <script type="text/html" id="RowTemplate">
        <li class="ui-sortable-handle schemaRowContainer" data-bind="css: $root.ClickableRows(), style : { 'background-color' : RowColor }">
            <div class="schemaRow" data-bind="css: Color">
                <div class="rowDetails" data-bind="attr : {'data-id' : Position}">
                    <div class="topRow d-inline">
                        <div class="rowNumberIdentifier">
                            <b><span data-bind="text: Position"></span></b>
                        </div>
                        <button type="button" class="btn btn-xs btnExpandChildren p-2" data-bind="click: ToggleChildren, visible: HasChildren, css : ButtonClass">
                            <span id="icon_" class="" data-bind="css : ButtonSpanClass"></span>
                        </button>
                        <input class="rowFieldName" data-bind="value: Name" placeholder="Field Name..." data-toggle="tooltip" data-placement="top" title="Field Name" />
                        <select class="typeSelect" data-bind="options: $root.DataTypes, optionsCaption: 'Choose Datatype', optionsValue: 'Name', optionsText: 'Name', optionsAfterRender: $root.setTagGroup, value: DataType"></select>
                        <input type="hidden" name="dataObjectField_Id" data-bind="value: DataObjectField_ID" data-toggle="tooltip" data-placement="top" title="Data Type Selection" />
                        <div class="showPandS d-inline-flex">
                            <div class="fieldsFieldToggleable" data-bind="visible: ShowPandS">
                                <div class="precisionContainer">
                                    <input class="precision" data-bind="textInput: Precision" placeholder="Prec" data-toggle="tooltip" data-placement="top" title="Precision - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.DECIMAL_PRECISION_DEFAULT.ToString()" />
                                </div>
                                <div class="scaleContainer">
                                    <input class="scale" data-bind="textInput: Scale" placeholder="Scale" data-toggle="tooltip" data-placement="top" title="Scale - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.DECIMAL_SCALE_DEFAULT.ToString()" />
                                </div>
                                <div class="">
                                    <span>1234.56 = Precision:6  Scale:2</span>
                                </div>
                            </div>
                        </div>

                        <div class="showDateFormat d-inline">
                            <div class="fieldsFieldToggleable" data-bind="visible: ShowDateFormat">
                                <input class="dateFormat w-50" data-bind="value: Format" placeholder="Not Specified (default is @dateDefault)" data-toggle="tooltip" data-placement="top" title="Format - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.DATE_DEFAULT" />
                            </div>
                        </div>

                        <div class="showTimestampFormat d-inline">
                            <div class="fieldsFieldToggleable" data-bind="visible: ShowTimestampFormat">
                                <input class="dateFormat w-50" data-bind="value: Format" placeholder="Not Specified (default is @timestampDefault)" data-toggle="tooltip" data-placement="top" title="Format - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.TIMESTAMP_DEFAULT" />
                            </div>
                        </div>

                        <div class="showLength d-inline">
                            <div class="fieldsFieldToggleable" data-bind="visible: ShowFieldLength">
                                <input class="fieldlength" data-bind="visible: ShowFieldLength && DataType() === 'VARCHAR', value: Length" placeholder="default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.VARCHAR_LENGTH_DEFAULT.ToString()" data-toggle="tooltip" data-placement="top" title="Length - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.VARCHAR_LENGTH_DEFAULT.ToString()" />
                                <input class="fieldlength" data-bind="visible: ShowFieldLength && DataType() !== 'VARCHAR', value: Length" placeholder="Specify length" data-toggle="tooltip" data-placement="top" title="Length - default = @Sentry.data.Core.GlobalConstants.Datatypes.Defaults.VARCHAR_LENGTH_DEFAULT.ToString()" />
                            </div>
                        </div>

                        <div class="showArray d-inline-flex position-absolute pl-1">
                            <div data-bind="visible: $root.AllowArrays">
                                <label class="arrayLabel checkbox-container">
                                    IsArray?
                                    <input class="array" data-bind="checked: IsArray" type="checkbox" />
                                    <span class="checkmark"></span>
                                </label>
                            </div>
                        </div>

                        <div class="options">
                            <div class="" data-bind="if: ShowAddChild">
                                <div class="" data-bind="visible: ShowAddChild">
                                    <button class="rightButton" data-bind='click: addChild.bind(1)'>Add a Child</button>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="descriptionContainer">
                        <textarea class="w-75" data-bind="value: Description" placeholder="Description..." data-toggle="tooltip" data-placement="top" title="Description" />
                        <div class="rightButton float-right" data-bind="visible: $parent.Name === undefined">

                            <button type="button" class="btn btn-xs btn-danger p-2" data-bind='click: $parent.removeRow'>
                                <em class="fas fa-times"></em>
                                Delete
                            </button>
                        </div>
                        <div class="rightButton float-right" data-bind="visible: $parent.Name !== undefined">
                            <button type="button" class="btn btn-xs btn-danger p-2" data-bind='click: $parent.removeChild'>
                                <em class="fas fa-times"></em>
                                Delete
                            </button>
                        </div>
                    </div>


                </div>
                <span class="fieldGuidText" data-bind="text: FieldGuid"></span>
            </div>
            <ul class="childrenContainer" data-bind="template: {name: 'RowTemplate' , foreach: SortedChildRows}, visible: ShowChildren, css: $root.SortableRows()" style="list-style-type: none;margin-left:0px;padding-left: 10px;"></ul>
        </li>
    </script>
}


@section Scripts {

    <script>
        data.Fields.Init();

        var initLoadComplete = false;
        var currentMax = 0;
        var errorList = [];

        ko.extenders.numeric = function (target, options) {
                //create a writable computed observable to intercept writes to our observable
            var precision = options.precision,
                min = options.min,
                max = options.max;

            var result = ko.pureComputed({
                read: target,  //always return the original observables value
                write: function (newValue) {
                    var current = target(),
                        roundingMultiplier = Math.pow(10, precision),
                        newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),
                        valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;

                    if ((min != undefined || min != null) && valueToWrite < min) {
                        valueToWrite = min;
                    }

                    if ((max != undefined || max != null) && valueToWrite > max) {
                        valueToWrite = max;
                    }

                    //only write if it changed
                    if (valueToWrite !== current) {
                        target(valueToWrite);
                    } else {
                        //if the rounded value is the same, but a different value was written, force a notification for the current field
                        if (newValue !== current) {
                            target.notifySubscribers(valueToWrite);
                        }
                    }
                }
            }).extend({ notify: 'always' });

            //initialize with current value to make sure it is rounded appropriately
            result(target());

            //return the new computed observable
            return result;
            };

        function Row(id, indata, parent, level, parentRow) {
            var self = this;
            var parentvm = parent;
            var thisLevel = ++level;
            var parentRecord = parentRow;

            if (indata.Position != undefined && indata.Position !== 0) {
                self.Position = ko.observable(indata.Position);
                self.Toggled = ko.observable(false);
            }
            else {
                self.Position = ko.observable(id);
                self.Toggled = ko.observable(true);
            }
            self.DataObjectField_ID = ko.observable(indata.DataObjectField_ID);
            self.Name = ko.observable(indata.Name).extend({ notify: 'always' });
            self.FieldGuid = ko.observable(indata.FieldGuid);
            self.Description = ko.observable(indata.Description);
            self.DataType = ko.observable(indata.DataType).extend({ notify: 'always'});
            self.ArrayType = ko.observable(indata.ArrayType);
            //self.Precision = ko.observable(indata.Precision).extend({ numeric: { precision: 9, min: 1, max: 38 }});
            self.Precision = ko.observable(indata.Precision);
            //self.Scale = ko.observable(indata.Scale).extend({ numeric: { precision: 2, min: 1, max: 38 } });
            self.Scale = ko.observable(indata.Scale);
            self.Format = ko.observable(indata.Format);
            self.DeleteInd = ko.observable(false);
            self.IsArray = ko.observable(indata.IsArray);
            self.Level = ko.observable(thisLevel);
            //self.Length = ko.observable(indata.Length).extend({ numeric: { precision: 0, min: 1, max: 65535 } });
            self.Length = ko.observable(indata.Length);
            self.ChildRows = ko.observableArray(ko.utils.arrayMap(indata.ChildRows, function (rowInfo) {
                currentMax++;
                return new Row(currentMax, rowInfo, parentvm, thisLevel, self);
            }));
            self.SortedChildRows = ko.observableArray();
            self.RowColor = ko.observable()

            //Call UpdateRow() when any property changes
            self.Name.subscribe(        function () { self.UpdateRow() });
            self.FieldGuid.subscribe(   function () { self.UpdateRow() });
            self.Description.subscribe( function () { self.UpdateRow() });
            self.DataType.subscribe(    function () { self.UpdateRow() });
            self.ArrayType.subscribe(   function () { self.UpdateRow() });
            self.Precision.subscribe(   function () { self.UpdateRow() });
            self.Scale.subscribe(       function () { self.UpdateRow() });
            self.Format.subscribe(      function () { self.UpdateRow() });
            self.IsArray.subscribe(     function () { self.UpdateRow() });
            self.Length.subscribe(      function () { self.UpdateRow() });

            self.UpdateRow = function () {
                var a = JSON.stringify(ko.toJS(self), ['Name', 'DataObjectField_ID', 'Description', 'DataType', 'ArrayType', 'Precision', 'Scale', 'ChildRows', 'Position', 'Format', 'DeleteInd', 'IsArray', 'FieldGuid', 'Length']);

                var url_parts = window.location.href.replace(/\/\s*$/, '').split('/');
                //since we do not need example.com
                url_parts.shift();

                if (initLoadComplete) {
                    //ajax
                    $.ajax({
                        type: "POST",
                        url: "/Config/Schema/" + url_parts[5] + "/ValidateField",
                        data: a,
                        dataType: "json",
                        contentType: "application/json",
                        success: function (returnedData) {
                            if (Sentry.WasAjaxSuccessful(returnedData)) {
                                ////No errors for field so remove any existing errors displayed
                                // parentvm.Errors.remove(function (item) {
                                //     return item.Id === self.Position().toString();
                                // });

                                //remove associated errors
                                parentvm.Errors.remove(function (err) {
                                    return err.DataObjectField_ID == self.DataObjectField_ID();
                                });

                                //Remove error color from row
                                self.RowColor('');

                                //If there are no errors on page, show save button
                                if (parentvm.Errors !== undefined && parentvm.Errors().length === 0) {
                                    $('#saveBtn').show();
                                }
                            }
                            else {
                                var previousId = 0;
                                for (var i = 0; i < returnedData.Errors.length; i++) {
                                    if (previousId !== returnedData.Errors[i].Id) {
                                        ////Remove all associated errors with this Id
                                        //parentvm.Errors.remove(function (item) {
                                        //    return item.Id === returnedData.Errors[i].Id;
                                        //});

                                        //remove associated errors
                                        parentvm.Errors.remove(function (err) {
                                            return err.DataObjectField_ID == self.DataObjectField_ID();
                                        });
                                        previousId = returnedData.Errors[i].Id;
                                    }
                                    parentvm.Errors.push({ 'Id': returnedData.Errors[i].Id, 'ErrorType': 'Type', 'Description': returnedData.Errors[i].Description, 'DataObjectField_ID': self.DataObjectField_ID() });
                                }

                                //Adjust color of row
                                self.RowColor('rgba(255, 0, 0, 0.8)');

                                //Hide save button
                                $('#saveBtn').hide();
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            //$('#buttonSpinner').hide();
                        },
                        async: false
                    });
                }
            }

            self.ChildRowSorter = function () {
                if (self.ChildRows().length > 0) {
                    self.SortedChildRows([]);
                    self.SortedChildRows(ko.utils.arrayFilter(self.ChildRows(), function (row) {
                        if (row.DeleteInd() === false) {
                            row.ChildRowSorter();
                            return true;
                        }
                        else {
                            return true;
                        }
                        //return (row.DeleteInd() === false)
                    }).sort(function (left, right) {
                        return left.Position() === right.Position() ? 0 : (left.Position() < right.Position() ? -1 : 1);
                    }));
                }
            };

            self.ShowFixed = ko.computed(function () {
                return parent.IsFixedWidth();
            });

            self.ShowPandS = ko.computed(function () {
                if (self.DataType() === 'DECIMAL') {
                    return true;
                }
                else {
                    return false;
                }
            });

            self.ShowDateFormat = ko.computed(function () {
                if (self.DataType() === 'DATE') {
                    return true;
                }
                else {
                    return false;
                }
            });

            self.ShowTimestampFormat = ko.computed(function () {
                if (self.DataType() === 'TIMESTAMP') {
                    return true;
                }
                else {
                    return false;
                }
            });

            self.ShowArrayType = ko.computed(function () {
                if (self.DataType() === 'ARRAY') {
                    return true;
                }
                else {
                    return false;
                }
            });

            self.ShowFieldLength = ko.computed(function () {
                if (self.ShowFixed() || self.DataType() === 'VARCHAR') {
                    return true;
                }
                else {
                    return false;
                }
            })

            self.ShowVarcharLengthDescription = ko.computed(function () {
                if (self.DataType() === 'VARCHAR') {
                    return true;
                }
                else {
                    return false;
                }
            })

            self.ShowAddChild = ko.computed(function () {
                if ((self.DataType() === 'STRUCT' || (self.DataType() === 'ARRAY' && self.ArrayType() === 'STRUCT')) && self.Toggled) {
                    return true;
                }
                else {
                    return false;
                }
            });

            self.ShowPositional = ko.computed(function () {
                return parent.IsPositional;
            })

            self.ShowChildren = ko.computed(function () {
                if (self.Toggled()) {
                    return true;
                } else {
                    return false;
                }
            });

            self.ShowSelf = ko.computed(function () {
                if (self.Toggled()) {
                    return true;
                } else {
                    return false;
                }
            });

            self.ToggleChildren = function () {
                if (self.Toggled()) {
                    self.Toggled(false);
                } else {
                    self.Toggled(true);
                }
            }

            self.ButtonClass = ko.computed(function () {
                return 'btn-success';
                //if (vm.ShowAllLayers()) {
                //    return 'disabled';
                //} else {
                //    return 'btn-success';
                //}
            });

            self.ButtonSpanClass = ko.computed(function () {
                if (self.Toggled()) {
                    return 'fas fa-minus';
                } else {
                    return 'fas fa-plus';
                }
            });

            self.HasChildren = ko.computed(function () {
                if (indata.DataType === 'STRUCT' || (indata.ChildRows !== undefined && indata.ChildRows !== null && indata.ChildRows.length > 0)) {
                    return true;
                } else {
                    return false;
                }
            });

            self.Color = ko.computed(function () {
                if (self.Level() % 2 == 0) {
                    return 'schemaColorEven';
                }
                else {
                    return 'schemaColorOdd';
                }
            })

            self.addChild = function (elem, e) {
                var lastPosition;
                var nextPosition;
                var a = $(e.target).closest('.schemaRowContainer');

                lastPosition = data.Fields.GetLastRowPositionOfSchemaRowContainer(a);
                nextPosition = lastPosition + 1;

                var cr = new Row(nextPosition, { DataObjectField_ID: "new" + data.Utils.GenerateRandomString(6), Name: "", Description: "", DataType: "", ArrayType: "", Precision: null, Scale: null }, parent, thisLevel, self);

                self.ChildRows.push(cr);
                if (!self.Toggled()) {
                    self.ToggleChildren();
                }

                self.UpdateRow();
                parentvm.Rows.valueHasMutated();
                //vm.SortRows();
            };

            self.removeChild = function (row) {
                //remove associated errors
                vm.Errors.remove(function (err) {
                    return err.DataObjectField_ID == row.DataObjectField_ID();
                });

                self.ChildRows.remove(row);
                //If there are no errors on page, show save button
                if (parentvm.Errors !== undefined && parentvm.Errors().length === 0) {
                    $('#saveBtn').show();
                }

                vm.SortRows();
                self.UpdateRow();
            };

            self.removeChildren = function () {
                self.ChildRows().forEach(function (cRow) {
                    if (cRow.HasChildren) {
                        cRow.removeChildren();
                    }

                    //remove associated errors
                    vm.Errors.remove(function (err) {
                        return err.DataObjectField_ID == cRow.DataObjectField_ID();
                    });

                    cRow.DeleteInd(true);

                    //If there are no errors on page, show save button
                    if (parentvm.Errors !== undefined && parentvm.Errors().length === 0) {
                        $('#saveBtn').show();
                    }
                });
            };

            self.SortChildRows = function (index, httpItem, httpPosition) {
                newVal = 0;
                //Foreach DOM object, compare to the current sortedRows list on view model to
                //  determine if DOM object position changed
                var match = ko.utils.arrayFirst(self.SortedChildRows(), function (item) {
                    if (item.DeletedInd == false && item.DataObjectField_ID() == httpItem && httpPosition != (index + 1).toString()) {

                        data.Fields.IncrementAssociatedRowErrors(item, (index + 1));

                        item.Position(index + 1);
                    }
                    if (item.HasChildren) {
                        item.SortChildRows(index, httpItem, httpPosition);
                    }
                })
            };

            self.UpdateRow();
        };




        function FindLastSchemaRowWithinChildinChildrenContainer(e) {
            var lastChild = $(e).children('.schemaRowContainer, .childrenContainer').last();

            if ($(lastChild).hasClass('.childrenContainer')) {
                FindLastChildinChildrenContainer(lastChild);
            }
            else {
                return lastChild;
            }
        }

        function ValidDataType(item) {
            this.Name = ko.observable(item.Name);
            this.Description = ko.observable(item.Description);
            this.Tag = ko.observable(item.Tag);
            return this;
        }

        var viewModel = function (incomingJson) {
            var self = this;


            //Observables
            //self.ErrorsCopy = ko.observableArray();
            self.Errors = ko.observableArray().extend({ notify: 'always' });
            self.DataTypes = ko.observableArray();
            self.IsPositional = ko.observable();
            self.IsFixedWidth = ko.observable();
            self.FilteredRows = ko.observableArray();
            self.SortedRows = ko.observableArray();
            self.HiveDatabaseName = ko.observable(incomingJson.HiveDatabaseName);
            self.HiveTableName = ko.observable(incomingJson.HiveTableName);
            self.FileExtensionId = incomingJson.FileExtension;
            self.AllowArrays = ko.observable();

            self.Rows = ko.observableArray(ko.utils.arrayMap(incomingJson.rows, function (rowInfo) {
                currentMax++;
                return new Row(currentMax, rowInfo, self, 0);
            }));
            self.RowCount = ko.observable(incomingJson.RowCount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
            self.FileExtensionName = ko.observable(incomingJson.FileExtensionName);

            self.Errors.subscribe(function () { self.ShowHideSaveButton() });
            self.ShowHideSaveButton = function () {
                //If there are no errors on page, show save button
                if (self.Errors() !== undefined && self.Errors().length === 0) {
                    $('#saveBtn').show();
                }
                else if (self.Errors() !== undefined && self.Errors().length > 0) {
                    $('#saveBtn').hide();
                }
            };

            //Computed properties
            self.RowSorter = function () {
                self.SortedRows([]);
                self.SortedRows(ko.utils.arrayFilter(self.Rows(), function (row) {
                    if (row.DeleteInd() === false) {
                        row.ChildRowSorter();
                        return true;
                    }
                    else {
                        return false;
                    }
                    //return (row.DeleteInd() === false)
                }).sort(function (left, right) {
                    return left.Position() === right.Position() ? 0 : (left.Position() < right.Position() ? -1 : 1);
                }));
            };

            self.SortableRows = ko.computed(function () {
                return self.IsPositional() ? "sortable-fields-active" : "sortable-fields";
            });

            self.ClickableRows = ko.computed(function () {
                return self.IsPositional() ? "clickable" : "";
            });


            self.Rows.subscribe(function () { self.SortRows() });


            //Functions
            self.addRow = function () {

                var lastPosition;
                var nextPosition;
                var a = $('.schemaRowContainer').last();

                lastPosition = data.Fields.GetLastRowPositionOfSchemaRowContainer(a);
                nextPosition = lastPosition + 1;

                var r = new Row(nextPosition, { DataObjectField_ID: "new" + data.Utils.GenerateRandomString(6), Name: "", Description: "", DataType: "", ArrayType: "", Precision: null, Scale: null }, self, 0);
                self.Rows.push(r);
                //self.SortRows();
            };

            self.removeRow = function (row) {
                var position = row.Position();

                if (row.HasChildren) {
                    row.removeChildren();
                }

                //remove associated errors
                vm.Errors.remove(function (err) {
                    return err.DataObjectField_ID == row.DataObjectField_ID();
                });

                row.DeleteInd(true);
                self.SortRows();
                self.Rows.remove(row);
                //self.Rows.valueHasMutated();
            };

            self.save = function () {
                console.log(ko.toJS(vm.Rows));
                var a = JSON.stringify(ko.toJS(vm.Rows), ['Name', 'DataObjectField_ID', 'Description', 'DataType', 'ArrayType', 'Precision', 'Scale', 'ChildRows', 'Position', 'Format', 'DeleteInd', 'IsArray', 'FieldGuid', 'Length']);
                console.log(a);

                var url_parts = window.location.href.replace(/\/\s*$/, '').split('/');
                //since we do not need example.com
                url_parts.shift();

                $('#buttonSpinner').show();

                $.ajax({
                    type: "POST",
                    url: "/Config/" + url_parts[3] + "/Schema/" + url_parts[5] + "/UpdateFields",
                    data: a,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (returnedData) {
                        if (Sentry.WasAjaxSuccessful(returnedData)) {
                            $('#buttonSpinner').hide();
                            window.location.href = "/Config/Dataset/@Model.DatasetId";
                        }
                        else {
                            $('#buttonSpinner').hide();

                            //loop through all errors and create a somewhat friendly message
                            var len = returnedData.Errors.length;
                            var message = '';
                            for (let i = 0; i < len; i++) {

                                var e = returnedData.Errors[i];
                                message = message + ' | Field: ' + e.Id + ' ' + e.Description;
                            }

                            //show modal with error message
                            Sentry.ShowModalAlert(returnedData.Message + message, function () { })
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        $('#buttonSpinner').hide();
                    },
                    async: false
                });

            };

            self.setTagGroup = function (option, item) {
                //console.log(item);
                if (item !== undefined && item.Tag()) {
                    var grp = $(option).parent("select").find("[label=\"" + item.Tag() + "\"]");
                    if (grp.length == 0) {
                        grp = $("<optGroup></optGroup>");
                        grp.attr("label", item.Tag());
                        $(option).parent("select").append(grp);
                    }
                    grp.append($(option));
                }
            };

            // Sorts all columns on page and ensures the rowNumberIdtentifier matches the item.position
            //   Need to take into consideration item may have errors which is tracked by position,
            //     therefore, need to adjust error records if neccessary
            self.SortRows = function () {
                newVal = 0;
                //Loop through all current rows (DOM objects) on page
                //$('.schemaRowContainer').each(function (index, elem) {
                $('#schemaPanel').find('.schemaRowContainer').each(function (index, elem) {
                    //Store the field Id for matching against sortedRows list
                    var httpItem_old = $(this).children().children().children().children('input[name="dataObjectField_Id"]').val();
                    var httpItem = $(elem).children('.schemaRow').find('input[name="dataObjectField_Id"]').val();

                    //Store the rowPosition
                    var httpPosition = $(this).find('.rowDetails').data('id');

                    //Foreach DOM object, compare to the current sortedRows list on view model to
                    //  determine if DOM object position changed

                    ko.utils.arrayForEach(self.SortedRows(), function (item) {
                        //console.log("SortRows -> DataObjectField_ID:" + item.DataObjectField_ID().toString() + " httpItem:" + httpItem.toString() + " httpPosition:" + httpPosition.toString() + " incrementedIndex:" + (index + 1));
                        // if changed adjust the position accordingly
                        if (item.DeleteInd() == false && item.DataObjectField_ID() == httpItem && httpPosition != (index + 1).toString()) {

                            //adjust associated errors to reflect new position
                            data.Fields.IncrementAssociatedRowErrors(item, (index + 1));

                            //adjust row position
                            item.Position(index + 1);
                        }
                        if (item.HasChildren()) {
                            item.SortChildRows(index, httpItem, httpPosition);
                        }
                    })
                })

                self.RowSorter();

                $(".sortable-fields-active").sortable({
                    stop: function (event, ui) {
                        vm.SortRows();
                    }
                });
            }

            $.ajax({
                type: "GET",
                url: "/Config/GetDatatypesByFileExtension/" + self.FileExtensionId,
                contentType: "application/json",
                success: function (returnedData) {
                    self.IsPositional(returnedData.IsPositional);
                    self.IsFixedWidth(returnedData.IsFixedWidth);
                    self.AllowArrays(returnedData.AllowArrays);
                    self.DataTypes($.map(returnedData.ValidDatatypes, function (item) {
                        return new ValidDataType(item);
                    }));
                },
                async: false
            });

            self.RowSorter();

            // Select the node that will be observed for mutations
            //const targetNode = document.getElementById('schemaPanel');

            //// Options for the observer (which mutations to observe)
            //const config = { attributes: false, childList: true, subtree: true, characterData: false };

            //// Callback function to execute when mutations are observed
            //const callback = function(mutationsList, observer) {
            //    // Use traditional 'for loops' for IE 11
            //    for(const mutation of mutationsList) {
            //        if (mutation.type === 'childList') {
            //            console.log('A child node has been added or removed.');
            //            console.log(mutation);
            //        }
            //        else if (mutation.type === 'attributes') {
            //            console.log('The ' + mutation.attributeName + ' attribute was modified.');
            //        }
            //    }
            //};

            //// Create an observer instance linked to the callback function
            //const observer = new MutationObserver(callback);

            //// Start observing the target node for configured mutations
            //observer.observe(targetNode, config);
        };

        var initialData = [
            {
                Name: "Parent1", Description: "LaRusso", DataType: "ARRAY", ArrayType: "STRUCT", Precision: "", Scale: "",
                ChildRows: [
                    {
                        Name: "Child1", Description: "LaRusso", DataType: "STRUCT", ArrayType: "", Precision: "", Scale: "",
                        ChildRows: [
                            {
                                Name: "Child11", Description: "LaRusso", DataType: "INTEGER", ArrayType: "", Precision: "", Scale: "",
                            },
                            {
                                Name: "Child12", Description: "LaRusso", DataType: "STRUCT", ArrayType: "", Precision: "", Scale: "",
                                ChildRows: [
                                    { Name: "Child121", Description: "LaRusso", DataType: "INTEGER", ArrayType: "", Precision: "", Scale: "" },
                                    { Name: "Child122", Description: "LaRusso", DataType: "INTEGER", ArrayType: "", Precision: "", Scale: "" }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                Name: "Parent2", Description: "LaRusso", DataType: "INTEGER", ArrayType: "", Precision: "", Scale: ""
            }
        ];

        var vm;
        $(function () {

            var url_parts = window.location.href.replace(/\/\s*$/, '').split('/');
            //since we do not need example.com
            url_parts.shift();

            $.ajax({
                type: "GET",
                url: "/api/v1/metadata/datasets/" + url_parts[3] + "/schemas/" + url_parts[5] + "/columns" ,
                contentType: "application/json",
                success: function (returnedData) {
                    console.log(returnedData);
                    $('#panelSpinner').hide();
                    $('#rowsContainer').show();

                    vm = new viewModel(returnedData);
                    ko.applyBindings(vm);

                    if (returnedData.RowCount >= 1 && returnedData.HiveDatabaseName != null && returnedData.HiveTableName != null) {
                        $("button").prop("disabled", true);
                        $("select").prop("disabled", true);
                        $("input").prop("disabled", true);
                    }
                    initLoadComplete = true;
                },
                async: false
            });

            $(document).ready(function () {
                $(".sortable-fields-active").sortable({
                    stop: function (event, ui) {
                        vm.SortRows();
                    }
                });
            });

        });

    </script>

}
