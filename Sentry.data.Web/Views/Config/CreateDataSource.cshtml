@using Sentry.data.Core;
@model Sentry.data.Web.DataSourceModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Data Source Form";
}

<div id="alertRow" class="row pt-2" style="position: relative; z-index: 999">
    <div class="col-lg-12">
        <div id="alertContainer" class="bs-component">
            <div id="configWarningAlert" class="alert" style="display: none;">
                <button type="button" class="close" data-dismiss="alert">×</button>
                <h4 class="pt-0" id="configWarningHeader">Warning!</h4>
                <p id="configWarningText"></p>
            </div>
        </div>
    </div>
</div>

<div class="topBanner">
    <div>
        <a class="backToList" href="/"><em class="fas fa-chevron-left pr-3"></em>Back to Previous Page</a>
    </div>
</div>

@using (Html.BeginForm("DataSourceForm", "Config", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ReturnUrl)
    @Html.HiddenFor(model => model.PrimaryContactId)

    <h1 class="pt-0">Create Data Source</h1>

    <div class="md-form">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.Name, new { @value = "", @class = "form-control edit-dataset-row" })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>

    <div class="md-form">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.Description, new { @value = "", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>

    <div class="md-form">
        @Html.LabelFor(model => model.PrimaryContactName, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.PrimaryContactName, new { htmlAttributes = new { @class = "form-control w-100", @placeholder = "Associate Name or Sentry ID (i.e. 072984)" } })
        @Html.ValidationMessageFor(model => model.PrimaryContactName, "", new { @class = "text-danger" })
    </div>

    <div class="form-check">
        <input type="checkbox" value="true" class="form-check-input" id="IsSecured" name="IsSecured" data-val-required="The Restrict Data Source field is required." checked="@Model.IsSecured">
        @Html.LabelFor(m => m.IsSecured, htmlAttributes: new { @class = "form-check-label" })
    </div>

    <div class="md-form">
        @Html.LabelFor((model) => model.SourceType, new { @class = "mdb-main-label" })
        @Html.DropDownListFor((model) => model.SourceType, Model.SourceTypesDropdown, new { @class = "mdb-select" })
        @Html.ValidationMessageFor((model) => model.SourceType, "", new { @class = "text-danger" })
    </div>

    <div class="md-form fieldDescription">
        <label class="control-label"></label>
        <span class="text-muted">
            <em id="sourceDescription"></em>
        </span>
    </div>

    <div class="md-form">
        @Html.LabelFor(model => model.BaseUri, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.TextBoxFor(model => model.BaseUri, new { @value = "", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.BaseUri, "", new { @class = "text-danger" })
    </div>
    <div id="authPanel">
        <div class="md-form">
            @Html.LabelFor((model) => model.AuthID, new { @class = "mdb-main-label" })
            @Html.DropDownListFor((model) => model.AuthID, Model.AuthTypesDropdown, new { @class = "mdb-select" })
            @Html.ValidationMessageFor((model) => model.AuthID, "", new { @class = "text-danger" })
        </div>

        <div class="md-form fieldDescription">
            <label class="control-label"></label>
            <span class="text-muted">
                <em id="authDescription"></em>
            </span>
        </div>
    </div>
    <div id="userPassPanel">
        <div class="form-check">
            <input type="checkbox" value="true" class="form-check-input" id="IsUserPassRequired" name="IsUserPassRequired" checked="@Model.IsUserPassRequired">
            @Html.LabelFor((model) => model.IsUserPassRequired, new { @class = "form-check-label" })
            <div id="userPassNotificationPanel" class="credentialWarning">
                <em>Work with data.sentry.com administrators to configure credentials.  The data source will not operate until credentials are configured.</em>
            </div>
        </div>
    </div>

    <div id="tokenAuthPanel">
        @Html.Label("Authorization Header", new { @class = "control-label" })
        <div class="md-form input-group">
            <div class="input-group-prepend">
                <span class="input-group-text md-addon">Token Header and Value</span>
            </div>
            @Html.TextBoxFor(m => m.TokenAuthHeader, new { @value = "", @class = "form-control", @placeholder = "Token Header Name" })
            @Html.ValidationMessageFor((model) => model.TokenAuthHeader, "", new { @class = "text-danger" })
            @Html.TextBoxFor(m => m.TokenAuthValue, new { @value = "", @class = "form-control", @placeholder = "Token Value" })
            @Html.ValidationMessageFor((model) => model.TokenAuthValue, "", new { @class = "text-danger" })
        </div>
    </div>

    <div id="OAuthPanel">
        <div class="md-form">
            @Html.LabelFor(m => m.ClientId, new { @class = "control-label" })
            @Html.TextBoxFor((model) => model.ClientId, new { @class = "form-control" })
            @Html.ValidationMessageFor((model) => model.ClientId, "", new { @class = "text-danger" })
        </div>
        <div class="md-form">
            @Html.LabelFor(m => m.ClientPrivateId, new { @class = "control-label" })
            @Html.TextBoxFor((model) => model.ClientPrivateId, new { @class = "form-control " })
            @Html.ValidationMessageFor((model) => model.ClientPrivateId, "", new { @class = "text-danger" })
        </div>
        <div class="md-form">
            @Html.LabelFor(m => m.TokenUrl, new { @class = "control-label" })
            @Html.TextBoxFor((model) => model.TokenUrl, new { @class = "form-control" })
            @Html.ValidationMessageFor((model) => model.TokenUrl, "", new { @class = "text-danger" })
        </div>
        <div class="md-form">
            @Html.LabelFor(m => m.TokenExp, new { @class = "control-label" })
            @Html.EditorFor((model) => model.TokenExp, new { @class = "form-control" })
            @Html.ValidationMessageFor((model) => model.TokenExp, "", new { @class = "text-danger" })
        </div>
        <div class="md-form">
            @Html.LabelFor(m => m.Scope, new { @class = "control-label" })
            @Html.TextBoxFor((model) => model.Scope, new { @class = "form-control" })
            @Html.ValidationMessageFor((model) => model.Scope, "", new { @class = "text-danger" })
        </div>
    </div>

    <div id="portNumberPanel">
        <div class="md-form">
            @Html.LabelFor(model => model.PortNumber, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.PortNumber, new { @value = "", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PortNumber, "", new { @class = "text-danger" })
        </div>
        <div class="md-form fieldDescription">
            <label class="control-label"></label>
            <div class="text-muted">
                <em>Industry standard default port values:</em>
                <ul>
                    <li><em>FTP : 21</em></li>
                    <li><em>SSH\SFTP : 22</em></li>
                    <li><em>HTTPS : 443</em></li>
                </ul>
            </div>
        </div>
    </div>

    <div id="requestHeaderPanel">
        <div class="md-form">
            @Html.LabelFor((model) => model.Headers, htmlAttributes: new { @class = "control-label" })
            <div id="requestHeader" class="row">
                <div class="md-form headerEntry col">
                    <a class="addHeader" style="display: inline-block; margin-left: 10px;"><em class="fas fa-plus pr-3"></em> Add Header</a>
                </div>
                <div class="headerEntryLabel col">
                    @Html.Label("Header Name", new { @value = "", @class = "headerEntryLabel" })
                </div>
                <div class="headerEntryLabel col">
                    @Html.Label("Header Value", new { @value = "", @class = "headerEntryLabel" })
                </div>
                @*This approach is described at the site http://ivanz.com/2011/06/16/editing-variable-length-reorderable-collections-in-asp-net-mvc-part-1/*@
                @foreach (RequestHeader header in Model.Headers)
                {
                    Html.RenderPartial("_Headers", header);
                }
            </div>
        </div>
    </div>

    <div class="md-form">
        <div>
            <input type="submit" id="btnCreateDataSource" value="Create Data Source" class="btn btn-primary" />
        </div>
    </div>
}

<style>
    .credentialWarning {
    }

    .addHeader {
        padding-top: 6px;
    }

    .headerEntry, .headerEntryLabel {
        padding-left: 0px;
    }
</style>


@section Scripts {

    <script>
        $(document).ready(function () {

            data.DataSource.FormInit('@(Model.HrempServiceUrl)' , '@(Model.HrempServiceEnv)');

            function setSourceTypeDefaults(sourceType) {
                if (sourceType == "SFTP" || sourceType == "FTP" || sourceType == "HTTPS" || sourceType == "GOOGLEAPI" || sourceType == "GoogleBigQueryApi") {

                    $('#portNumberPanel').show();
                    $('#userPassPanel').hide();
                    $('#authPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                    $('#requestHeaderPanel').hide();

                    //User\Pass is required, so check and disable for changing
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', false);
                    $('#AuthID').attr('readonly', false);

                    //Assign Source specific default values
                    if (sourceType == "SFTP") {

                        //Setting default values for port number
                        $('#PortNumber').val('22');
                    }
                    else if (sourceType == "FTP") {
                        //Setting default values for port number
                        $('#PortNumber').val('21');
                    }
                    else if (sourceType == "GoogleBigQueryApi") {
                        $('#PortNumber').val('443');
                    }
                    else if (sourceType == "HTTPS" || sourceType == "GOOGLEAPI") {
                        //Setting default values for port number
                        $('#PortNumber').val('443');
                        $('#requestHeaderPanel').show();
                    }
                }
                else if (sourceType == "S3Basic" || sourceType == "DFSCustom") {

                    //User\Pass is not required, so uncheck and disable
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);

                    //Default authentication and disable
                    $("#AuthID option").each(function () {
                        if ($(this).text() == 'Anonymous Authentication') {
                            $('#AuthID').val($(this).val()).trigger('change');
                            $('#AuthID').attr('readonly', true);
                        }
                    });

                    $('#PortNumber').val('')

                    $('#portNumberPanel').show();
                    $('#userPassPanel').hide();
                    $('#authPanel').hide();
                    $('#OAuthPanel').hide();
                    $('#requestHeaderPanel').hide();
                }
                else {
                    $('#PortNumber').val('')
                    $('#portNumberPanel').hide();
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', false);
                    $('#userPassPanel').hide();
                    $('#authPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                    $('#requestHeaderPanel').hide();
                }
            }

            $('.backToList').attr("href", document.referrer);
            $('#ReturnUrl').val(document.referrer);

            setSourceTypeDefaults($('#SourceType').find(":selected").text())

            $("#SourceType").change(function () {
                var val = $(this).val();
                var subItems = "";

                $("#AuthID").materialSelect({destroy: true}); // Reset to avoid visual bug

                $.getJSON("@Url.Action("SourceTypeDescription", "Config")", {sourceType:val} ,function (data) {

                    $("#sourceDescription").text(data);

                    setSourceTypeDefaults(val)
                });

                $.getJSON("@Url.Action("AuthenticationByType", "Config")", {sourceType:val} ,function (data) {
                    $.each(data, function (index, item) {
                        subItems += "<option value='" + item.Value + "'>" + item.Text + "</option>";
                    });

                    $("#AuthID").html(subItems);
                });
                $("#AuthID").materialSelect(); // Reset to avoid visual bug

            });

            $("#AuthID").change(function () {
                var val = $(this).val();
                var txt = $(this).find(":selected").text()
                var subItems = "";

                if (val != 0) {
                    $.getJSON("@Url.Action("AuthTypeDescription", "Config")", {AuthID:val} ,function (data) {
                        $("#authDescription").text(data);
                    });
                }

                if (txt == 'Anonymous Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
                else if (txt == 'Basic Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', true);
                    userpasschkbx.attr('disabled', true);
                    userpasschkbx.trigger("change");
                    $('#userPassPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
                else if (txt == 'Token Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);
                    userpasschkbx.trigger("change");
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').show();
                    $('#OAuthPanel').hide();
                }
                else if (txt == 'OAuth 2.0 Authentication') {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', true);
                    userpasschkbx.trigger("change");
                    $('#userPassPanel').hide();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').show();
                }
                else {
                    var userpasschkbx = $('#IsUserPassRequired');
                    userpasschkbx.prop('checked', false);
                    userpasschkbx.attr('disabled', false);
                    $("#authDescription").text('');
                    $('#userPassPanel').show();
                    $('#tokenAuthPanel').hide();
                    $('#OAuthPanel').hide();
                }
            });

            $('#IsUserPassRequired').change(function () {
                if ($(this).prop('checked') == false) {
                    HideAlert();
                }
                else {
                    var text = "<p>Any jobs referencing this data source will fail until data.sentry.com administrators configure the credentials.</p>" +
                        "<p>Please click <a href= \"mailto:DSCSupport@sentry.com?Subject=Data&nbsp;Source&nbsp;Credentials&nbsp;Request&Body=Please contact me regarding setting up credentials for a new data source.%0AData Source Name: <Insert Your Value>%0ASource Type: <Insert Your Value>%0ABaseUri: <Insert Your Value>\" > here </a > to start request for credential setup.</p > ";

                    PassHelpText("Warning", text);
                }
            });


            function HideAlert() {
                $('#configWarningAlert').hide();
            };

            var AlertLevel = "";
            var Banner = "";

            function PassHelpText(type, information) {

                var banner;
                var header;
                var text;

                if ($('#alertContainer').children().length == 0) {
                    $('#alertContainer').append("<div id=\"configWarningAlert\" class=\"alert alert-dismissable alert-warning\">" +
                        "<button type=\"button\" class=\"close\" data-dismiss=\"alert\">×</button>" +
                        "<h4 id=\"configWarningHeader\">Warning!</h4>" +
                        "<p id=\"configWarningText\"></p>" +
                        "</div>");
                }

                banner = $('#configWarningAlert');
                header = $('#configWarningHeader');
                text = $('#configWarningText');

                text.empty();

                if (information.startsWith('u\'')) {
                    information = information.substr(2, information.length - 1);
                }

                text.append(information);
                Banner = information;
                AlertLevel = type;

                if (type == "Warning") {
                    banner.switchClass("alert-success", "alert-warning", 10);
                    banner.switchClass("alert-info", "alert-warning", 10);
                    header.text("Warning!");

                } else if (type == "Success") {
                    banner.switchClass("alert-warning", "alert-success", 10);
                    banner.switchClass("alert-info", "alert-success", 10);
                    header.text("Success");
                } else if (type == "Error") {
                    banner.switchClass("alert-warning", "alert-danger", 10);
                    banner.switchClass("alert-info", "alert-danger", 10);
                    header.text("Error");
                } else {
                    banner.switchClass("alert-warning", "alert-info", 10);
                    banner.switchClass("alert-success", "alert-info", 10);
                    header.text("Information");
                }

                banner.show();
            }


            $('body').on('click', '.removeHeader', function () {

                $(this).parent().parent().remove();
            });


            $('.addHeader').click(function () {
                //This approach is described at the site below
                // http://ivanz.com/2011/06/16/editing-variable-length-reorderable-collections-in-asp-net-mvc-part-1/
                $.get("@Url.Action("HeaderEntryRow", "Config")", function (template) {
                    $('#requestHeader').append(template);
                });
            });

            // For certain types of Data Sources the isUserPassRequired checkbox required to be true.  Setting a checkboxfor to readonly still allows
            //   a user to change the value.  A workaround being used for this property is using jquery to disable the property
            //   for the specific data source types which require it to be true.  Then a $('form').on('submit') function
            //   enables the checkbox right before submitting the form.  This allows the value to be passed back to the controller.
            //https://stackoverflow.com/questions/40134337/set-mvc-checkbox-to-readonly-or-disabled-on-client-side
            $("form").submit( function (e) {
                $('#IsUserPassRequired').prop('disabled', false);
            });
        });
    </script>

}
