@model Sentry.data.Web.ManageConfigsModel

@using Sentry.data.Core

@{
    ViewBag.Title = "View Dataset Configuration Details";
    string color = "dsc-" + Model.CategoryColor + "-text";

    Layout = "~/Views/Shared/_Layout.cshtml";
}
<a class="backToList" href="/Dataset/Detail/@Model.DatasetId"><em class="fas fa-chevron-left pr-3"></em>  Back to Dataset Information</a>

<div class="topBanner" style="height: 60px;
    border-bottom: 1px #DDDDDD solid;">
    <div class="relative hidden-sm hidden-xs">
        <div>
            <div class="no-overflow">
                <h1 class="detailName leftFloat @color pt-0">
                    @Model.DatasetName
                </h1>
            </div>
        </div>
    </div>
</div>

<p>Click any section header to begin:</p>

<div id="configs">
    @foreach (var item in Model.DatasetFileConfigs)
    {
        @* Do not display any objects with DELETED status *@
        if (item.ObjectStatus != Sentry.data.Core.GlobalEnums.ObjectStatusEnum.Deleted)
        {
            <div>
                @* Only show ACTIVE objects to users.  Administrators can see ACTIVE\PENDING DELETE objects *@
                @if ((item.ObjectStatus == Sentry.data.Core.GlobalEnums.ObjectStatusEnum.Active && !Model.Security.ShowAdminControls) || (Model.Security.ShowAdminControls && item.ObjectStatus != Sentry.data.Core.GlobalEnums.ObjectStatusEnum.Deleted))
                {
                    <div class="configHeader categoryBanner-blue">
                        @if (item.ObjectStatus != Sentry.data.Core.GlobalEnums.ObjectStatusEnum.Active)
                        {
                            <h2 class="@color pt-3">@item.ConfigFileName<strong> <em>(@Sentry.data.Core.GlobalEnums.ObjectStatusEnum.Pending_Delete.ToString())</em></strong><em class="fas fa-chevron-up tracker-menu-icon fa-sm"></em></h2>
                        }
                        else
                        {
                            <h2 class="@color pt-3">@item.ConfigFileName<em class="fas fa-chevron-up tracker-menu-icon fa-sm"></em></h2>
                        }

                    </div>

                    <div class="configContainer" style="display: none;">

                        <h4 class="@color pt-1">Configuration Metadata</h4>

                        <div class="col-md-12">
                            <div class="col-md-1">Description:</div>
                            <div class="col-md-11">
                                @if (item.ConfigFileDesc != null && item.ConfigFileDesc.Length >= 300)
                                {

                                    int lastInfo = item.ConfigFileDesc.Substring(0, 300).LastIndexOf(" ");
                                    <p>
                                        <span>@item.ConfigFileDesc.Substring(0, lastInfo)</span>
                                        <span id="usageSeeMoreEllipsis">...&nbsp;</span>
                                        <span id="usageSeeMorePanel" style="display: none;">@item.ConfigFileDesc.Substring(lastInfo)</span>
                                        <span id="usageSeeMoreButton" style="cursor: pointer;"><a onclick="$('#usageSeeMorePanel').show(); $(this).parent().hide(); $('#usageShowLessButton').show(); $('#usageSeeMoreEllipsis').hide();">See More</a></span>
                                        <span id="usageShowLessButton" style="cursor: pointer; display:none;"><a onclick="$('#usageSeeMorePanel').hide(); $(this).parent().hide(); $('#usageSeeMoreButton').show(); $('#usageSeeMoreEllipsis').show();">Show Less</a></span>
                                    </p>
                                }
                                else
                                {
                                    <p>@item.ConfigFileDesc</p>
                                }
                            </div>
                        </div>


                        <div class="col-md-12">
                            <div class="col-md-3">Control-M Trigger Name:</div>
                            <div class="col-md-11">
                                <p>@item.ControlMTriggerName</p>
                            </div>

                        </div>

                        <div class="col-md-12 configDetailRow">

                            @if (Model.Security.ShowAdminControls)
                            {
                                <div class="col-md-3">Storage id: <strong>@item.RawStorageId</strong></div>
                                <div class="col-md-3">Schema id: <strong>@item.SchemaId</strong> <em>(@item.OldSchemaId)</em></div>
                            }
                            else
                            {
                                <div class="col-md-3">Schema id: <strong>@item.SchemaId</strong></div>
                            }
                            <div class="col-md-3">Configuration classification: <strong>@item.FileType</strong></div>
                            <div class="col-md-3">File type: <strong>@item.FileExtension.Name</strong></div>
                        </div>
                        @if (item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.ANY || item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.DELIMITED || item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.CSV)
                        {
                            <div class="col-md-12 configDetailRow">
                                <div class="col-md-3">This schema's current Delimiter is ( <strong>@item.Delimiter</strong> )</div>
                                @if (Model.Security.ShowAdminControls)
                                {
                                    <div class="col-md-3">Files contain headers: <strong>@item.HasHeader</strong></div>
                                    <div class="col-md-6">CLA1396_NewEtlColumns: <strong>@item.CLA1396_NewEtlColumns</strong></div>
                                }
                                else
                                {
                                    <div class="col-md-9">Files contain headers: <strong>@item.HasHeader</strong></div>
                                }
                            </div>
                        }

                        @if (item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.XML || item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.JSON)
                        {
                            <div class="col-md-12 configDetailRow">
                                @if (String.IsNullOrWhiteSpace(item.SchemaRootPath))
                                {
                                    <div class="col-md-9">Schema Root Path: <em>(Not Specified)</em></div>
                                }
                                else
                                {
                                    <div class="col-md-9">Schema Root Path: <strong>@item.SchemaRootPath</strong></div>
                                }
                            </div>
                        }

                        <div class="col-md-12 configDetailRow">
                            @if (item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.ANY || item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.DELIMITED || item.FileExtension.Name.Trim() == GlobalConstants.ExtensionNames.FIXEDWIDTH)
                            {<div class="col-md-12">This configuration will allow <strong>all</strong> file extensions.</div>}
                            else
                            {<div class="col-md-12">This configuration will only allow files with <strong>.@item.FileExtension.Name.ToLower()</strong> extension</div>}
                        </div>
                        <div class="col-md-12 configDetailRow">
                            <div class="col-md-12">This configuration Data Scope is <strong>@item.ScopeType.Name</strong> which means :</div>
                            <div class="col-md-11 col-md-offset-1">@item.ScopeType.Description</div>
                        </div>
                        <div class="col-md-12 configDetailRow">
                            @if (item.CreateCurrentView)
                            {
                                <div class="col-md-12">A current view exists for this schema which filters to data from latest file processed.</div>
                            }
                            else
                            {
                                <div class="col-md-12">This schema does not contain a current view</div>
                            }
                        </div>


                        <a class="btn btn-primary" href="/Config/Edit/@item.ConfigId">Edit</a>
                        <button class="btn btn-danger" id="btnDeleteConfig" data-id="@item.ConfigId">Delete</button>
                        @* Schema Metadata *@
                        @if (item.Schema != null)
                        {
                            <hr />
                            <h4 class="@color pt-1">Columns Metadata (name, datatype, is array, etc.)</h4>
                            <div class="columnsContainer col-md-12">
                                @if (item.Schema.Revisions.Count() == 0)
                                {
                                    <p>This schema is not currently does not yet have any columns associated to it.</p>
                                }
                                <p>Created on: @item.Schema.CreatedDTM</p>
                                <p>Last Modified on: @item.Schema.LastUpdatedDTM</p>
                            </div>
                            if (item.Schema.Revisions.Count() > 0)
                            {
                                <a class="btn btn-primary" href="/Config/@item.ConfigId/Schema/@item.Schema.SchemaId/Fields">Edit Columns Metadata</a>
                                <a class="btn btn-primary" id="btnSyncSchema" data-datasetId="@Model.DatasetId" data-schemaId="@item.Schema.SchemaId">Sync Consumption Layer</a>
                            }
                            if (item.Schema.Revisions.Count() == 0)
                            {
                                <a class="btn btn-success" href="/Config/@item.ConfigId/Schema/@item.Schema.SchemaId/Fields">Add Columns Metadata</a>
                            }
                        }

                        @if (Model.DisplayDataflowMetadata || Model.Security.ShowAdminControls)
                        {
                            <hr />
                            <h4 class="@color pt-1">Producer DataFlow</h4>

                            @* Loop through each external dataflow *@
                            if (!item.ExternalDataFlowJobs.Any())
                            {
                                <p>This schema does not have any associated dataflows yet.</p>
                            }
                            foreach (var ext in item.ExternalDataFlowJobs)
                            {
                                <div class="retJob">
                                    <div class="jobHeader categoryBanner-blue">
                                        <h6 class="pt-2">@ext.Name<em class="retJobDetails tracker-menu-icon fas fa-chevron-up"></em></h6>

                                        @if (Model.DisplayDataflowEdit)
                                        {
                                            <div id="edit-dataflow-icon" class="float-r clickable" data-toggle="tooltip" data-placement="top" title="Edit DataFlow" onclick="data.DataFlow.EditUrlRedirect(@ext.Id)"><span class="far fa-edit"></span></div>
                                        }
                                    </div>
                                    <div class="jobContainer" style="display:none;">
                                        @if (ext.Step.Any(w => w.ActionName != "S3 Drop" || w.ActionName != "Raw Storage" || w.ActionName != "Schema Map"))
                                        {
                                            <p>This dataflow contains the following steps:</p>
                                            <ol>
                                                @foreach (DataFlowStepModel step in ext.Step.Where(w => w.ActionName != "S3 Drop" || w.ActionName != "Raw Storage" || w.ActionName != "Schema Map").OrderBy(o => o.ExecutionOrder))
                                                {
                                                    <li>@step.ActionName</li>
                                                }
                                            </ol>
                                        }
                                        else
                                        {
                                            <p>This dataflow does not contain any special processing.</p>
                                        }

                                        @* DataflowStep metadata *@
                                        @foreach (DataFlowStepModel stepModel in ext.Step.Where(w => w.ActionName == "S3 Drop" || w.ActionName == "Producer S3 Drop"))
                                        {
                                            <div class="retJob @stepModel.ActionName">
                                                <div class="jobHeader categoryBanner-blue">
                                                    <h6 class="pt-1">@stepModel.ActionName<em class="retJobDetails tracker-menu-icon fas fa-chevron-up"></em></h6>

                                                </div>
                                                <div class="jobContainer" style="display:none;">
                                                    <div><span>We are watching for files dropped in this AWS S3 url:</span></div>
                                                    <div class="filePath"><span>@stepModel.RootAwsUrl@stepModel.TriggetKey</span></div>
                                                </div>
                                            </div>
                                        }
                                        @* Loop through associated retriever job metadata *@
                                        @foreach (Sentry.data.Core.RetrieverJob extJob in ext.RetrieverJobs)
                                        {
                                            Html.RenderPartial("~/Views/RetrieverJob/_RetrieverJob.cshtml", extJob, new ViewDataDictionary { { "Color", color } });
                                        }
                                    </div>
                                </div>

                            }
                        }
                    </div>
                }
            </div>
            <hr />
        }
    }

</div>

<div>
    @if (HttpContext.Current.IsDebuggingEnabled)
    {
        <a class="btn btn-success btnCreateDirectory"><em class="fas fa-plus"></em>  Create Directories</a>
        <hr />
    }
    <a class="btn btn-success" href="/Config/Dataset/@Model.DatasetId/Create"><em class="fas fa-plus"></em>  Create new Data File Configuration</a>
</div>
<hr />

<div>
    <a class="backToList" href="/Dataset/Detail/@Model.DatasetId"><em class="fas fa-chevron-left pr-3"></em>  Back to Dataset Information</a>
</div>


@section Scripts {

    @Scripts.Render("~/bundles/prettyCron")

    <script>
        $(function () {
            data.Config.IndexInit();
        });
    </script>
}