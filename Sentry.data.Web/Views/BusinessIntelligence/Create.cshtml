@model CreateBusinessIntelligenceModel
@{
    ViewData["Title"] = "Create Exhibit";
}

@*@{
        ViewBag.Title = "EditDatasetDetails";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }*@

<h2>Create Exhibit</h2>
<div></div>

@using (Html.BeginForm(null, null, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <p>Please fill out the following fields describing your Exhibit or Dashboard.  Before starting check to see if your exhibit or dashboard is not already on this site by using our <a href="~/Search/BusinessIntelligence/Index?searchPhrase=">search tool.</a></p>

    @*Show the custom validation summary*@
    @Html.DisplayFor((model) => ViewData.ModelState)

    //@Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <ul class="nav nav-tabs">
        <li class="active"><a href="#informationPanel" data-toggle="tab" aria-expanded="true">General Information <span id="infoBadge" class="badge badge-danger"></span></a></li>
        <li class=""><a href="#securityPanel" data-toggle="tab" aria-expanded="false">Security <span id="securityBadge" class="badge badge-danger"></span></a></li>
    </ul>

    <div id="myTabContent" class="tab-content">
        <div id="informationPanel" class="tab-pane fade active in form-horizontal">

            <br />
            <h4>Information</h4>
            <br />

            @Html.HiddenFor(model => model.DatasetId)
            @Html.HiddenFor(model => model.SentryOwnerName)
            @Html.HiddenFor(model => model.CreationUserName)

            <div class="form-group">
                @Html.LabelFor((model) => model.CategoryIDs, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor((model) => model.CategoryIDs, Model.AllCategories, new { @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor((model) => model.CategoryIDs, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Exhibit Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DatasetName, new { htmlAttributes = new { @class = "form-control edit-dataset-row" } })
                    @Html.ValidationMessageFor(model => model.DatasetName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DatasetDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.DatasetDesc, new { @class = "form-control edit-dataset-row", @style = "min-width: 100%; max-width: 100%; width: 100%;" })
                    @Html.ValidationMessageFor(model => model.DatasetDesc, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group fieldDescription">
                <label class="control-label col-md-2"></label>
                <div class="col-md-10">
                    <span class="text-muted">
                        <em>This description will be shown on the Exhibit Search Page.</em>
                    </span>
                </div>
            </div>

            @Html.LabelFor(model => model.FileTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="form-group">
                
                @{
                    foreach (var type in Model.AllDataFileTypes)
                    {
                        <div class="col-md-10 col-md-offset-2">
                            @Html.Label(type.Text, htmlAttributes: new { @class = "col-md-2" })
                            @*@Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2"})*@
                            @Html.RadioButtonFor(model => model.FileTypeId, type.Value, new { @class = "col-md-1" } )
                        </div>
                    }
                }
            </div>

            <div id="UrlPanel" class="tab-pane fade in form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control edit-dataset-row" } })
                    </div>
                </div>
                <div class="form-group urlDescription">
                    <label class="control-label col-md-2"></label>
                    <div class="col-md-10">
                        <span class="text-muted">
                            <em>If the report has a url (Tableau and Sharepoint locations), specify the URL to the report. See example below</em>
                            <br />
                            <em>     (i.e. https://tableau.sentry.com/#/site/SentryInsurance/views/WorkflowPayloads/WorkflowPayloads?:iid=1 )</em><br />
                            <br />
                            <em>If the report resides on a network location, please sepecify the UNC path.  See examples below</em><br />
                            <em>     N: Drive location - (\\Sentry.com\Share\O_IS\... instead of N:\O_IS\...)</em><br />
                            <em>     DFS location - (\\Sentry.com\appfs\...)</em>
                        </span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor((model) => model.FreqencyID, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor((model) => model.FreqencyID, Model.AllFrequencies, new { @class = "form-control edit-dataset-row" })
                    @Html.ValidationMessageFor((model) => model.FreqencyID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="securityPanel" class="tab-pane fade in form-horizontal">
            <br />
            <h4>Security</h4>
            <br />
            @*<p>
                Dataset Security is very important to this site and Sentry as a whole.
                It is <b>imperative</b> that you know what you are uploading to this site and what the data is.
                Data.Sentry.com uploads data to the cloud so no sensitive data can be uploaded through our site.
                To find out what data is sensitive and what classification your data is <a target="_blank" href="http://sharepoint.sentry.com/Security/Security%20Architecture/Security%20Policies/Published/Policy-Data%20Classification%20and%20Handling.pdf">click here.</a>
                Data that is sensitive can be uploaded after it has been tokenized by the information security web service.
            </p>

            <br />*@
            <div class="form-group">
                @Html.LabelFor(model => model.OwnerID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OwnerID, new { htmlAttributes = new { @class = "form-control edit-dataset-row", @placeholder = "Associate Name or Sentry ID (i.e. 072984)" } })
                    @Html.ValidationMessageFor(model => model.OwnerID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="dataSource" class="tab-pane fade in form-horizontal">

            <br />
            <h4>Data Source Information</h4>
            <br />

        </div>




        <div id="columnPanel" class="tab-pane fade in form-horizontal">
            <br />
            <h4>Column Metadata</h4>
            <br />

            <div class="form-group">

                <label for="DatasetFileUpload" class="control-label col-md-2">Example File</label>
                <div class="col-md-10">
                    <input type="file" class="edit-dataset-row file-load" id="DatasetFileUpload" />
                    @*@Html.HiddenFor(model => model.f)*@
                </div>
            </div>

            <button type="button" class="btn btn-primary" id="btnUploadFile" data-id="0">Upload Example Data File</button>
        </div>

        <div id="lineagePanel" class="tab-pane fade in form-horizontal">
            <br />
            <h4>Data Lineage</h4>
            <br />
        </div>

    </div>

    <hr />
    <div class="form-group">
        <span class="text-muted"><em>** Fields in <b>Bold</b> are Required</em></span>
    </div>
    <div class="form-group">
        <div>
            <input type="submit" id="btnCreateDataset" value="Create Exhibit" class="btn btn-primary" />
            <a class="btn btn-warning" href="~/BusinessIntelligence/Index">Cancel</a>
        </div>
    </div>
}
<style>
    .fieldDescription {
        padding-bottom: 10px;
        margin-top: -10px;
        padding-left: 25px;
    }

    div.has-error ul.select2-choices {
        border-color: red !important;
    }

    .optional {
        font-weight: 100;
    }

    input[type="checkbox"] {
        margin: 10px 0 0;
    }
</style>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>
    <script>

        $(function () {
            data.Dataset.CreateInit();

            $('#cronDailyJobTimePicker').timepicker({
                timeFormat: 'h:mm p',
                interval: 60,
                minTime: '0',
                maxTime: '23:59',
                defaultTime: '11',
                startTime: '0',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });

            $('#cronWeeklyJobTimePicker').timepicker({
                timeFormat: 'h:mm p',
                interval: 60,
                minTime: '0',
                maxTime: '23:59',
                defaultTime: '11',
                startTime: '0',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
            $('#cronMonthlyJobTimePicker').timepicker({
                timeFormat: 'h:mm p',
                interval: 60,
                minTime: '0',
                maxTime: '23:59',
                defaultTime: '11',
                startTime: '0',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
            $('#cronYearlyJobTimePicker').timepicker({
                timeFormat: 'h:mm p',
                interval: 60,
                minTime: '0',
                maxTime: '23:59',
                defaultTime: '11',
                startTime: '0',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });

            $("#cronJobDatePicker").datepicker();

            $("#CustomDropPath").change(function () {
                if (this.checked) {
                    $("#DropPath").prop('disabled', '');
                    $("#DropPath").prop('readonly', '');
                } else {
                    $("#DropPath").prop('disabled', 'disabled');
                    $("#DropPath").prop('readonly', 'readonly');
                }
            });

            if (!localStorage.getItem("DropPath")) {
                var dropPathName = $("#DropPath").val();
                if (dropPathName.substring(dropPathName.length - 1) !== "\\") {
                    dropPathName += "\\";
                }
                localStorage.setItem("DropPath", dropPathName);
            }

            $("#CategoryIDs").change(function () {
                console.log('cat');
                var newName = localStorage.getItem("DropPath") + $('#CategoryIDs').find(":selected").text() + "\\" + $("#DatasetName").val().toLowerCase().replace(new RegExp(" ", "g"), "_") + "\\";
                $("#DropPath").val(newName);
            });

            $("#DatasetName").change(function () {
                console.log('name');
                if ($('#CategoryIDs').find(":selected").text() != "Pick a Category") {
                    var newName = localStorage.getItem("DropPath") + $('#CategoryIDs').find(":selected").text() + "\\" + $("#DatasetName").val().toLowerCase().replace(new RegExp(" ", "g"), "_") + "\\";
                    $("#DropPath").val(newName);
                }
            });

            $('#DataSource_SourceType').change(function () {
                $.ajax({
                    type: "GET",
                    url: "/dataset/GetSourceDescription?DiscrimatorValue=" + $("#DataSource_SourceType").val(),
                    dataType: "json",
                    success: function (msg) {
                        $('#dataSourceText').text(msg);

                    },
                    error: function (e) {
                    }
                });
            });









            $("#DataClassification").change(function () {
                switch ($("#DataClassification").val()) {
                    case "1":
                        $('#dataClassInfo').text('“Restricted” information is proprietary and has significant business value for Sentry. ' +
                            'Unauthorized disclosure or dissemination could result in severe damage to Sentry.  Examples of restricted data include secret contracts or trade secrets.  ' +
                            'This information must be limited to only the few associates that require access to it.  If it is shared, accessed, or altered without the permission ' +
                            'of the Information Owner, Information Security must be notified immediately.  Designating information as Restricted involves significant ' +
                            'costs to Sentry.  For this reason, Information Owners making classification decisions must balance the damage that could result from ' +
                            'unauthorized access to or disclosure of the information against the cost of additional hardware, software or services required to protect it.');
                        break;
                    case "2":
                        $('#dataClassInfo').text('“Highly Sensitive” information is highly confidential, typically includes personally ' +
                            'identifiable information, and is intended for limited, specific use by a workgroup, ' +
                            'department, or group of individuals with a legitimate need to know. Disclosure or ' +
                            'dissemination of this information could result in significant damage to Sentry. ' +
                            'Examples of highly sensitive data include medical records, financial account or ' +
                            'bank account numbers, credit card numbers, individuals’ government-issued ' +
                            'identification numbers (for example driver’s license numbers, social security ' +
                            'numbers), and user passwords. This information must be limited to need to know ' +
                            'access. If it is shared, accessed, or altered without the permission of the ' +
                            'Information Owner, Information Security must be notified immediately.');
                        break;
                    case "3":
                        $('#dataClassInfo').text('“Internal Use Only” information can be disclosed or disseminated to Sentry ' +
                            'associates, but will only be shared with other individuals or organizations when a ' +
                            'non - disclosure agreement is in place and management has approved for legitimate ' +
                            'business reasons.  Examples include items such as email correspondence, internal ' +
                            'documentation that is available to all associates.');
                        break;
                    case "4":
                        $('#dataClassInfo').text('“Public” information can be disclosed or disseminated without any restrictions on ' +
                            'content, audience, or time of publication.  Examples are datasets that were generated by the Federal or State Governments like the Federal Motor Carrier Safety Administration or NOAA Weather Data.  ' +
                            'These datasets can be freely shared throughout Sentry.');
                        break;
                }
            });

            $("#FileType").change(function () {
                data.Dataset.setFileTypeInfo();
            });

            $("[id^='detailSectionHeader_']").click(function (e) {
                e.preventDefault();

                var id = $(this).attr("id");
                var category = "#hide_" + id
                var icon = "#icon_" + id;

                $(category).slideToggle();
                $(icon).toggleClass("glyphicon-chevron-down glyphicon-chevron-up");
            });

            $("[id^='btnUploadFile']").off('click').on('click', function () {
                $('#btnUploadFile').closest('.bootbox').hide();
                $('.modal-backdrop').remove();

                var modal = Sentry.ShowModalWithSpinner("Upload Results", {
                    Confirm: {
                        label: 'Confirm',
                        className: 'btn-success'
                    },
                    Cancel:
                        {
                            label: 'Cancel',
                            className: 'btn-cancel'
                        }
                });


                $('.modal-footer btn-success').prop("disabled", true);

                // This approach is from the following site:
                // http://www.c-sharpcorner.com/UploadFile/manas1/upload-files-through-jquery-ajax-in-Asp-Net-mvc/
                if (window.FormData !== undefined) {
                    console.log('File Upload Process Started');
                    var fileUpload = $("#DatasetFileUpload").get(0);
                    var files = fileUpload.files;

                    //Create FormData object
                    var fileData = new FormData();

                    fileData.append(files[0].name, files[0]);

                    if ((files[0].size / 1000000) > 100) {

                        var configID = $("#configList").find(":selected").val();
                        var dropLocation

                        for (i = 0; i < configs.length; i++) {
                            if (configs[i].ConfigId == configID) {
                                dropLocation = configs[i].DropPath;
                                break;
                            }
                        }


                        modal.ReplaceModalBody('<h3> The file you are attempting to upload to is too large to upload through the browser. </h3>' +
                            '<p>Please include only a few hundred rows and try again. </p>'
                        );

                        $('.modal-footer button').prop("disabled", false);
                    }
                    else {
                        var datasetID = window.location.pathname.substr(window.location.pathname.lastIndexOf('/') + 1);

                        if (datasetID == "" || datasetID == null || datasetID == undefined || isNaN(datasetID)) {
                            datasetID = $("[id^='btnUploadFile']").attr('data-id');
                        }

                        var configID = $("#configList").val();

                        var token = $('input[name="__RequestVerificationToken"]').val();

                        var xhr = new XMLHttpRequest();

                        modal.ReplaceModalBody('<p> Large files may take a long time to upload through the browser. </p>' +
                            '<p>Please do not close the window as your file is uploading. </p>' +
                            '<p> Progress: <span id=\'progressKB\'/></p>' +
                            '<h3><b><span id=\'percentTotal\'></span></b ></h3>' +
                            '<div>' +
                            '<div class="progress progress-striped active">' +
                            '<div class="progress-bar" id="progressBar"></div>' +
                            '</div>' +
                            '</div>'
                        );


                        (xhr.upload || xhr).addEventListener('progress', function (e) {
                            var done = e.position || e.loaded
                            var total = e.totalSize || e.total;

                            $('#percentTotal').text(Math.round(done / total * 100) + '%');
                            $('#progressKB').text('(' + Math.round(done / 1024) + ' KB / ' + Math.round(total / 1024) + ' KB)');
                            $('#progressBar').width(Math.round(done / total * 100) + '%');

                            $('.btn-success').prop("disabled", true);
                        });
                        xhr.addEventListener('load', function (e) {
                            $('.modal-footer button').prop("disabled", false);
                            modal.ReplaceModalBody(e.currentTarget.response);
                            console.log(e);
                        });

                        function cancelUpload() {
                            xhr.abort();
                            console.log('The Upload Process was aborted');
                        }

                        $('.btn-cancel')[0].addEventListener('click', cancelUpload, false);
                        $('.bootbox-close-button').hide();
                        //var url = '/Dataset/UploadDatafile/?id=' + encodeURI(datasetID) + "&configId=" + encodeURI(configID);
                        //xhr.open('post', url, true);
                        //xhr.setRequestHeader('__RequestVerificationToken', token);
                        //xhr.send(fileData);
                    }

                } else {
                    alert("FormData is not supported");
                }
            });
        });
    </script>
}
