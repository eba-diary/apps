@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    String livyURL = ViewBag.LivyURL + "/ui/session/";
}

<div id="bannerRow" class="row" style="position: fixed; z-index: 999">
    <div class="col-lg-12">
        <div id="bannerContainer" class="bs-component" onclick="HideBanner();">
            <div id="schemaWarningBanner" class="alert" style="display: none;">
                <button type="button" class="close" data-dismiss="alert">×</button>
                <h4 id="schemaWarningHeader">Warning!</h4>
                <p id="schemaWarningText"></p>
            </div>
        </div>
    </div>
</div>
<br />
<div class="row">
    <div class="col-lg-6">
        <h1>Query Tool</h1>
    </div>
    @if (ViewBag.IsAdmin)
    {
        <div class="col-lg-3">
            <h3><a href="@livyURL" target="_blank" id="LivyURL">Spark Session: <span id="sessionID"></span></a></h3>
        </div>
        <div class="col-lg-3" id="adminToolsButtons">
            <div class="btn-group">
                <a class="btn btn-primary" onclick="data.QueryTool.ToggleAdminControls()">Code History and Custom Code</a>
                <a href="#/" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false"><span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <li><a onclick="CreateSession(true)">Re-Create Session</a></li>
                </ul>
            </div>
        </div>
    }
    else
    {
        <div class="col-lg-3" style="display: none;">
            <h3><a href="@livyURL" target="_blank" id="LivyURL">Spark Session: <span id="sessionID"></span></a></h3>
        </div>
    }
</div>



<hr />
<div id="AdminControls" style="display: none;">
    <h4>Administrative and Power User Controls</h4>
    <hr />

    <h4>Code History</h4>
    <p>Below is the history of code sent to Apache Spark and Livy in this Session.</p>
    <textarea id="previousQueries" style="width: 100%; max-width: 100%; height: 100px;"></textarea>
    <hr />
    <h4>Custom Code</h4>
    <p>Type your custom Python code below. Currently only python is enabled. </p>
    <textarea id="codeArea" style="width: 100%; max-width: 100%; height: 400px; display: none;"></textarea>
    <hr />
    <p>The following button will send the Python code above directly to Apache Livy then Spark and then to Sentry Datasets and Various Systems.</p>
    <p>If you are not careful with what you send you may break something.</p>
    <p>With great power comes great responsibility. You are being monitored.</p>
    <div class="btn-group">
        <a class="btn btn-primary" onclick="SendCode()">Send Code to Spark</a>
        <a class="btn btn-success" onclick="SendCode(null, 'Get Hive Table')">HiveQL Query</a>
    </div>
    <hr />
</div>


<div id="datasetsHeader">
    <h4>Selected Datasets</h4>
    <i class="glyphicon glyphicon-menu-down tracker-menu-icon"></i>
</div>

<div id="datasetsContainer">
    <p>Below please select a dataset or group of datasets to join on.  After picking your datasets press the 'Get Schema' button.  We will then grab your datasets and give you the ability to query them.</p>
    <div class="rule-filter-container" style="margin-bottom: 10px;">
        <select multiple="" class="form-control select2-hidden-accessible"
                id="datasetList" name="filterSelector" tabindex="-1" aria-hidden="true"></select>
    </div>
    <div id="tablePanel" class="" style="display: none;">
        <div class="rules-group-container" id="tableSelection" data-bind="template: {name: 'DatasetTemplate' , foreach: Datasets}">
        </div>
    </div>
</div>

<script type="text/html" id="DatasetTemplate">
    <div class="rule-container" data-bind="attr: { id : htmlId }, css : BorderColor" style="background: rgba(255,255,255,.9); padding: 5px; margin: 4px 0;position: relative;">
        <h3 style="margin-left: 5px;display: inline-block;margin-bottom: 15px;" data-bind="text: name"></h3>
        <a target="_blank" style="display: inline-block;float: right;margin-top: 14px;margin-right: 75px;" href="" data-bind="attr: { href: url }">
            <span class="btn btn-md btn-info" style="margin-left: 10px;">
                Dataset Information
            </span>
        </a>
        <div class="category-type-wrap" style="width: 79px;">
            <div class="category-type" data-bind="css: BannerColor">
                <span data-bind="text: DatasetCategory"></span>
            </div>
        </div>
        <div data-bind="foreach: { data: Configs, as: 'config'}">
            <div data-bind="visible: config.hasFiles() === false" class="datasetRow" style="border: 1px solid #EEE; border-radius: 5px; padding: 5px;">
                <div data-bind="if: config.hasFiles() === false, visible: config.hasFiles() === false" style="margin-bottom: -15px;">
                    <h6 style='display:inline-block;margin-right: 15px;margin-left: 15px;' data-bind="text: config.configName"></h6>
                    <span style="display: none;" class="description" data-bind="text: config.description"></span>
                    <a href="#/" onclick="$(this).parent().children('.description').toggle()" class="table-row-icon row-filepreview-icon" title="Configuration Description">
                        <i class="glyphicon glyphicon-info-sign"></i>
                    </a>
                </div>
                <br>
                <div class="emptyConfigRow" data-bind="if: config.hasFiles() === false, visible: config.hasFiles() === false ">
                    <span>There are no files associated to this dataset configuration. To use this functionality, please upload at least one file to this dataset configuration.</span>
                </div>
            </div>                
            <div data-bind="foreach: { data: config.Schemas, as: 'schema'}">
                <div data-bind="visible: config.hasFiles()" class="datasetRow" style="border: 1px solid #EEE; border-radius: 5px; padding: 5px;">
                    <div data-bind="if: config.hasFiles() === true, visible: config.hasFiles() === true">
                        <h6 style='display:inline-block;margin-right: 15px;margin-left: 15px;' data-bind="text: config.configName"></h6>
                        <span style="display: none;" class="description" data-bind="text: config.description"></span>
                        @*<div style="float: right; margin-top:3px;" data-bind="visible: schema.hasTable() === false">
                            <label>
                                <span>Raw File Query Override:</span>
                                <input data-bind="checked: config.schemaOverride" style="margin-left: 5px;" type="checkbox" class="schemaOverrideCheckbox" />
                            </label>
                        </div>*@
                        <div style="display: inline-block; float: right; margin-top: 10px;" data-bind="if: !config.hasSchema()">
                            <div data-bind="foreach: { data: config.extensions, as: 'extension'}">
                                <div class="extension bg_gray" data-bind="css : config.extension">
                                    <span data-bind="text: config.extension"></span>
                                </div>
                            </div>
                        </div>
                        <a href="#/" data-bind="if: config.schemaOverride() || config.hasSchema() === false, visible: config.schemaOverride() || config.hasSchema() === false, click: function (d) { data.Dataset.PreviewDatafileModal(d.primaryFileId()); }" class="table-row-icon row-filepreview-icon" title="Preview file">
                            <i class="glyphicon glyphicon-search text-primary"></i>
                        </a>
                        <a href="#/" onclick="$(this).parent().children('.description').toggle()" class="table-row-icon row-filepreview-icon" title="Information about Schema">
                            <i class="glyphicon glyphicon-info-sign"></i>
                        </a>
                        <br>
                    </div>
                    <div data-bind="css: config.rowsClass(), if: config.hasFiles(), visible: config.hasFiles()">
                        @*<div data-bind="if: config.schemaOverride() || config.hasQueryableSchema() === false">*@
                        <div class="schemaRevisionRow" data-bind="visible: schema.hasTable() === false" style="margin-left: 30px;">
                            <input class="form-control tableNameController ruleController" data-bind="attr : { id: config.tableName }, value : config.tableName"
                                    data-toggle="tooltip" data-placement="bottom" style="width: 10%;display:inline-block; "
                                    title="This is the name of this Dataset in this instance of the Query Tool.  It represents all the files combined into one object like a Temporary Table.">

                            <input class="form-control ruleController" placeholder="Delimiter..." data-toggle="tooltip" data-placement="bottom"
                                    style="width: 8%;display:inline-block; " title="If you know the delmiter of your dataset please enter it.  Examples include , or ~">

                            <input disabled="" class="form-control ruleController" data-toggle="tooltip" data-placement="bottom" data-bind="value : config.bucket"
                                    style="  width: 21%;display:none; " title="This is the bucket that this dataset resides in. You cannot modify this information.">

                            <input disabled="" class="form-control ruleController mainUrl" data-toggle="tooltip" data-placement="bottom" data-bind="value : config.s3Key"
                                    style="  width: 35%;display:none; " title="This is the location of this dataset. You cannot modify this information.">

                            <input class="form-control ruleController" value="*/*/*" data-html="true" data-toggle="tooltip" data-placement="bottom" style="
                                width: 20%;display:inline-block; " title="<span>This is the search query you are making against our site.<span><br/><em>It is simply denoted as Year/Month/Day/File Name.<em><br/><em>Example: To get everything type */*/* </em><br/><em>Example: To get a specific set of file names choose something like */*/*/FileNameWithNumber*. Where the Star is a wildcard grabbing all items with any character in the stars position.</em><br/><em>Example: To get everything from a specific month type */10/*">

                            <select class="form-control ruleController extensionPicker" data-toggle="tooltip" data-placement="bottom" style="width: 8%; display:inline-block; "
                                    title="These are the file extensions that are available for this dataset.">
                                <!-- ko foreach: config.extensions -->
                                <option data-bind="value : $data, text: $data"></option>
                                <!-- /ko -->
                            </select>

                            <label>
                                <span>Has Header Row:</span>
                                <input style="margin-left: 5px;" type="checkbox" checked="checked" class="ruleController csvHeaderCheckbox" />
                            </label>

                            <label>
                                <span>Is Multiline:</span>
                                <input style="margin-left: 5px;" type="checkbox" checked="checked" class="ruleController jsonMultiline" />
                            </label>

                            <label style="float: right; margin-top:3px;">
                                <span>Include in Query:</span>
                                <input style="margin-left: 5px;" type="checkbox" class="ruleController includeCheckbox" />
                            </label>
                        </div>

                        <div data-bind="if: schema.hasTable() && config.hasQueryableSchema()">
                            @*<div style="border: 1px solid #EEE; border-radius: 5px; padding: 5px;">*@
                                @*<h6 style='width: 10%;display:inline-block;margin-right: 15px;margin-left: 15px;' data-bind="text: schema.schemaName"
                                    data-toggle="tooltip" data-placement="bottom"
                                    title="Schema Name"></h6>*@
                                <div data-bind="if: schema.hasTable() && schema.hiveTableStatus() === 'Available'">
                                    <div class="schemaRevisionRow" style="margin-left: 30px;">
                                        <label style="margin-left: 5px">Table Alias:</label>
                                        <input class="form-control tableNameController ruleController" data-toggle="tooltip"
                                                data-placement="bottom" style="width: 10%;display:inline-block; " data-bind="value : schema.hiveTable()"
                                                title="This is the name of this schema revision in this instance of the Query Tool.  It represents the schema like a Temporary Table.  If left blank, table name will be used.">
                                        <label style="margin-left: 5px">Database:</label>
                                        <h6 style='display:inline-block; margin-left: 5px; margin-right: 15px;' data-bind="text: schema.hiveDatabase()"></h6>
                                        <label style="margin-left: 5px">Table:</label>
                                        <h6 style='display:inline-block; margin-left: 5px; margin-right: 15px;' data-bind="text: schema.hiveTable()"></h6>
                                        <label style="float: right; margin-top:3px;">
                                            <span>Include in Query:</span>
                                            <input style="margin-left: 5px;" type="checkbox" class="ruleController includeCheckbox" />
                                        </label>
                                    </div>
                                </div>
                                <div class="emptyConfigRow" data-bind="if: schema.hasTable() && schema.hiveTableStatus() != 'Available', visible: schema.hasTable() && schema.hiveTableStatus() != 'Available'">
                                    <span>Maintenance is being performed on the table.  Please to use the <b>Raw File Query Override</b> option or try back at a later time.</span>
                                </div>
                                @*<div class="emptyConfigRow" data-bind="if: schema.hasTable() === false, visible: schema.hasTable() === false ">
                                <span>There is no table associated with this schema.  To use this functionality, ensure there is a table associted.</span>
                                </div>*@
                            @*</div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>


<textarea id="tablePython" style="width: 100%; max-width: 100%; height: 100px;" disabled></textarea>

<div id="sessionPanel" class="query-window-panel">
    <div id="panelSpinner">
        <div class="sentry-spinner-container" style=" width: 1166px;">
            <span class="sentry-spinner" style="height:100px"></span>
        </div>
    </div>
    <hr />

    <div id="schemaInformationButton" style="display: none;">
        <button id="btnGetSchema" class="btn btn-primary" onclick="generateSchema()" disabled>Get Schema</button>
        <p id="dataInfo" style="display: inline-block; margin-left: 15px;"></p>
        <hr />
    </div>

    <div id="queryPanel" style="display: none;" class="query-window-panel">

        <ul class="nav nav-tabs" id="primaryOptions">
            @*<li id="tab1" class="active"><a>Column Selection <span id="columnCountBadge" class="badge badge-success"></span></a></li>*@
            <li id="tab3" class="active"><a>Column Selection <span id="columnRenameCountBadge" class="badge badge-warning" data-bind="text: SelectedColumns().length"></span></a></li>
            <li id="tab2"><a>Join Tables <span id="tableCountBadge" class="badge badge-success"></span></a></li>
            <li id="tab6"><a>Where Clause <span id="whereBadge" class="badge badge-warning"></span></a></li>
            <li id="tab5"><a>Group By / Having <span id="groupByBadge" class="badge badge-warning"></span></a></li>
            <li id="tab4"><a>Order By <span id="orderByBadge" class="badge badge-warning"></span></a></li>
            <li id="tab7"><a>Aggregate Columns <span id="aggBadge" class="badge badge-warning"></span></a></li>
        </ul>

        <div id="primaryPanel">

            @*<div id="columnSelector" class="query-builder query-window-panel">
                    <div id="columnSelectorContainer" class="rules-group-container">

                        <h5>Column Selection</h5>
                        <p>Click below to choose your columns from your dataset.  If you choose no columns all columns will be selected.</p>

                        <select multiple="" class="form-control select2-hidden-accessible"
                                id="columnSelectorSelect" name="columnSelector" tabindex="-1" aria-hidden="true"></select>

                    </div>
                </div>*@

            @*<div id="joinPanel" class="query-builder query-window-panel">
                    <div class="rules-group-container">
                        <h5>Table Joining</h5>
                        <p>Example :  t1 JOIN t2 ON t1.departmentID == t2.ID</p>
                        <p>One join is required per two data sources you chose above.  Example: If you chose 3 data sources, 2 joins would be required.  Join t1 with t2 and then Join t1 with t3</p>
                        <div class="btn-group pull-right group-actions">
                            <button type="button" class="btn btn-xs ruleController btn-success" id="btnAddJoin" onclick="addJoinRule()">
                                <i class="glyphicon glyphicon-plus"></i> Add rule
                            </button>
                        </div>
                        <br />

                        <br />
                        <div id="joinContainer">

                        </div>
                    </div>
                </div>*@

            <div id="joinPanel" class="query-builder query-window-panel">
                <div class="rules-group-container">
                    <h5>Table Joining</h5>
                    <p>Example:  t1 JOIN t2 ON t1.departmentID == t2.ID</p>
                    <p>One join is required per two data sources you chose above. Example: If you chose 3 data sources, 2 joins would be required. Join t1 with t2 and then Join t1 with t3.</p>

                    <div class="row">
                        <div class="col-lg-4">
                            <select class="form-control ruleController" data-bind="value: JoinPanel().PrimaryTableName, options: JoinPanel().ListofTableNames"></select>
                        </div>
                        <div class="col-lg-2">
                            <button type="button" class="btn btn-xs ruleController btn-success" id="btnAddJoin" data-bind="click: JoinPanel().AddJoin">
                                <i class="glyphicon glyphicon-plus"></i> Add Join
                            </button>
                        </div>
                    </div>

                    <br />
                    <div id="joinContainer2">
                        <div class="rules-group-container" data-bind="template: {name: 'JoinTypeTemplate' , foreach: JoinPanel().Joins }">
                        </div>
                    </div>
                </div>
            </div>


            <script type="text/html" id="JoinTypeTemplate">
                <div class="rule-container row" id="">

                    <div class="col-lg-2" style="margin-left: -10px;">
                        <select class="form-control ruleController joinTypeController" style="display: inline-block; " data-bind="value: JoinType">
                            <option value="0" selected="" disabled="">Select Join Type</option>
                            <option value="INNER"> Inner Join</option>
                            <option value="FULL"> Full Join</option>
                            <option value="LEFT"> Left Join</option>
                            <option value="RIGHT"> Right Join</option>
                        </select>
                    </div>
                    <div class="col-lg-4">
                        <select class="form-control ruleController" data-bind="value: TableName, options: parent().ListofTableNames"></select>
                    </div>

                    <div class="col-lg-1" style="top: 7px; position:relative;">
                        <span>ON: </span>
                    </div>

                    <div class="col-lg-3" style="margin-top: 4px;">
                        <button type="button" class="btn btn-xs ruleController btn-success" id="btnAddJoin" data-bind="click: AddOn">
                            <i class="glyphicon glyphicon-plus"></i> Add On Statement
                        </button>
                        <button type="button" class="btn btn-xs btn-danger" data-bind="click: parent().RemoveJoin">
                            <i class="glyphicon glyphicon-remove"></i> Delete
                        </button>
                    </div>

                    <br />

                </div>
                <div id="joinContainer3" style="margin-left: 8px;">
                    <div class="rules-group-container onStatements" data-bind="template: {name: 'OnStatementTemplate', foreach: OnStatements}">
                    </div>
                </div>
            </script>

            <script type="text/html" id="OnStatementTemplate">
                <div class="rule-container row" id="">

                    <div class="col-lg-2" style="margin-left: -10px;">
                        <select class="form-control ruleController" data-bind="value: ColumnOne, options: FirstColumnNames"></select>
                    </div>

                    <div class="col-lg-1">
                        <select class="form-control ruleController" style="display: inline-block;" data-bind="value: Operand">
                            <option selected="selected" value='=='> = </option>
                            <option value='!='> ≠ </option>
                            <option value='<'> < </option>
                            <option value='>'> > </option>
                            <option value='<='> <= </option>
                            <option value='>='> >= </option>
                        </select>
                    </div>
                    <div class="col-lg-4">
                        <select class="form-control ruleController" data-bind="value: TableTwo, options: parent().parent().ListofTableNames"></select>
                    </div>
                    <div class="col-lg-2">
                        <select class="form-control ruleController" data-bind="value: ColumnTwo, options: SecondColumnNames"></select>
                    </div>
                    <div class="col-lg-2" style="display:none;" data-bind="visible: $parent.ConditionalShown">
                        <select class="form-control ruleController conditionalController" style="display: inline-block;" data-bind="value: Conditional">
                            <option selected="selected" value='AND'> AND </option>
                            <option value='OR'> OR </option>
                        </select>
                    </div>

                    <div class="col-lg-1">
                        <div class="btn-group pull-right rule-actions">
                            <button type="button" class="btn btn-xs btn-danger" data-bind="click: $parent.RemoveOn">
                                <i class="glyphicon glyphicon-remove"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </script>





            <div id="columnRenamer" class="query-builder">
                <div class="rules-group-container">
                    <h5>Column Selection</h5>
                    <p>Click below to choose a column to rename from your dataset.</p>

                    <select class="form-control select2" multiple="" data-bind="selectedOptions: SelectedColumns, options: Columns,
                     optionsDisableDefault: false, placeholder: 'Select an option', allowClear: true, selectOnClose: false, closeOnSelect: true"
                            id="columnRenamerSelect" name="SelectedColumns[]"></select>

                    <br />
                    <p>To reorder your columns simply click and drag the Rows below this to the desired order.</p>
                    <div id="columnRenamerContainer" data-bind="sortable: SelectedColumns" style="
                        padding: 10px;
                        border: 1px solid #DCC896;
                        background: rgba(0,0,0,.1);">
                        <div class="rule-container" id="">
                            <div style="width:3%; display: inline-block;">
                                <span><b data-bind="text: $index"> </b>:</span>
                            </div>
                            <input class="form-control" disabled value="" style="width: 35%; display:inline-block;" data-bind="value: $data" />
                            <input class="form-control ruleController" style="width: 35%; display:inline-block;" placeholder="Renamed As... ">
                            <div class="btn-group pull-right rule-actions">
                                <button type="button" class="btn btn-xs btn-danger" data-bind="click: $parent.removeColumn">
                                    <i class="glyphicon glyphicon-remove"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>

                    <script type="text/html" id="ColumnTemplate">
                        <div class="rule-container" id="">
                            <input class="form-control" disabled value="" style="width: 25%; display:inline-block;" data-bind="value: $data" />
                            <input class="form-control ruleController" style="width: 45%; display:inline-block;" placeholder="Renamed As... ">
                            <div class="btn-group pull-right rule-actions">
                                <button type="button" class="btn btn-xs btn-danger" data-bind="click: $parent.removeColumn">
                                    <i class="glyphicon glyphicon-remove"></i> Delete
                                </button>
                            </div>
                        </div>
                    </script>
                </div>
            </div>

            <div id="orderBy" class="query-builder">
                <div class="rules-group-container">
                    <div class="rules-group-header">
                        <div class="btn-group pull-right group-actions">
                            <button type="button" class="btn btn-xs btn-success" id="btnAddOrderBy" onclick="addOrderByRule()">
                                <i class="glyphicon glyphicon-plus"></i> Add Order By
                            </button>
                        </div>
                    </div>
                    <h5>Order By:</h5>
                    <div id="orderByContainer">
                    </div>
                </div>
            </div>

            <div id="groupBy" class="query-builder">

                <div class="rules-group-container">
                    <div class="rules-group-header">
                        <div class="btn-group pull-right group-actions">
                            <button type="button" class="btn btn-xs btn-success" id="btnAddJoin" onclick="addGroupByRule()">
                                <i class="glyphicon glyphicon-plus"></i> Add Group By
                            </button>
                            <button type="button" class="btn btn-xs btn-success" id="btnAddJoin" onclick="addHavingRule()">
                                <i class="glyphicon glyphicon-plus"></i> Add Having
                            </button>
                        </div>
                    </div>
                    <h5>Group By:</h5>
                    <div id="groupByContainer">
                    </div>
                    <h5>Having:</h5>
                    <div id="havingContainer">
                    </div>

                    <p class="text-muted">When you include a column in your group you may want to include it in your select statement on the first tab. </p>
                </div>
            </div>

            <div id="whereClause" class="query-builder">

                <div id="builder-basic">
                </div>
                <p style="
                    margin-left: 15px;
                    margin-top: 10px;">
                    <b>Warning:</b> Where Queries in this Query Tool are <b>Case Sensitive</b>.
                </p>
            </div>

            <div id="aggregate" class="query-builder">

                <div class="rules-group-container">
                    <div class="rules-group-header">
                        <div class="btn-group pull-right group-actions">
                            <button type="button" class="btn btn-xs btn-success" id="btnAddAggregate" onclick="addAggregateRule()">
                                <i class="glyphicon glyphicon-plus"></i> Add Aggregate
                            </button>
                        </div>
                    </div>
                    <h5>Aggregate Columns:</h5>
                    <div id="aggregateContainer">
                    </div>

                    <hr />
                    <p class="text-muted">When you include an aggregate column they will automatically be added to your Column Selection Tab.</p>
                    <p class="text-muted">If you attempt to return all other columns without a group by or having it will return an error.</p>
                    <p class="text-muted">For example:  You want a sum of all the Profits made by Division.  On this tab you would say Sum(Profit) as Profits then on the Group By tab you would include the Division column.</p>
                    <br />
                    <p class="text-muted">
                        If you only want to return your aggregate columns and nothing else  (i.e. No Group By).   <label for="selectNoneChk">Please Click Here: </label>
                        <input id="selectNoneChk" type="checkbox" onclick="updateBadges()" />
                    </p>


                </div>
            </div>

            <hr />

            <textarea id="joinPython" style="width: 100%; max-width: 100%; height: 100px;" disabled></textarea>
            <textarea id="additionalCode" style="width: 100%; max-width: 100%; height: 100px;" disabled>
                t1.printSchema();
                spark.catalog.dropTempView("t1");
                t1.createTempView("t1");
            </textarea>
            <textarea id="sqlQueryOutput" style="width: 100%; max-width: 100%; height: 100px;" disabled>

            </textarea>

            <h3 id="rowCount"></h3>

            <div>
                <div class="btn-group">
                    <a id="runQueryBtn" href="#/" class="btn btn-success" onclick="runQuery(true);">Run Query</a>
                    <a class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false"><span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li><a onclick="updateBadges()">Validate</a></li>
                        <li><a onclick="getSQLStatement()">View SQL Statement</a></li>
                        <li><a id="btnRowCount" data-toggle='tooltip' data-placement='bottom' title='If you have not run a query this will return the full row count in t1.  If you have run a query it will return the row count of the query.' disabled onclick="GetRowCount()">Row Count</a></li>
                    </ul>
                </div>

                <div class="btn btn-default" style="background: white; padding: 2.2px; padding-left: 8px; padding-right: 8px; color: black; display: inline-block;">
                    <label for="txtAmountOfRows">Rows to Return To Screen:</label>
                    <input id="txtAmountOfRows" type="number" value="20" min="0" max="1000" style="width: 115px;" />

                    <label for="distinctChk">Distinct:</label>
                    <input type="checkbox" id="distinctChk" name="distinct">

                </div>

                <div style="
                        display: inline-block;
                        margin-left: 30px;
                        position: relative;
                        top: 1px;">
                    <span id="lowerLevelWarning"></span>
                </div>
            </div>

            <hr />
            <table class="table table-striped table-bordered" id="datasetRowTable">
                <thead>
                    <tr id="tableFirstRow" class="filter-row"></tr>
                    <tr id="tableColumnIDs" class="table-header"></tr>
                </thead>
                <tbody></tbody>
            </table>

            <div id="savePanel" style="display: none;" class="query-window-panel">
                <hr />
                <h3>Push Query Results to File:</h3>
                <div style="display: none;">
                    <br />
                    <p><b>Spaces are not allowed in Hive Table column names.</b></p>
                    <p><b>This action is required to save to Apache Hive to open in Tableau or SAS.</b></p>
                    <br />
                    <input id="replaceSpacesChk" type="checkbox" />
                    <label for="replaceSpacesChk">Replace Spaces in All Columns with : </label>
                    <input type="text" id="replaceSpacesDelimiter" placeholder="Character to Replace ... " />
                    <br />
                    <button class="btn btn-warning" onclick="RenameAllColumns()">Rename All Columns</button>
                </div>
                <br />
                <div>
                    <span class="text-muted">Please choose a name for your dataset below. When saving is complete you will be prompted to rename the single file to download to your computer.</span>
                    <span class="text-muted">When completed the download link will be available for 2 minutes.</span>
                </div>
                <br />
                <div id="downloadPanel" class="query-window-panel">
                    <input id="s3FileLocation" value="sentry-dataset-management-np/bundles/data-test/government/quarterly_census_of_employment_and_wages/" style="width:39%; display:inline-block;" class="form-control" disabled />

                    <input id="s3FileName" value="" placeholder="Personal Dataset Name ..." style="width:27%; display:inline-block;" class="form-control" />
                    <input id="s3Delimiter" value="" placeholder="Delimiter..." style="width:8%; display:inline-block;" class="form-control" />
                    <select style="width: 15%; display:inline-block;" id="s3SaveAsFileExtension" class="form-control">
                        <option selected disabled>File Extensions: </option>
                        <option>csv</option>
                        <option>json</option>
                        <option>parquet</option>
                        <option>orc</option>
                    </select>
                    <button style="width: 10%; float:right; display:inline-block;" class="form-control btn btn-success" onclick="SavetoS3()">Download File</button>

                </div>

                <div id="fileLocationPanel" style="display: none;" class="query-window-panel">
                    <h3>File Download Location: <span id="spanTimeLeft"></span></h3>
                    <div>
                        <a id="s3DownloadLocation"><span id="s3DownloadKeyText"></span></a>
                    </div>
                </div>
            </div>

            <br />
            <br />

            <textarea id="replyArea" style="width: 100%; max-width: 100%; height: 200px;" disabled>

            </textarea>
        </div>
    </div>
</div>

<div class="deployment-tracker-container">
    <div class="deployment-tracker ui-draggable ui-draggable-handle">
        <div class="tracker-header">
            <div id="jobInfo" style="display:inline-block;">Job Status</div>
            <div id="sessionSpinner" class="sentry-spinner-container" style="width: 930px;">
                <span class="sentry-spinner" style="margin-left: -165px; margin-top: -43px; background-size: 25px 25px;"></span>
            </div>
            <i id="tracker-menu-icon" class="glyphicon glyphicon-menu-down" style="float:right; margin: 2px 10px 0 10px; color:#fff;"></i>
        </div>
        <div class="tracker-content" style="display: block; min-height:50px;">
            <div id="sparkInfo" style="padding-right: 15px;">
                <div>

                    <button id="btnCancelJob" class="btn btn-xs btn-danger" disabled onclick="CancelJob()" style="float: right; margin-left: 5px; display: inline-block;">Cancel Job</button>
                    <div class="statement">
                        <h6 id="statementInfo"></h6>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


@section Scripts {
    <script src="~/Scripts/dot.js"></script>
    <script src="~/Scripts/jQuery.extendext.min.js"></script>
    <script src="~/Scripts/query-builder.js"></script>
    @Scripts.Render("~/bundles/dataTables")

    <script src="~/js/QueryTool/QueryToolModel.js"></script>
    <script src="~/js/QueryTool/Startup.js"></script>
    <script src="~/js/QueryTool/SaveTo.js"></script>
    <script src="~/js/QueryTool/BannerControls.js"></script>
    <script src="~/js/QueryTool/RenderTable.js"></script>
    <script src="~/js/QueryTool/AddRule.js"></script>

    <script>
        data.QueryTool.Init();

        var firstTableName = "";

        $('body').on('keyup', '.tableNameController', function () {

            var alphaNumeric = new RegExp(/\W+/g);

            if (alphaNumeric.test($(this).val()) === true || ($(this).val().match(/^\d/))) {
                $(this).css("color", "red");
                $(this).css("border", "1px solid red");

            } else {
                $(this).css("color", "#53565a");
                $(this).css("border", "1px solid #ccc");
            }
        });

        //https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings
        String.prototype.escapeForJson = function () {
            return this
                .replace(/\b/g, "")
                .replace(/\f/g, "")
                .replace(/\\/g, "\\")
                .replace(/\"/g, "\\\"")
                .replace(/\t/g, "\\t")
                .replace(/\r/g, "\\r")
                .replace(/\n/g, "\\n")
                .replace(/\u2028/g, "\\u2028")
                .replace(/\u2029/g, "\\u2029");
        };

        function CancelJob() {
            for (var i = 0; i < tasksRunning.length; i++) {
                $.ajax({
                    type: "POST",
                    url: "/api/v1/queryTool/sessions/" + sessionID + "/statements/" + tasksRunning[i],
                    dataType: "json",
                    success: function (msg) {
                    },
                    error: function (e) {
                        console.log("Unavailable");
                    }
                });
            }

        }

        function getSQLStatement() {
            runQuery(false);
            PassHelpText("Schema", "Information", "<p>" + $('#sqlQueryOutput').val() + "</p>");
        }


        function updateBadges() {
            var allGood = true;

            var warningText = "";

            //Turn off the Join Tables Tab
            if (tableList.length > 1) {
                $('#primaryOptions #tab2').show();
            } else {
                $('#primaryOptions #tab2').hide();
            }

            if ($('#selectNoneChk').is(':checked')) {
                $('#columnRenameCountBadge').removeClass('badge-danger');
                $('#columnRenameCountBadge').removeClass('badge-success');
                $('#columnRenameCountBadge').addClass('badge-warning');

                $('#columnRenameCountBadge').text(0);
            }
            else {

                $('#columnRenameCountBadge').removeClass('badge-danger');
                $('#columnRenameCountBadge').removeClass('badge-warning');
                $('#columnRenameCountBadge').addClass('badge-success');

                if ($('#columnRenamerSelect').val().length != 0) {
                    $('#columnRenameCountBadge').text($('#columnRenamerSelect').val().length);
                }
                else {
                    var count = 0;

                    for (var i = 0; i < schemaList.length; i++) {
                        count += schemaList[i].schema.length;
                    }

                    $('#columnRenameCountBadge').text(count);

                }
            }

            var groupBys = $('.groupBySelector').length;
            var havings = $("#havingContainer").children('.rule-container').children().length / 5;

            if (groupBys + havings == 0) {
                $('#groupByBadge').removeClass('badge-danger');
                $('#groupByBadge').removeClass('badge-success');
                $('#groupByBadge').addClass('badge-warning');
            } else {
                $('#groupByBadge').removeClass('badge-danger');
                $('#groupByBadge').removeClass('badge-warning');
                $('#groupByBadge').addClass('badge-success');
            }
            $('#groupByBadge').text(groupBys + havings);

            var orderBys = $('.orderBySelector').length;

            if (orderBys == 0) {
                $('#orderByBadge').removeClass('badge-danger');
                $('#orderByBadge').removeClass('badge-success');
                $('#orderByBadge').addClass('badge-warning');
            } else {
                $('#orderByBadge').removeClass('badge-danger');
                $('#orderByBadge').removeClass('badge-warning');
                $('#orderByBadge').addClass('badge-success');
            }
            $('#orderByBadge').text(orderBys);

            var rules = $('#builder-basic_group_0').children('dd.rules-group-body').children('ul.rules-list').children().length;

            if (rules != 0) {
                if ($('#builder-basic').queryBuilder('getSQL', false, true) == null) {
                    $('#whereBadge').removeClass('badge-success');
                    $('#whereBadge').removeClass('badge-warning');
                    $('#whereBadge').addClass('badge-danger');
                    $('#whereBadge').text('X');
                    warningText += "<p>There is something wrong with the syntax on the Where clause tab.</p>";
                    $('#lowerLevelWarning').text("There is something wrong with the syntax on the Where clause tab.");
                    allGood = false;
                } else {
                    $('#whereBadge').removeClass('badge-danger');
                    $('#whereBadge').removeClass('badge-warning');
                    $('#whereBadge').addClass('badge-success');
                    $('#whereBadge').text(rules);
                }
            } else {
                $('#whereBadge').removeClass('badge-danger');
                $('#whereBadge').removeClass('badge-success');
                $('#whereBadge').addClass('badge-warning');
                $('#whereBadge').text(0);
            }

            var rules = vm.JoinPanel().Joins().length;
            var failed = 0;

            if (tableList.length > 1) {
                for (var i = 0; i < rules; i++) {
                    if (!vm.JoinPanel().Joins()[i].Valid()) {
                        failed++;
                    }
                }
            }

            //Make sure all the join fields are filled out.
            if (failed >= 1 && tableList.length > 1) {
                $('#tableCountBadge').removeClass('badge-success');
                $('#tableCountBadge').addClass('badge-danger');
                $('#tableCountBadge').text('X');
                allGood = false;
                //warningText += "<p>You have invalid fields or fields not filled out in your Join Panel.</p>";
                $('#lowerLevelWarning').text("You have invalid fields or fields not filled out in your Join Panel.");
            }
            //Make sure there are enough Join Rules based on the Amount of Tables
            else if (tableList.length - 1 != rules && tableList.length > 1) {
                $('#tableCountBadge').removeClass('badge-success');
                $('#tableCountBadge').addClass('badge-danger');
                $('#tableCountBadge').text('X');

                if (tableList.length > 1 && $('#datasetRowTable_wrapper').is(":visible")) {
                    warningText += "<p>If you do not join to the other tables on the 'Join Tables Tab' below then when you run a query you will only be running a query against your first table. Which in this instance is named : " + firstTableName + "</p > ";
                }
                allGood = false;
            }
            else {
                $('#tableCountBadge').addClass('badge-success');
                $('#tableCountBadge').removeClass('badge-danger');
                $('#tableCountBadge').text(rules);
            }


            var aggCount = $("#aggregateContainer").children('.rule-container').children().length / 4;

            var aggChecker = true;
            for (var i = 0; i < aggCount; i++) {
                if ($("#aggregateContainer").children('.rule-container').children()[(i * 4) + 1].value == 0 || $("#aggregateContainer").children('.rule-container').children()[(i * 4)].value == "Aggregate") {
                    aggChecker = false;
                    break;
                }
            }

            if (!aggChecker) {
                $('#aggBadge').removeClass('badge-warning');
                $('#aggBadge').removeClass('badge-success');
                $('#aggBadge').addClass('badge-danger');
                $('#aggBadge').text('X');
                $('#lowerLevelWarning').text("There are invalid fields on the Aggregate Column Tab.");
                allGood = false;
            } else {
                $('#aggBadge').addClass('badge-success');
                $('#aggBadge').removeClass('badge-warning');
                $('#aggBadge').removeClass('badge-danger');
                $('#aggBadge').text(aggCount);
            }

            //Join Panel Updates
            $.each($('.onStatements'), function (key1, value1) {
                var count = $(value1).children().length;
                $.each($(value1).children(), function (key2, value2) {
                    console.log($(value2));
                    if (key2 === count - 1) {
                        $(value2).children().children('.conditionalController').hide();
                    } else {
                        $(value2).children().children('.conditionalController').show();
                    }
                });
            });

            if (!allGood) {
                if (warningText != "") {
                    PassHelpText("Schema", "Warning", warningText);
                }
                return false;
            } else {
                $('#lowerLevelWarning').text('');
                return true;
            }
        }

        $('body').on('click', '.ruleController', function () {
            //updateJoins();
            updateTables();
            updateBadges();
            console.log("ruleController click");
        });

        $('body').on('change', '.ruleController', function () {
            //updateJoins();
            updateTables();
            updateBadges();
            console.log("ruleController change");
        });

        $('body').on('change', '.schemaOverrideCheckbox', function () {
            console.log("schemaOverrideCheckbox change");
            var check = $(this)[0].checked;
            if (check) {
                var schemas = $(this).closest('.datasetRow').find('.schemaRow')
                schemas.addClass('configRow');
                schemas.removeClass('schemaRow');
            }
            else {
                var schemas = $(this).closest('.datasetRow').find('.configRow')
                schemas.addClass('schemaRow');
                schemas.removeClass('configRow');
            }
            updateTables();
            updateBadges();
        });



        $('body').on('change', '.tableNameController', function () {

            //var id = '#help' + $(this)[0].id + " option[value = \"" + $(this).val() + "\"]";
            var col = '#col' + $(this)[0].id;

            //console.log(id);
            //$(id).prop('selected', true);

            for (var i = 0; i < schemaList.length; i++) {
                if (schemaList[i].tableName == $(this).val()) {
                    $(col).empty();
                    $(col).prop('disabled', false);
                    for (var j = 0; j < schemaList[i].schema.length; j++) {
                        $(col).append($('<option/>', {
                            value: schemaList[i].schema[j].id.trim(),
                            text: schemaList[i].schema[j].label.trim()
                        }));
                    }
                    break;
                }
            }


        });


        $('body').on('keydown', "#columnRenamerContainer.rule - container input", function () {
            var oldvalue = $(this).val();
            var field = this;
            setTimeout(function () {
                if (field.value.indexOf(firstTableName) !== 0) {
                    $(field).val(firstTableName + '.' + oldvalue);
                }
            }, 1);
        });

        function RenameAllColumns() {
            if ($('#replaceSpacesChk').is(':checked') && schemaList[0].length >= 1) {
                var char = $('#replaceSpacesDelimiter').val();

                var col = "";

                for (var i = 0; i < schemaList[0].schema.length; i++) {
                    col += firstTableName + " = " + firstTableName + ".withColumnRenamed('" + schemaList[0].schema[i].label + "','" + schemaList[0].schema[i].label.replace(/ /g, char) + "');";
                }

                col += firstTableName + ".printSchema();";

                var json = JSON.stringify(col.escapeForJson());

                console.log(json);

                SendCode(json, 'Rename Columns');


            }
        }

        function DeleteSessions() {
            for (var i = 0; i < 50; i++) {
                $.ajax({
                    type: "DELETE",
                    url: "/api/v1/queryTool/sessions/" + i
                });
            }
        }

        function generateSchema() {

            //updateJoins();
            updateTables();

            if (!updateBadges()) {
                return;
            }

            var tables = "";
            var tableNames = "";
            var valid = true;

            var rows = $('#tableSelection').children('.rule-container').children().children().children('.configRow');

            var configRules = rows.length;
            var actualIncludedTables = 0;
            for (var i = 0; i < configRules; i++) {

                var row = $($(rows)[i]).children();

                var tableName = row.children('input')[0].value;
                var delimiter = row.children('input')[1].value;
                var bucket = row.children('input')[2].value;
                var s3Location = row.children('input')[3].value;
                var query = row.children('input')[4].value;
                var extension = $(row.children('select')[0]).find(":selected").text();
                var include = row.children().children('.includeCheckbox')[0].checked;
                var csvHeader = row.children().children('.csvHeaderCheckbox')[0].checked;
                var jsonMultiline = row.children().children('.jsonMultiline')[0].checked;

                if (include) {
                    if (extension) {
                        actualIncludedTables++;

                        if (actualIncludedTables == 1) {
                            firstTableName = tableName.trim();
                        }


                        tables += "spark.catalog.dropTempView(\"" + tableName.trim() + "\");";
                        tables += tableName.trim() + " = spark.read";

                        if (delimiter) {
                            tables += ".option('sep', \"" + delimiter + "\")";
                        }


                        switch (extension) {

                            case "txt":
                                tables += ".option('header', 'true').option('inferSchema', 'true').text('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "');";
                                break;
                            case "csv":
                                tables += ".format('" + extension.trim() + "')";

                                if (csvHeader) {
                                    tables += ".option('header', 'true')";
                                } else {
                                    tables += ".option('header', 'false')";
                                }
                                tables += ".option('inferSchema', 'true').load('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "'); ";

                                break;
                            case "json":

                                tables += ".format('" + extension.trim() + "')";

                                if (jsonMultiline) {
                                    tables += ".option('multiline', 'true')";
                                } else {
                                    tables += ".option('multiline', 'false')";
                                }
                                tables += ".option('inferSchema', 'true').json('s3a://" + bucket.trim() + "/" + s3Location.trim() + "/" + query + "'); ";

                                break;
                            case "parquet":
                                tables += ".format('" + extension.trim() + "').option('inferSchema', 'true').load('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "');";
                                break;
                            default:
                                valid = false;
                                break;
                        }

                        tables += tableName.trim() + ".createTempView(\"" + tableName.trim() + "\");";
                        tables += tableName.trim() + ".printSchema();";

                        tableNames += tableName.trim() + '|||';
                    }
                }
            }

            var rows = $('#tableSelection').children('.rule-container').children().children().children('.schemaRow');
            var schemaRules = rows.length;
            for (var i = 0; i < schemaRules; i++) {

                var schemaRevisionRows = $($(rows)[i]).children().children().children().children().children('.schemaRevisionRow');
                var revisions = schemaRevisionRows.length;
                for (var r = 0; r < revisions; r++) {

                    var revision = $($(rows)[i]).children().children().children().children().children('.schemaRevisionRow')[r]

                    //Take user specified tableName alias, otherwise use hive table name
                    var alias = true;
                    var tableAliasName = '';
                    tableAliasName = $(revision).children('input')[0].value;
                    tableName = $($(revision).children('h6')[1]).text();
                    if (tableAliasName == null || !tableAliasName) {
                        var alias = false;
                    }

                    var databaseName = $($(revision).children('h6')[0]).text();
                    var include = $(revision).children().children('.includeCheckbox')[0].checked;

                    if (include) {
                        actualIncludedTables++;

                        if (actualIncludedTables == 1) {
                            firstTableName = tableName.trim();
                        }

                        if (alias) {
                            tables += tableAliasName.trim() + " = spark.sql(\"Select * from " + databaseName.trim() + "." + tableName.trim() + "\"); " + tableAliasName.trim() + ".createOrReplaceTempView(\"" + tableAliasName.trim() + "\"); " + tableAliasName.trim() + ".printSchema();";
                            tableNames += tableAliasName.trim() + '|||';
                        }
                        else {
                            tables += "spark.sql(\"Select * from " + databaseName.trim() + "." + tableName.trim() + "\").printSchema();";
                            tableNames += tableName.trim() + '|||';
                        }
                    }
                }
            }


            if (valid && (configRules + schemaRules) >= 1) {
                var json = JSON.stringify(tables.escapeForJson());

                SendCode(json, 'Get Schema', tableNames);

                $('#dataInfo').text('Data in memory as of ' + new Date($.now()));

            }
        }

        var previousSuccessfulQuery = false;

        function GetRowCount() {
            var json;
            if (previousSuccessfulQuery) {
                json = JSON.stringify("print(queryResponse.count());".escapeForJson());
            } else {
                json = JSON.stringify("print(" + firstTableName + ".count());".escapeForJson());
            }

            SendCode(json, 'Count Rows');
        }

        function runQuery(runNow) {

            var rawQuery = "queryResponse = spark.sql(" + WriteSQLStatement() + ");";

            rawQuery += "queryResponse.show(" + $('#txtAmountOfRows').val() + "); ".escapeForJson();

            var json = JSON.stringify(rawQuery);

            console.log(json);

            $('#sqlQueryOutput').val(rawQuery);

            if (!updateBadges()) {
                return;
            }

            if (runNow) {
                SendCode(json, 'Select Query');
            }
        }

        //This method will tell you wether or not the tables the user picked have valid extensions and etc.
        function updateTables() {
            var valid = true;
            var failureReason = "";
            $('#tablePython').val('');

            $('.extensionPicker').each(function (index, value) {
                if ($(value).find(":selected").text() !== "csv") {
                    //console.log($(value).siblings().children(".csvHeaderCheckbox").parent());
                    $(value).siblings().children(".csvHeaderCheckbox").parent().hide();
                }

                if ($(value).find(":selected").text() !== "json") {
                    //console.log($(value).siblings().children(".jsonMultiline").parent());
                    $(value).siblings().children(".jsonMultiline").parent().hide();
                }
            });


            var rows = $('#tableSelection').children('.rule-container').children().children().children('.configRow');

            var includedDatasets = 0;
            var configRules = rows.length;
            for (var i = 0; i < configRules; i++) {

                var row = $($(rows)[i]).children();

                var tableName = row.children('input')[0].value;
                var delimiter = row.children('input')[1].value;
                var bucket = row.children('input')[2].value;
                var s3Location = row.children('input')[3].value;
                var query = row.children('input')[4].value;
                var extension = $(row.children('select')[0]).find(":selected").text();
                var include = row.children().children('.includeCheckbox')[0].checked;
                var csvHeader = row.children().children('.csvHeaderCheckbox')[0].checked;
                var jsonMultiline = row.children().children('.jsonMultiline')[0].checked;

                if (include) {
                    if (extension) {

                        //var bucket = $('#BucketDropDown').val();

                        var Join = tableName.trim() + " = spark.read";

                        if (delimiter) {
                            Join += ".option('delimiter', \"" + delimiter + "\")";
                        }

                        switch (extension) {

                            case "txt":
                                Join += ".option('header', 'true').option('inferSchema', 'true').text('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "');";
                                includedDatasets++;
                                break;
                            case "csv":

                                Join += ".format('" + extension.trim() + "')";

                                if (csvHeader) {
                                    Join += ".option('header', 'true')";
                                } else {
                                    Join += ".option('header', 'false')";
                                }
                                Join += ".option('inferSchema', 'true').load('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "'); ";
                                includedDatasets++;
                                break;
                            case "json":
                                Join += ".format('" + extension.trim() + "')";

                                if (jsonMultiline) {
                                    Join += ".option('multiline', 'true')";
                                } else {
                                    Join += ".option('multiline', 'false')";
                                }
                                Join += ".option('inferSchema', 'true').json('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "'); ";
                                includedDatasets++;
                                break;
                            case "parquet":
                                Join += ".format('" + extension.trim() + "').option('inferSchema', 'true').load('s3a://" + bucket.trim() + "/" + s3Location.trim() + query + "');";
                                includedDatasets++;
                                break;
                            default:
                                valid = false;
                                failureReason = "Invalid Format for Table " + tableName.trim() + " Extension " + extension;
                                break;
                        }
                        $('#tablePython').val($('#tablePython').val() + Join + "\n");

                    } else {
                        valid = false;
                        failureReason = "No Extension Picked for " + tableName.trim();
                    }
                }
            }

            var rows = $('#tableSelection').children('.rule-container').children().children().children('.schemaRow');
            var schemaRules = rows.length;
            for (var i = 0; i < schemaRules; i++) {

                var schemaRevisionRows = $($(rows)[i]).children().children().children().children().children('.schemaRevisionRow');
                var revisions = schemaRevisionRows.length;
                for (var r = 0; r < revisions; r++) {

                    var revision = $($(rows)[i]).children().children().children().children().children('.schemaRevisionRow')[r]

                    //Take user specified tableName alias, otherwise use hive table name
                    var alias = true;
                    var tableAliasName = '';
                    tableAliasName = $(revision).children('input')[0].value;
                    tableName = $($(revision).children('h6')[1]).text();
                    if (tableAliasName == null || !tableAliasName) {
                        var alias = false;
                    }

                    var databaseName = $($(revision).children('h6')[0]).text();
                    var include = $(revision).children().children('.includeCheckbox')[0].checked;

                    if (include) {

                        if (alias) {
                            Join = tableAliasName.trim() + " = spark.sql(\"Select * from " + databaseName.trim() + "." + tableName.trim() + "\");";
                        }
                        else {
                            Join = "spark.sql(\"Select * from " + databaseName.trim() + "." + tableName.trim() + "\").printSchema();";
                        }
                        includedDatasets++;
                        $('#tablePython').val($('#tablePython').val() + Join + "\n");
                    }
                }
            }

            var tableAliasWrong = false;
            $('.tableNameController').each(function (index) {

                var alphaNumeric = new RegExp(/\W+/g);

                if (alphaNumeric.test($(this).val()) === true || ($(this).val().match(/^\d/))) {
                    tableAliasWrong = true;
                    $(this).css("color", "red");
                    $(this).css("border", "1px solid red");

                } else {
                    $(this).css("color", "#53565a");
                    $(this).css("border", "1px solid #ccc");
                }
            });




            if (tableAliasWrong) {
                valid = false;
                failureReason = "The highlighted aliases above do not meet the correct criteria.  Must start with a character and must only contain [A-Z][a-z][0-9] and underscores."
            }

            if ((schemaRules + configRules) == 0) {
                valid = false;
            }
            else if (includedDatasets == 0) {
                if (failureReason == "") {
                    failureReason = "You have not selected any valid datasets above.";
                }
                valid = false;
            }

            if (valid) {
                $('#btnGetSchema').prop('disabled', false);
                $('#dataInfo').text('');
            } else {
                $('#btnGetSchema').prop('disabled', true);
                $('#dataInfo').text(failureReason);
            }
        }

        function RemoveParent(e) {
            console.log($(e).parent().parent());

            var id = $(e).parent().parent()[0].id;

            if (id.startsWith('renameT')) {

                var a = $('#columnRenamerSelect').val();
                id = id.replace('renameT', '');

                console.log(id);
                //console.log($(this).val());

                var index = $.inArray(id, a);
                if (index >= 0) {
                    a.splice(index, 1);
                    $('#columnRenamerSelect').val(a);
                    $('#columnRenamerSelect').trigger("change");
                }

                //$("#columnRenamerSelect option[value='`" + id + "`']").remove();

                //if ($('#columnRenamerSelect').val().length != 0) {
                //    $('#columnRenameCountBadge').text($('#columnRenamerSelect').val().length);
                //}
                //else {
                //    $('#columnRenameCountBadge').text(0);
                //}
            }

            $(e).parent().parent().remove();

            //updateJoins();
            updateTables();
            updateBadges();
        }

        var joins = 0;

        var locked = false;
        var queryBuilderExists = false;
        var schemaList = [];
        var tableList = [];
        var filterList = [];
        var tasksRunning = [];
        var table;

        var sessionStartInterval;
        var checkInterval;
        var prevProgress;
        var stage;

        var sessionID;

        function SendCode(json, action, tableName) {
            if (!locked) {

                locked = true;

                $('#replyArea').val('');

                if (json == null) {
                    json = JSON.stringify($('#codeArea').val().escapeForJson());
                }

                $('#previousQueries').val($('#previousQueries').val() + "[" + (new Date).toLocaleString() + "] : " + json + "\n");

                stage = 1;
                prevProgress = 0;

                $.ajax({
                    type: "POST",
                    url: "/api/v1/queryTool/sessions/" + sessionID + "/sendCode",
                    data: json,
                    //headers: { 'Access-Control-Allow-Origin': '*' },
                    contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    success: function (msg) {
                        json = JSON.parse(msg);
                        //console.log(msg);
                        console.log(json);

                        prevProgress = json.progress;

                        $('#sparkInfo').show();
                        $('#sessionSpinner').show();


                        if ((Math.floor(json.progress * 100)) == 0) {
                            $('#jobInfo').text("Your session is currently scheduled.");
                        }
                        else {
                            $('#jobInfo').text("Your session is currently " + json.state + ".");
                        }

                        $("div").remove(".statement");
                        $("#sparkInfo").append(
                            "<div class=\"statement\">" +
                            "<h6 id=\"statementInfo" + json.id + "\"></h6>" +
                            "<div class=\"progress progress-striped active\">" +
                            "<div id=\"statementBar" + json.id + "\" class=\"progress-bar\"></div>" +
                            "</div>" +
                            "</div>"
                        );

                        var width = (Number(Math.round(json.progress + 'e3') + 'e-3') * 100) + "%";
                        console.log(width);
                        //$('.progress-bar').css('width', width);

                        var statementInfo = "#statementInfo" + json.id;

                        $(statementInfo).text("'" + action + "' is currently on Stage (" + stage + ") : " + (Math.floor(json.progress * 100)) + " % ");

                        var statementBar = "#statementBar" + json.id;

                        $(statementBar).css('width', width);

                        tasksRunning.push(json.id);
                        checkInterval = setInterval("GetStatus(" + sessionID + "," + json.id + ",\"" + action + "\",\"" + tableName + "\")", 1000);
                    },
                    error: function (e) {
                        console.log("Unavailable");
                        locked = false;
                    }

                });
            }
        }

        function GetStatus(sessionID, statementID, action, tableName) {

            $('#btnCancelJob').attr("disabled", false);


            $.ajax({
                type: "GET",
                url: "/api/v1/queryTool/sessions/" + sessionID + "/statements/" + statementID,
                contentType: "application/json; charset=utf-8",
                success: function (msg) {
                    // console.log(msg);

                    json = JSON.parse(msg);
                    console.log(json);

                    if (Number(Math.round(json.progress + 'e3') + 'e-3') < Number(Math.round(prevProgress + 'e3') + 'e-3')) {
                        stage = stage + 1;
                    }

                    if (json.output !== null) {

                        tasksRunning.splice($.inArray(statementID, tasksRunning), 1);

                        locked = false;

                        clearInterval(checkInterval);

                        $('.progress-bar').parent().toggleClass("active");
                        $('#sessionSpinner').hide();

                        if (json.output.status == "error") {

                            PassHelpText(action, "Error", json.output.evalue);
                        }
                        else {
                            $('#replyArea').val(json.output.data['text/plain']);

                            var filters = json.output.data['text/plain'].split("\n");
                            $('#btnCancelJob').attr("disabled", true);

                            $('#queryPanel').show();
                            switch (action) {
                                case "Get Schema":
                                case "Rename Columns":
                                    renderSchema(filters, tableName);
                                    vm.JoinPanel().ListofTableNames(tableList);
                                    break;
                                case "Reset Hive Tables":
                                case "Get Hive Table":
                                    renderTable(filters, true, false);
                                    break;
                                case "Select Query":
                                    renderTable(filters, true, false);
                                    $('#btnRowCount').prop('disabled', false);
                                    $('#savePanel').show();
                                    break;
                                case "Count Rows":
                                    $('#rowCount').text(filters[0].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Total Rows");
                                    break;
                                case "Save to S3":
                                    callFileDownload(tableName);
                                    $('#fileLocationPanel').show();
                                    break;
                            }

                            var schema = [];

                            for (var i = 0; i < schemaList.length; i++) {
                                for (var j = 0; j < schemaList[i].schema.length; j++) {
                                    schema.push(schemaList[i].schema[j]);
                                }
                            }

                            if (queryBuilderExists) {
                                $('#builder-basic').queryBuilder('setFilters', true, schema);
                            } else {

                                queryBuilderExists = true;
                                $('#builder-basic').queryBuilder({
                                    plugins: ['bt-tooltip-errors'],
                                    allow_empty: true,
                                    rules: {
                                        condition: 'AND',
                                        rules: []
                                    },
                                    filters: schema
                                });
                            }
                        }
                        updateBadges();
                    }

                    prevProgress = Number(Math.round(json.progress + 'e3') + 'e-3')
                    if ((Math.floor(json.progress * 100)) == 0) {
                        $('#jobInfo').text("Your Session is currently scheduled.");
                    }
                    else {
                        $('#jobInfo').text("Your Session is currently " + json.state + ".");
                    }
                    var width = (Number(Math.round(json.progress + 'e3') + 'e-3') * 100) + "%";
                    console.log(width);
                    //$('.progress-bar').css('width', width);

                    var statementInfo = "#statementInfo" + statementID;

                    $(statementInfo).text("'" + action + "' is currently on Stage (" + stage + ") : " + (Math.floor(json.progress * 100)) + " % ");

                    var statementBar = "#statementBar" + statementID;

                    $(statementBar).css('width', width);


                },
                error: function (e) {
                    console.log("Unavailable");
                }
            });

            return false;

        }

        function renderSchema(filters, tableName) {
            schemaList = [];
            tableList = [];
            var tables = tableName.split('|||');
            var warningText = "";

            if (filters[0].trim() === "root") {
                console.log(tableName);
                var internalFilterList;

                $('.groupBySelector').empty();
                $('.havingSelector').empty();
                $('#orderBySelector').empty();
                $('#columnRenamerSelect').empty();
                //$('#columnSelectorSelect').empty();

                $('.groupBySelector').append($('<option/>', {
                    value: "0",
                    text: "Pick a Column"
                }));

                $('.havingSelector').append($('<option/>', {
                    value: "0",
                    disabled: true,
                    selected: true,
                    text: "Pick a Column"
                }));

                $('#orderBySelector').append($('<option/>', {
                    value: "0",
                    text: "Pick a Column"
                }));

                var index = -1;

                for (var i = 0; i < filters.length; i++) {

                    if (filters[i].trim() != "root" && filters[i]) {
                        var column = filters[i].substring(4, filters[i].indexOf(":"));
                        var type = filters[i].substring(filters[i].indexOf(": ") + 1, filters[i].indexOf("("));

                        //There is no long in Hive.
                        if (type.trim() === "long") {
                            type = "double";
                        }

                        if (type.trim() === "timestamp") {
                            type = "string";
                        }

                        if (type.trim() === "decimal") {
                            type = "string";
                        }

                        internalFilterList.push({ 'id': tables[index] + '.`' + column.trim() + "`", 'type': type.trim(), 'label': tables[index] + '.' + column.trim(), 'column': column.trim() });

                        //$('#columnRenamerSelect').append($('<option/>', {
                        //    value: tables[index] + '.`' + column.trim() + "`",
                        //    text: tables[index] + '.' + column.trim()
                        //}));

                        vm.Columns().push(tables[index] + '.`' + column.trim() + "`");


                        //$('#columnSelectorSelect').append($('<option/>', {
                        //    value: tables[index] + '.`' + column.trim() + "`",
                        //    text: tables[index] + '.' + column.trim()
                        //}));

                        $('.havingSelector').append($('<option/>', {
                            value: tables[index] + '.`' + column.trim() + "`",
                            text: tables[index] + '.' + column.trim()
                        }));

                        $('.groupBySelector').append($('<option/>', {
                            value: tables[index] + '.`' + column.trim() + "`",
                            text: tables[index] + '.' + column.trim()
                        }));

                        $('.orderBySelector').append($('<option/>', {
                            value: tables[index] + '.`' + column.trim() + "`",
                            text: tables[index] + '.' + column.trim()
                        }));

                    }
                    if (filters[i].trim() === "root" || (i + 1) == filters.length) {
                        if (index != -1) {
                            if (internalFilterList.length == 1) {
                                warningText += "<p>It looks like your dataset query for " + tables[index] + " only returned one column.  You should check to see if you passed the incorrect delimiter above.</p>";
                                warningText += "<p>You can simply change the delimiter field above and press the Get Schema button again.</p > ";
                                warningText += "<p>The following was returned from your query.  This may help you figure out what the delimiter is and should be.  <br/>" + internalFilterList[0].label.substring(0, 50) + "</p>";
                            }
                            schemaList.push({ 'tableName': tables[index], 'schema': internalFilterList });
                            tableList.push(tables[index]);
                            console.log(schemaList);
                        }

                        internalFilterList = [];
                        index++;
                    }
                }
            }

            var count = 0;

            for (var i = 0; i < schemaList.length; i++) {
                count += schemaList[i].schema.length;
            }

            vm.Columns.notifySubscribers();
            $('#columnCountBadge').text(count);

            if (warningText != "") {
                PassHelpText("Schema", "Warning", warningText);
            } else {
                PassHelpText("Schema", "Success", "<p>Your datasets were successfully loaded.  Please begin your query against them below. </p>");
            }
        }

        $(document).ready(function () {

            $('[data-toggle="tooltip"]').tooltip();

            //$('#columnSelector').show();
            $('#columnRenamer').show();
            $('#joinPanel').hide();
            $('#orderBy').hide();
            $('#groupBy').hide();
            $('#whereClause').hide();
            $('textarea').hide();
            $('#secondaryOptions').hide();
            $('#aggregate').hide();

            var $selector = $("#datasetList").select2({
                selectOnClose: false,
                closeOnSelect: true,
                placeholder: "Click here to begin ..."
            });

            var $selectorColumn = $("#columnSelectorSelect").select2({
                selectOnClose: false,
                closeOnSelect: false,
                forceBelow: true,
                placeholder: "Click here for Columns.",
            });

            var $renamerColumn = $("#columnRenamerSelect").select2({
                selectOnClose: false,
                closeOnSelect: false,
                forceBelow: true,
                placeholder: "Click here for Columns.",
            });


            $selector.select2({
                selectOnClose: false,
                closeOnSelect: true,
                placeholder: "Click here to begin ..."
            });

            $selectorColumn.select2({
                selectOnClose: false,
                closeOnSelect: false,
                forceBelow: true,
                placeholder: "Click here for Columns.",
            });

            $renamerColumn.select2({
                selectOnClose: false,
                closeOnSelect: false,
                forceBelow: true,
                placeholder: "Click here for Columns.",
            });

            $('.select2-container--default').css('width', '100%');

            var select = $("#datasetList");


            var controllerURL = "/Dataset/GetAllDatasetsForQueryPermission";

            $.get(controllerURL, function (result) {
                var optgroup = $('<optgroup>');

                var previousOpt = '';
                $.each(result, function (index, itemData) {

                    if (itemData.Group.Name != previousOpt) {
                        if (previousOpt != '') {
                            select.append(optgroup);
                        }
                        optgroup = $('<optgroup>');
                        optgroup.attr('label', itemData.Group.Name);
                        previousOpt = itemData.Group.Name;
                    }

                    optgroup.append($('<option/>', {
                        value: itemData.Value,
                        text: itemData.Text
                    }));
                });

                select.append(optgroup);

                var id = data.QueryTool.GetParameterByName('DatasetID');

                $("#datasetList option").each(function () {
                    // Add $(this).val() to your list
                    if ($(this).val() == id) {
                        $("#datasetList").val($(this).val()).trigger('change');
                        $("#datasetList").trigger({
                            type: 'select2:select',
                            params: {
                                data: { "id": $(this).val(), "text": $(this).text() }
                            }
                        });
                    }
                });
            });


            if (localStorage.getItem("SparkSession") === null) {
                CreateSession(true);
            }
            else {
                sessionID = JSON.parse(localStorage.getItem("SparkSession")).id;

                //Check the Session to make sure it is still active.
                CheckSession();
            }

            $.ajax({
                type: "GET",
                url: "/api/v1/queryTool/files/fileDropLocation",
                dataType: "json",
                success: function (msg) {
                    $('#s3FileLocation').val(msg.s3Key);
                },
                error: function (e) {
                    console.log("Unavailable");
                }
            });
        });

        vm = new ViewModel();
        ko.applyBindings(vm);

    </script>

}