@model Sentry.data.Web.PushToDatasetModel
@{

    @Html.AntiForgeryToken()

    @*Show the custom validation summary*@
    @Html.DisplayFor((model) => ViewData.ModelState)

        <div class="form-horizontal">
            <fieldset>                
                <div class="form-group">
                    <div class="col-sm-12">
                        <p>The following <a href="https://support.sas.com/documentation/cdl/en/lrcon/69852/HTML/default/viewer.htm#p18cdcs4v5wd2dn1q0x296d3qek6.htm" target="_blank">SAS naming conventions</a> are applied to all file names to ensure proper retrieval within SAS tools:</p>
                        <ul style="list-style-type:square">
                            <li>Replace all characters, except digits and upper\lower case letters, with an underscore</li>
                            <li>Prefix with an underscore</li>
                            <li>Retain first 32 characters</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DatasetFileName, new { @class = "control-label col-sm-4"})
                    <div class="col-sm-8">
                        <p class="form-control-static">@Html.DisplayFor(model => model.DatasetFileName)</p>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FileNameOverride, new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.FileNameOverride, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor((model) => model.FileNameOverride, "", new { @class = "text-danger" })
                        @*Add Validation*@
                    </div>
                </div>
                <div class="form-group fieldDescription">
                    <label class="control-label col-md-4"></label>
                    <div class="col-md-7">
                        <span class="text-muted">
                            @*<em> The type of protocol (FTP or API) or location type (internal DFS or EC2) that will be used to retrieve this file. </em>*@
                            <em> By default, original file name will be used.  To override the target file name, specify file name (<u>excluding</u> file extension).</em>
                        </span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Delimiter, new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.Delimiter, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor((model) => model.Delimiter, "", new { @class = "text-danger" })
                        @*Add Validation*@
                    </div>
                </div>
                <div class="form-group fieldDescription">
                    <label class="control-label col-md-4"></label>
                    <div class="col-md-7">
                        <span class="text-muted">
                            @*<em> The type of protocol (FTP or API) or location type (internal DFS or EC2) that will be used to retrieve this file. </em>*@
                            <em> Specify the delimiter, default is comma. </em>
                        </span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GuessingRows, new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.GuessingRows, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor((model) => model.GuessingRows, "", new { @class = "text-danger" })
                        @*Add Validation*@
                    </div>
                </div>
                <div class="form-group fieldDescription">
                    <label class="control-label col-md-4"></label>
                    <div class="col-md-7">
                        <span class="text-muted">
                            @*<em> The type of protocol (FTP or API) or location type (internal DFS or EC2) that will be used to retrieve this file. </em>*@
                            <em> Specifies the number of rows of the file to scan to determine the appropriate data type and length for the columns. </em>
                        </span>
                    </div>
                </div>

                @Html.HiddenFor(model => model.DatasetFileId)


                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="FilenameOverride" data-id="@Model.DatasetFileId" data-name="@Model.FileNameOverride" data-toggle="tooltip" data-placement="bottom" title="Push to SAS">Submit</button>
                    @*<input type="submit" value="Continue" class="btn btn-primary"/>*@ 
                    @*<button type="submit" class="btn btn-primary" value="Continue">Continue</button>*@
                    @*<button type="button" class="btn btn-primary" id="FilenameOverride" data-id="@Model.DatasetId" data-filename="@Model.DatasetFileName">Continue</button>*@
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>

                    
                </div>



            </fieldset>
        </div>
}
<script>
    //Because this is a partial view, we can't put the initialization script into
    //the Scripts section - so we're relying on the fact that this partial view
    //is loaded via AJAX and injected into a page that already has JQuery loaded
    $(function () {
        data.Dataset.PushToOverrideInit();
    });
</script>