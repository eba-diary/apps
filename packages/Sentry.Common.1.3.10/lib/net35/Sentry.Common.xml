<?xml version="1.0"?>
<doc>
<assembly>
<name>
Sentry.Common
</name>
</assembly>
<members>
<member name="T:Sentry.Common.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Sentry.Common.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Sentry.Common.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Sentry.Common.DefaultApplicationEnvironmentName.GetApplicationEnvironmentName">
 <summary>
 By Default, try to get the host of the request if httpcontext exists, otherwise return the machine name.
 </summary>
 <returns></returns>
</member>
<member name="T:Sentry.Common.Logging.ILoggingFrameworkAdapter">
 <summary>
 This interface allows Sentry libraries to not rely on any specific logging framework, but allows
 applications using them to use an adapter class that implements this interface and hooks
 into whatever existing logging framework (Sentry.Logging, log4net, etc) they already use.
 </summary>
</member>
<member name="T:Sentry.Common.Logging.Adapters.Log4netAdapter">
 <summary>
 Class that hooks up Sentry libraries to a log4net logging implementation
 </summary>
 <remarks>
 In the initialization of your application, add the following line of code, 
 passing in the appropriate Sentry.Configuration host setting
 <example>
 Sentry.Common.Logging.Logger.Log = New Log4netAdapter(Sentry.Configuration.Config.GetHostSetting("AppLogger"))
 </example>
 </remarks>
</member>
<member name="T:Sentry.Common.Logging.Adapters.TraceAdapter">
 <summary>
 Default implementation of Sentry.Eventing.ILog, which logs to the trace output
 </summary>
</member>
<member name="M:Sentry.Common.Logging.Adapters.TraceAdapter.GetNamedLog(System.String)">
 <remarks>Since the Trace output doesn't support separate logs, everything goes to the same place.</remarks>
</member>
<member name="T:Sentry.Common.Logging.Logger">
 <summary>
 Shared helper class that handles logging
 </summary>
</member>
<member name="P:Sentry.Common.Logging.Logger.LoggingFrameworkAdapter">
 <summary>
 This property sets what logging framework this helper library is 
 wired up to.  By default, all logging is done to the built-in
 trace output, but you can change this by assigning an object that inherits
 from ILog to this, such as the provided Log4netAdapter or the SentryLoggingAdapter.
 </summary>
 <value></value>
</member>
<member name="M:Sentry.Common.Logging.Logger.GetNamedLog(System.String)">
 <summary>
 Logging Framework Adapters are setup to use one catch-all log for everything.
 However, if you want to separate some logging messages from others, your application 
 code will need to call this method to retrieve a separate named logger, and then
 you will need to configure that separate logger in your logging framework configuration.
 </summary>
 <param name="logName">The name of the log to retrieve in the framework</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Sentry.Common.SystemClock">
 <summary>
 SystemClock is designed to be used in place of System.DateTime.Now for all date logic.  
 It supports mocking a provider for "Current Time" so it can be used in unit and system testing.
 </summary>
 <remarks>The provider for determining current date and time is <see cref="T:System.ThreadStaticAttribute">ThreadStatic</see>. </remarks>
</member>
<member name="M:Sentry.Common.SystemClock.Now">
 <summary>
 Gets a <see cref="T:System.DateTime">DateTime</see> object that is set to the current date and time on this computer, expressed as the local time
 </summary>
 <returns></returns>
 <remarks>The provider for determining current date and time is <see cref="T:System.ThreadStaticAttribute">ThreadStatic</see>.  
 The default provider is <see cref="M:Sentry.Common.SystemClock.Now">System.DateTime.Now</see>.  When the provider is mocked from the <see cref="M:Sentry.Common.SystemClock.Relative(System.TimeSpan)">Relative</see> or <see cref="M:Sentry.Common.SystemClock.Frozen(System.DateTime)">Frozen</see> methods, 
 the current date and time will not represent the actual system clock time on the computer.</remarks>
</member>
<member name="M:Sentry.Common.SystemClock.Today">
 <summary>
 Gets the current date.
 </summary>
 <returns></returns>
 <remarks>The provider for determining current date and time is <see cref="T:System.ThreadStaticAttribute">ThreadStatic</see>.  
 The default provider is <see cref="M:Sentry.Common.SystemClock.Now">System.DateTime.Now</see>.  When the provider is mocked from the <see cref="M:Sentry.Common.SystemClock.Relative(System.TimeSpan)">Relative</see> or <see cref="M:Sentry.Common.SystemClock.Frozen(System.DateTime)">Frozen</see> methods, 
 the current date and time will not represent the actual system clock time on the computer.</remarks>
</member>
<member name="M:Sentry.Common.SystemClock.Relative(System.TimeSpan)">
 <summary>
 Modify the currently executing thread's provider for Current Time to a value relative to the current <see cref="T:Sentry.Common.SystemClock">SystemClock</see>.
 </summary>
 <param name="offset">The timespan to offset the current SystemClock by.  Positive values move the clock forward in time, negative values move the clock backward in time.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Sentry.Common.SystemClock.Frozen(System.DateTime)">
 <summary>
 Modify the currently executing thread's provider for Current Time to a fixed, frozen in time, value.
 </summary>
 <param name="pointInTime">The frozen point in time to set the clock to</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Sentry.Common.Extensions.WebExtensions.AddBasicAuthenticationHeaders(System.Net.WebRequest,System.Net.ICredentials)">
 <summary>
 Adds Basic Authentication headers to the WebRequest. By default, WebRequest
 waits for a 401 response before it sends Basic Authentication headers.  Using
 this method, the headers are sent preemptively.
 </summary>
 <example>
 In the example below, a webRequest is created and then basic authentication headers
 are added using the extension method.
 <code>
 Dim webRequest = System.Net.WebRequest.Create("http://www.sentry.com")
 webRequest.AddBasicAuthenticationHeaders(New NetworkCredential("username", "password"))
 </code>
 </example>
 <example>
 In the example below, the AuthenticatedSAFEService class overrides the auto-generated
 web service proxy class safews.SAFEService.  Overriding the GetWebRequest method forces
 the web service calls to preemptively authenticate.
 <code>
 Public Class AuthenticatedSAFEService
    Inherits safews.SAFEService
    
    Protected Overrides Function GetWebRequest(uri As Uri) As System.Net.WebRequest
        Return MyBase.GetWebRequest(uri).AddBasicAuthenticationHeaders(Me.Credentials)
    End Function
    
    End Class
 </code>
 </example>
 <param name="webRequest"></param>
 <param name="credentials">An instance of NetworkCredentials with a user name and password</param>
 <returns>A webRequest with an appropriate Authorization header for Basic authentication</returns>
 <remarks></remarks>
</member>
</members>
</doc>
