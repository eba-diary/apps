<?xml version="1.0"?>
<doc>
<assembly>
<name>
Sentry.Core
</name>
</assembly>
<members>
<member name="T:Sentry.Core.ValidationSeverity">
	<summary>
 The severity of a validation result.  
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.IsValid">
	<summary>
 Returns True if there are no validation errors (severity = Error)
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.GetBySeverity(Sentry.Core.ValidationSeverity)">
	<summary>
 Gets all validation results of a specified severity
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.GetAll">
	<summary>
 Gets all validation results
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.Add(System.String,System.String,Sentry.Core.ValidationSeverity)">
	<summary>
 Adds a new validation result.  
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.
 </summary>
	<param name="id">An identifier for this validation result.  This identifier can be used by your presentation
 layer to link the error back to a field on the UI.</param>
	<param name="description">A textual description of the validation result, usually for display to the user.</param>
	<param name="severity">The severity of the validation result. 
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.</param>
</member><member name="M:Sentry.Core.ValidationResults.Add(System.String,Sentry.Core.ValidationSeverity)">
	<summary>
 Adds a validation result, without specifying an identifier.
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.
 </summary>
	<param name="description">A textual description of the validation result, usually for display to the user.</param>
	<param name="severity">The severity of the validation result. 
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.</param>
</member><member name="M:Sentry.Core.ValidationResults.MergeInResults(Sentry.Core.ValidationResults)">
	<summary>
 Merges another ValidationResults' list of Validation Results into this object.
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.Contains(System.String)">
	<summary>
 Predicate that determines if this object contains a Validation Result with a given ID.
 </summary>
</member><member name="M:Sentry.Core.ValidationResults.GetErrorsAsString(System.String)">
	<summary>
 Returns a string of all Validation Results with a severity level of <see cref="F:Sentry.Core.ValidationSeverity.Error"/>,
 separated by <paramref name="separator"/>
	</summary>
	<param name="separator">The string to put in between each Validation Result description.</param>
</member><member name="T:Sentry.Core.ValidationResults">
	<summary>
 A collection of <see cref="T:Sentry.Core.ValidationResult"/> used when validating entities
 prior to persisting or deleting them.
 </summary>
	<remarks></remarks>
</member><member name="P:Sentry.Core.ValidationResult.Id">
	<summary>
 An identifier for this validation result.  This identifier can be used by your presentation
 layer to link the error back to a field on the UI.
 </summary>
</member><member name="P:Sentry.Core.ValidationResult.Description">
	<summary>
 A textual description of the validation result, usually for display to the user.
 </summary>
</member><member name="P:Sentry.Core.ValidationResult.Severity">
	<summary>
 The severity of the validation result. 
 Only those of severity <see cref="F:Sentry.Core.ValidationSeverity.Error"/> will cause <see cref="M:Sentry.Core.ValidationResults.IsValid"/> to be false.
 </summary>
</member><member name="T:Sentry.Core.ValidationResult">
	<summary>
 Represents a unique result of validating an entity.
 </summary>
</member><member name="P:Sentry.Core.ValidationException.ValidationResults">
	<summary>
 The collection of Validation Results that caused the exception
 </summary>
</member><member name="T:Sentry.Core.ValidationException">
	<summary>
 An exception to indicate that business rule or domain entity validation has failed,
 and the user should be notified.  This exception should be handled gracefully and
 the <see cref="T:Sentry.Core.ValidationResult"/> should be displayed to the user.
 </summary>
</member><member name="F:Sentry.Core.QueryCacheRegion.VeryShortTerm">
	<summary>
 1 minute
 </summary>
	<remarks></remarks>
</member><member name="F:Sentry.Core.QueryCacheRegion.ShortTerm">
	<summary>
 5 minutes
 </summary>
	<remarks></remarks>
</member><member name="F:Sentry.Core.QueryCacheRegion.MediumTerm">
	<summary>
 1 hour
 </summary>
	<remarks></remarks>
</member><member name="F:Sentry.Core.QueryCacheRegion.LongTerm">
	<summary>
 8 hours
 </summary>
	<remarks></remarks>
</member><member name="M:Sentry.Core.QueryableExtensions.ToFuture``2(Sentry.Core.IFetchRequest{``0,``1})">
	<summary>
 Tells the ORM to defer query execution to a later point, 
 when it will have more information about what the application is trying to do,
 and can optimize the query accordingly.  Sometimes several queries are sent 
 to the database in one batch; sometimes several queries are combined.
 </summary>
</member><member name="M:Sentry.Core.QueryableExtensions.ToFuture``1(System.Linq.IQueryable{``0})">
	<summary>
 Tells the ORM to defer query execution to a later point, 
 when it will have more information about what the application is trying to do,
 and can optimize the query accordingly.  Sometimes several queries are sent 
 to the database in one batch; sometimes several queries are combined.
 </summary>
</member><member name="M:Sentry.Core.QueryableExtensions.Fetch``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 Eager load a single valued property
 </summary>
	<example>
 The following example shows how to get Items with their associated Seller
 <code>
 _domainContext.Items.Fetch(Function(i) i.Seller)
 </code>
	</example>
</member><member name="M:Sentry.Core.QueryableExtensions.FetchMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
	<summary>
 Eager load a related collection.  You should only have one of these per query.
 </summary>
	<example>
 The following example shows how to get Items with the list of their associated Bids
 <code>
 _domainContext.Items.FetchMany(Function(i) i.Bids)
 </code>
	</example>
</member><member name="M:Sentry.Core.QueryableExtensions.ThenFetch``3(Sentry.Core.IFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
	<summary>
 Eager load a single valued property off the previously Fetched entity
 </summary>
	<example>
 The following example shows how to get Items, with their Sellers, with their Seller's DefaultPaymentMethod
 <code>
 _domainContext.Items.Fetch(Function(i) i.Seller).ThenFetch(Function(s) s.DefaultPaymentMethod)
 </code>
	</example>
</member><member name="M:Sentry.Core.QueryableExtensions.ThenFetchMany``3(Sentry.Core.IFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}})">
	<summary>
 Eager load a related collection off the previously Fetched entity
 </summary>
	<example>
 The following example shows how to get Items, with their Sellers, with their Seller's PaymentMethods
 <code>
 _domainContext.Items.Fetch(Function(i) i.Seller).ThenFetchMany(Function(s) s.PaymentMethods)
 </code>
	</example>
</member><member name="M:Sentry.Core.QueryableExtensions.Cacheable``1(System.Linq.IQueryable{``0},Sentry.Core.QueryCacheRegion)">
	<summary>
 Tells the ORM that it should cache the results of this query.
 </summary>
	<param name="region">Specifies which cache region the query results should be saved in.  
 Often used to differentiate how long the query results are saved.</param>
</member><member name="T:Sentry.Core.QueryableExtensions">
	<summary>
 Provides support for various ways of eager fetching data, without taking a dependency on nHibernate
 </summary>
	<remarks></remarks>
</member><member name="P:Sentry.Core.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Sentry.Core.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Sentry.Core.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Sentry.Core.IWritableDomainContext.SaveChanges(System.Boolean)">
	<summary>
 When <paramref name="commit"/> is True, commits all pending changes and starts a new transaction.
 When <paramref name="commit"/> is False, just sends all pending changes to the database, 
 but does not commit the transaction.
 </summary>
	<param name="commit">Whether to commit the database transaction</param>
	<remarks></remarks>
</member><member name="M:Sentry.Core.IWritableDomainContext.Add``1(``0)">
	<summary>
 Persists the given entity to the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableDomainContext.Remove``1(``0)">
	<summary>
 Deletes the given entity from the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableDomainContext.RemoveById``1(System.Object)">
	<summary>
 Deletes the entity of type <typeparamref name="T"/> identified by <paramref name="id"/> from the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableDomainContext.AttachAsUnmodified``1(``0)">
	<summary>
 Attaches an unmodified entity to be tracked by this domain context. 
 This entity may be a result of a previous <see cref="M:Sentry.Core.IWritableDomainContext.Detach``1(``0)"/>, or 
 a previously closed domain context.
 </summary>
	<typeparam name="T"></typeparam>
	<param name="entity">An entity object</param>
	<remarks>
 If this domain context already is tracking an entity with the same ID, an exception will be thrown.
 If the entity passed to this method has a null ID, an exception will be thrown.
 </remarks>
</member><member name="M:Sentry.Core.IWritableDomainContext.AttachAsModified``1(``0)">
	<summary>
 Attaches a modified entity to be tracked by this domain context.
 
 </summary>
	<typeparam name="T"></typeparam>
	<param name="entity">An entity object</param>
	<remarks>
 Because this domain context does not know what has changed about this entity, 
 a call to <see cref="M:Sentry.Core.IWritableDomainContext.SaveChanges(System.Boolean)"/> will cause every property to be updated
 in the database.
 </remarks>
</member><member name="M:Sentry.Core.IWritableDomainContext.Detach``1(``0)">
	<summary>
 Removes the given entity from being tracked by this domain context.
 </summary>
	<typeparam name="T"></typeparam>
	<param name="entity">An entity object</param>
	<remarks>Changes to the instance will not be synchronized with the database.  
 This operation cascades to associated instances if the association is mapped 
 with cascade="all" or cascade="all-delete-orphan".
 </remarks>
</member><member name="M:Sentry.Core.IWritableDomainContext.Merge``1(``0)">
	<summary>
 Copy the state of the given object onto the persistent object with the same identifier. 
 If there is no persistent instance currently associated with the session, it will be loaded. 
 Return the persistent instance. If the given instance is unsaved, save a copy of and return 
 it as a newly persistent instance. The given instance does not become associated with the 
 session.  This operation cascades to associated instances if the association is mapped with 
 cascade="merge".  The semantics of this method are defined by JSR-220.
 </summary>
	<typeparam name="T"></typeparam>
	<param name="entity">A detached instance with state to be copied</param>
	<returns>An updated persistent instance</returns>
	<remarks>This is an advanced operation - if you have questions about its use, please
 contact Technical Architecture.</remarks>
</member><member name="T:Sentry.Core.IWritableDomainContext">
	<summary>
 A base interface for all stateful read/write domain contexts (domain contexts that track entities).  
 This interface exposes methods to add and remove aggregate roots, save changes for tracked 
 aggregate roots, and attach/detach/merge aggregate roots.
 </summary>
</member><member name="M:Sentry.Core.IValidatable.ValidateForSave">
	<summary>
 Validates the entity before the entity is saved.
 If the entity is valid, return a ValidationResults with no ValidationResult added to it.
 </summary>
	<returns>A ValidationResults which contains all validation errors.</returns>
</member><member name="M:Sentry.Core.IValidatable.ValidateForDelete">
	<summary>
 Validates the entity before the entity is deleted.
 If the delete is valid, return a ValidationResults with no ValidationResult added to it.
 </summary>
	<returns>A ValidationResults which contains all validation errors.</returns>
</member><member name="T:Sentry.Core.IValidatable">
	<summary>
 An interface that can be added to your domain entities so you can validate them
 before the ORM persists changes to the datastore.
 </summary>
	<remarks></remarks>
</member><member name="T:Sentry.Core.NullQueryableExtensionProvider">
	<summary>
 The default <see cref="T:Sentry.Core.IQueryableExtensionProvider"/> that is used for all Types, unless
 a different provider is registered via <see cref="M:Sentry.Core.QueryableExtensions.SetQueryableExtensionProvider(System.Type,Sentry.Core.IQueryableExtensionProvider)"/>.
 All the methods are simply pass-through.
 </summary>
</member><member name="T:Sentry.Core.IReadableStatelessDomainContext">
	<summary>
 A base interface for all stateless domain contexts (domain contexts that do NOT track entities).
 If your domain context is only needed for reading data, then implement this interface.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.Insert``1(``0)">
	<summary>
 Persists the given entity to the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.Update``1(``0)">
	<summary>
 Updates the given entity in the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.Delete``1(``0)">
	<summary>
 Deletes the given entity from the datastore.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.BeginTransaction">
	<summary>
 Begins a transaction on this domain context.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.CommitTransaction">
	<summary>
 Commits the transaction on this domain context.
 </summary>
</member><member name="M:Sentry.Core.IWritableStatelessDomainContext.RollbackTransaction">
	<summary>
 Rollback the transaction on this domain context.
 </summary>
	<remarks></remarks>
</member><member name="T:Sentry.Core.IWritableStatelessDomainContext">
	<summary>
 A base interface for all stateless read/write domain contexts (domain contexts that do NOT track entities).  
 This interface exposes methods to insert, update, and delete aggregate roots, and manage transactions
 </summary>
</member><member name="M:Sentry.Core.IReadableDomainContext.GetReferenceById``1(System.Object)">
	<summary>
		<para>Gets an entity of type <typeparamref name="T"/> given the specified <paramref name="id"/>.</para>
		<para>Use GetReferenceById when you know that the value exists in the database, and just need
 the entity to add a reference to another entity.  GetReferenceById will never go to the
 database - so it will return a proxy entity if it doesn't have the entity with ID 
 <paramref name="id"/> in its cache.</para>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="id"></param>
	<returns></returns>
	<example>
 If you know that the value exist in the database, and you don’t want to pay the extra 
 select to have that, but you want to get that value so we can add that reference to an 
 object, you can use Load to do so:
 <code>
 new Order
 {
 	Amount = amount,
 	customer = s.Load(Of Customer)(1)
 }
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Sentry.Core.IReadableDomainContext.Clear">
	<summary>
 Clears all tracked entities, and cancels all pending changes.
 </summary>
</member><member name="T:Sentry.Core.IReadableDomainContext">
	<summary>
 A base interface for all stateful domain contexts (domain contexts that track entities).
 If your domain context is only needed for reading data, then implement this interface.
 </summary>
	<remarks></remarks>
</member><member name="M:Sentry.Core.IBaseDomainContext.GetById``1(System.Object)">
	<summary>
 Retrieves an entity of type <typeparamref name="T"/> with the specified ID.
 If the entity is not found, GetById will return Nothing.
 </summary>
	<typeparam name="T">The type of the entity</typeparam>
	<param name="id">The ID of the entity to retrieve</param>
</member><member name="M:Sentry.Core.IBaseDomainContext.GetBySqlQuery``1(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
	<summary>
 Retrieves entities of type <typeparamref name="T"/> based on a SQL query.
 </summary>
	<typeparam name="T">The types of the entity to return</typeparam>
	<param name="sql">A SQL SELECT query</param>
	<param name="parameters">A list of parameters for the SQL query</param>
</member><member name="T:Sentry.Core.IBaseDomainContext">
	<summary>
 A base interface for all domain contexts, whether stateful or stateless, read-only or writable.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>