<?xml version="1.0"?>
<!--
<auto-generated>
    This code was generated by a tool.

     Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
-->
<xs:schema xmlns:tns="urn:Sentry.Smarts.Configuration" elementFormDefault="qualified" targetNamespace="urn:Sentry.Smarts.Configuration" xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:element name="SmartsSettings" type="tns:Sentry.Smarts.Configuration.SmartsConfigurationCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.SmartsConfigurationCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" name="databases" type="tns:Sentry.Smarts.Configuration.DatabaseResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Database resources attempt to establish a connection to the configured database and optionally execute a query against it.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="webServices" type="tns:Sentry.Smarts.Configuration.WebServiceResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Web Service resources attempt to make a HTTP connection to the specified URL and simply look for a status code 200 returned.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="smartsServices" type="tns:Sentry.Smarts.Configuration.SmartsServiceResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>SMARTS Service resources are just like web service resource except they should be pointed at another system’s SMARTS URL and go the extra step of checking the response body to verify the target service’s SMARTS page reports it as up.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="windowsServices" type="tns:Sentry.Smarts.Configuration.WindowsServiceResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Windows Service resources monitor the status of Windows service processes running on the local machine.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="fileNotExists" type="tns:Sentry.Smarts.Configuration.FileNotExistsResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>The File Not Exists resource is available to be used as a quick mechanism to manually force a service to report as down.  Creating an empty file by the specified (or default) name will cause that resource to be considered down.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="fileExists" type="tns:Sentry.Smarts.Configuration.FileExistsResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>The File Exists resource is available to be used as a mechanism to manually force a service to report as down.  A file with the specified (or default) name must exist for the resource to be considered up.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="commands" type="tns:Sentry.Smarts.Configuration.CommandResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Command resources allow you to invoke an arbitrary external command and use the exit code of that process to indicate whether or not the resource is up or down.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="customResources" type="tns:Sentry.Smarts.Configuration.CustomResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Custom resources allow you to specify your own class to implement whatever specific needs you may have.  Class instances will be loaded dynamically during initialization and must implement the IResource interface.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="eventingQueues" type="tns:Sentry.Smarts.Configuration.EventingQueueResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>Eventing Queue resources attempt to connect to the configured Sentry.Eventing (>=1.0) message queue system to determine if it is available.  For .Net, it requires that Sentry.Eventing.dll and Sentry.Eventing.RabbitAMQPProvider.dll be present in the bin directory, as these will be loaded dynamically at runtime.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="rabbitMQs" type="tns:Sentry.Smarts.Configuration.RabbitMQResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>RabbitMQ resources attempt to connect to a RabbitMQ queueing system via the AMQP protocol.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="redisServices" type="tns:Sentry.Smarts.Configuration.RedisServicesResourceCollectionCT">
				<xs:annotation>
					<xs:documentation>RedisServices resources attempt to connect to the Redis server(s) specified.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
		<xs:attribute name="serviceName" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for the service/site to be monitored.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time (in seconds) to wait before allowing the refresh/re-query of resources.  Default: 60 seconds</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cacheExpiration" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The amount of time (in seconds) for clients of your SMARTS page to cache the response received from your SMARTS page.  This is done by setting the appropriate cache-control headers.  Default: none</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.DatabaseResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.DatabaseResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.DatabaseResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.DatabaseResourceCT">
				<xs:annotation>
					<xs:documentation>The DatabaseResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.DatabaseResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.DatabaseResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.ResourceCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.DatabaseResourceCT">
		<xs:attribute name="connectionString" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>A raw connection string defining the database to check.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="connectionStringKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Sentry Configuration key for the connection string to use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="query" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional query to perform on the database after connecting.  The first row of the returned result set will be checked using the queryResult attributes.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="queryResultColumn" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The column from the query result set whose value will be checked.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="queryResultValue" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The expected value in the specified column of the first row of the query result set.  If the values do not match, the resource will be considered down.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="provider" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Provider.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CustomResourceCT">
		<xs:attribute name="targetType" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The fully qualified type name of a class that implements the IResource interface to be instantiated and used.  Can include a comma separated assembly name as well.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="args" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>(Optional) Arguments to provide to the CustomResource class</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="argsKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>(Optional) Configuration key for the arguments to provide to the CustomResource class</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CustomResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.CustomResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.CustomResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.CustomResourceCT">
				<xs:annotation>
					<xs:documentation>The CustomResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CustomResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CustomResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.WebServiceResourceCT">
		<xs:attribute name="url" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The URL of the web service to check.  Be sure to include any protocol (http, https) and ports in your URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="urlKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The configuration key for the web service URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="userNameKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the username to be supplied as credentials.  If set, passwordKey is also required. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passwordKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the password to be supplied as credentials.  If set requires userNameKey to be set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WebServiceResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.WebServiceResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.WebServiceResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.WebServiceResourceCT">
				<xs:annotation>
					<xs:documentation>The WebServiceResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WebServiceResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WebServiceResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.SmartsServiceResourceCT">
		<xs:attribute name="smartsPage" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>A relative URL to the target SMARTS page that will be appended to the host from the configured URL.  This is mainly useful for when you use the urlKey property to pull in a URL for a web service from your Sentry.Configuration settings.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="url" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The URL of the web service to check.  Be sure to include any protocol (http, https) and ports in your URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="urlKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The configuration key for the web service URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="userNameKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the username to be supplied as credentials.  If set, passwordKey is also required. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passwordKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the password to be supplied as credentials.  If set requires userNameKey to be set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.SmartsServiceResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.SmartsServiceResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.SmartsServiceResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.SmartsServiceResourceCT">
				<xs:annotation>
					<xs:documentation>The SmartsServiceResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.SmartsServiceResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.SmartsServiceResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.WindowsServiceResourceCT">
		<xs:attribute name="serviceName" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the service to monitor.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="serviceNameKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The configuration key for the service name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="serverName" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The ServerName.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="serverNameKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The ServerNameKey.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WindowsServiceResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.WindowsServiceResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.WindowsServiceResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.WindowsServiceResourceCT">
				<xs:annotation>
					<xs:documentation>The WindowsServiceResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WindowsServiceResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.WindowsServiceResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.FileNotExistsResourceCT">
		<xs:attribute name="file" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the file to monitor (can be a relative path, which is relative to the root of your web application).  Defaults to smarts_up.txt for a FileExists resource, and smarts_down.txt for a FileNotExists resource</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileNotExistsResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.FileNotExistsResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.FileNotExistsResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.FileNotExistsResourceCT">
				<xs:annotation>
					<xs:documentation>The FileNotExistsResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileNotExistsResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileNotExistsResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.FileExistsResourceCT">
		<xs:attribute name="file" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the file to monitor (can be a relative path, which is relative to the root of your web application).  Defaults to smarts_up.txt for a FileExists resource, and smarts_down.txt for a FileNotExists resource</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileExistsResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.FileExistsResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.FileExistsResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.FileExistsResourceCT">
				<xs:annotation>
					<xs:documentation>The FileExistsResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileExistsResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.FileExistsResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.CommandResourceCT">
		<xs:attribute name="command" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The command to execute.  This should be an absolute path unless the command is in the system PATH.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="arguments" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The command line arguments to be passed to the command.  Note if you need to use double-quotes in an XML attribute use ". </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="successCodes" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The declaration of what exit codes constitutes the resource being up.   Typically you should only specify either successCodes or failureCodes.  Accepts a syntax of comma-separated integers or integer ranges denoted by "..".  Valid examples include: "0", "0,1", "0..10", and "0..10,15".  </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failureCodes" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The declaration of what exit codes constitutes the resource being down.   Typically you should only specify either successCodes or failureCodes.  Accepts a syntax of comma-separated integers or integer ranges denoted by "..".  Valid examples include: "0", "0,1", "0..10", and "0..10,15".  </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="argumentsKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the command line arguments.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the command line executable</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CommandResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.CommandResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.CommandResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.CommandResourceCT">
				<xs:annotation>
					<xs:documentation>The CommandResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CommandResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.CommandResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.HostedSmartsResourceCT">
		<xs:attribute name="url" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The URL of the web service to check.  Be sure to include any protocol (http, https) and ports in your URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="urlKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The configuration key for the web service URL.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="userNameKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the username to be supplied as credentials.  If set, passwordKey is also required. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passwordKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An optional configuration key for the password to be supplied as credentials.  If set requires userNameKey to be set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.HostedSmartsResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.HostedSmartsResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.HostedSmartsResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.HostedSmartsResourceCT">
				<xs:annotation>
					<xs:documentation>The HostedSmartsResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.HostedSmartsResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.HostedSmartsResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.FileExistenceResourceCT">
		<xs:attribute name="file" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the file to monitor (can be a relative path, which is relative to the root of your web application).  Defaults to smarts_up.txt for a FileExists resource, and smarts_down.txt for a FileNotExists resource</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.EventingQueueResourceCT">
		<xs:attribute name="eventingConfigType" use="required" type="tns:EventingQueueConfigType">
			<xs:annotation>
				<xs:documentation>Which Sentry.Eventing config section does the EventingConfigName setting refer to: Consumer or Publisher?</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="eventingConfigName" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the Sentry.Eventing consumer or publisher to connect to</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.EventingQueueResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.EventingQueueResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.EventingQueueResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.EventingQueueResourceCT">
				<xs:annotation>
					<xs:documentation>The EventingQueueResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.EventingQueueResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.EventingQueueResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.RabbitMQResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.RabbitMQResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.RabbitMQResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.RabbitMQResourceCT">
				<xs:annotation>
					<xs:documentation>The RabbitMQResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.RabbitMQResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.RabbitMQResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.RabbitMQResourceCT">
		<xs:attribute name="connectionURI" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>An AMQP connection URI, such as "amqps://username:password@queueserver.sentry.com/vhost".  See https://www.rabbitmq.com/uri-spec.html for more info.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="connectionURIKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Sentry Configuration key for the AMQP Connection URI to use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.RedisServicesResourceCollectionCT">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="clear" type="tns:Sentry.Smarts.Configuration.RedisServicesResourceCollectionClearCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="remove" type="tns:Sentry.Smarts.Configuration.RedisServicesResourceCollectionRemoveCT" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="tns:Sentry.Smarts.Configuration.RedisServicesResourceCT">
				<xs:annotation>
					<xs:documentation>The RedisServicesResource Configuration Element.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.RedisServicesResourceCollectionRemoveCT">
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="Sentry.Smarts.Configuration.RedisServicesResourceCollectionClearCT" />
	<xs:complexType name="Sentry.Smarts.Configuration.RedisServicesResourceCT">
		<xs:attribute name="connectionString" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>A raw connection string defining the Redis server(s) to check.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="connectionStringKey" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Sentry Configuration key for the connection string to use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The display name for this resource.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="required" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If required, the resource being down causes the whole service to be considered down, otherwise the service is considered “degraded”.  Default: true</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refreshInterval" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The minimum amount of time to wait before refreshing this resource.  If left unset the global refreshInterval setting is used (which has a default of 5 seconds).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If the resource is marked as hidden, whenever its status is up it will not be shown in the list of resources.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional" type="xs:int">
			<xs:annotation>
				<xs:documentation>The maximum amount of time to wait for the resource to respond, in seconds.  It will default to 5 seconds if unspecified.  However, the framework will always timeout a resource once the the refresh interval minus one second has passed (to prevent potential overlapping resource requests).  If a resource times out, then it is treated as being "DOWN".  This setting is only honored by these resources: command, database, smarts, web service, and HornetQ.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checkedByLoadBalancer" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>If marked true, then this resource is included when calculating the composite resource status when the ?mode=LB query string is passed to SMARTS.  This would then cause your application to be pulled out of the load balancer if the resource is down.  Default: false</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreDegraded" use="optional" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>The IgnoreDegraded.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tags" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The Tags.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaImpact" use="optional" type="tns:SLAImpactType">
			<xs:annotation>
				<xs:documentation>The SLAImpact.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaCustomerImpactDetail" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLACustomerImpactDetail.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="slaDescription" use="optional" type="xs:string">
			<xs:annotation>
				<xs:documentation>The SLADescription.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="EventingQueueConfigType">
		<xs:annotation>
			<xs:documentation>EventingQueueConfigType.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Consumer">
				<xs:annotation>
					<xs:documentation>Consumer.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Publisher">
				<xs:annotation>
					<xs:documentation>Publisher.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SLAImpactType">
		<xs:annotation>
			<xs:documentation>SLAImpactType.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="FullOutage">
				<xs:annotation>
					<xs:documentation>FullOutage.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PartialOutage">
				<xs:annotation>
					<xs:documentation>PartialOutage.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="InformationalOnly">
				<xs:annotation>
					<xs:documentation>InformationalOnly.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="NotSet">
				<xs:annotation>
					<xs:documentation>NotSet.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
